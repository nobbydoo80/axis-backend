name: Axis Tests

on: push

jobs:
  cancel:
    name: Canceling Outstanding Jobs
    runs-on: ubuntu-latest
    steps:
      - uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

  black:
    name: Black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -q -r requirements_dev.txt

      - name: Version
        run: black --version

      - name: Black
        run: black --check .

  security:
    name: Bandit Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -q bandit

      - name: Bandit
        run: |
          bandit -r . -x ./.venv/*,*/test/*,test*.py,./media/*,./webpack/*,*/migrations/* -s B104,B108,B113,B108,B113,B307,B308,B320,B324,B703 -ll -f json -o report.json

      - name: Show report
        if: ${{ success() || failure() }}
        run: cat report.json

      - name: upload report
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: Bandit_Security_Report.json
          path: report.json

  check:
    name: Django source code check (Cache Load)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Update and setup requirements
        run: |
          git config --global url.https://${{ secrets.ORGANIZATIONAL_REPO_TOKEN }}@github.com/.insteadOf https://github.com
          sed --in-place=.bak -E 's/^-e[[:space:]]+//' requirements.txt
          sed --in-place=.bak2 -E 's/uWSGI.*//' requirements.txt
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          pip install -q -r requirements.txt --retries 3
          pip install -q -r requirements_dev.txt --retries 3

      - name: Run Django Check
        env:
          PYTHONWARNINGS: module
          TASK_ALWAYS_EAGER: 1
          DB_USER: root
          DB_PASSWORD: password
          BING_MAPS_API_KEY: ${{ secrets.BING_MAPS_API_KEY }}
          GOOGLE_MAPS_CLIENT_ID: ${{ secrets.GOOGLE_MAPS_CLIENT_ID }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          RECAPTCHA_PRIVATE_KEY: ${{ secrets.RECAPTCHA_PRIVATE_KEY }}
          RECAPTCHA_PUBLIC_KEY: ${{ secrets.RECAPTCHA_PUBLIC_KEY }}
          FIELD_ENCRYPTION_KEY: ${{ secrets.FIELD_ENCRYPTION_KEY }}
          SECRET_KEY: SOME_LAME_KEY
          DJANGO_SETTINGS_MODULE: settings.test
        run: |
          python ./manage.py check --settings=settings.test



  webpack:
    name: Frontend (Webpack)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: "Dir list"
        env:
          NODE_ENV: build
        run: cd webpack && ls -altr
      - name: "Install"
        env:
          NODE_ENV: build
        run: cd webpack && npm ci --force
      - name: "Versions"
        run: |
          node --version
          npm --version
          webpack --version
      - name: "NPM Build"
        run: |
          cd webpack && npm run-script build
      - name: "NPM Build Legacy"
        run: |
          cd axis/core/static/js
          npm ci --force
          npm run-script build


  uwsgi-build:
    name: "Build uWSGI package"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Note this was taken from https://github.com/unbit/uwsgi/blob/master/.github/workflows/compile-test.yml
      - name: Install uWSGI Dependencies
        run: |
          sudo apt update -qq
          sudo apt install --no-install-recommends -qqyf build-essential \
            libxml2-dev libpcre3-dev libcap2-dev \
            libargon2-0-dev libsodium-dev \
            liblua5.1-0-dev \
            libjansson-dev libldap2-dev libpq-dev \
            libpam0g-dev libsqlite3-dev libyaml-dev \
            libzmq3-dev libmatheval-dev libperl-dev \
            libonig-dev libdb-dev libqdbm-dev libbz2-dev \
            libwrap0-dev libgeoip-dev libv8-dev libxslt1-dev \
            libboost-thread-dev libboost-filesystem-dev \
            libssl-dev libacl1-dev python-greenlet-dev \
            libcurl4-openssl-dev \
            openjdk-8-jdk libgloox-dev gccgo \
            cli-common-dev mono-devel mono-mcs uuid-dev \
            curl check
          python -m pip install --upgrade pip

      - name: Get & Build uWSGI
        run: |
          echo "::notice:: Python Version: $(python --version)"
          echo "::notice:: Pip Version: $(pip --version)"
          echo "::notice:: uWSGI Version: $(cat requirements.txt | grep -i uwsgi)"
          pip install $(cat requirements.txt | grep -i uwsgi) || echo "::error:: Failed to build Python $(python --version) $(cat requirements.txt | grep -i uwsgi)"
        continue-on-error: true

  docker-build:
    name: "Build Axis Docker Image"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          secrets: "github_token=${{ secrets.ORGANIZATIONAL_REPO_TOKEN }}"
#          platforms: linux/arm64, linux/amd64
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

  docker-build-messaging:
    name: "Build Axis Messaging Docker Image"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          file: axis/messaging/server/Dockerfile
          context: .
          push: false
#          platforms: linux/arm64, linux/amd64
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

  setup-matrix:
    name: Define test matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          pip install git+https://${{ secrets.ORGANIZATIONAL_REPO_TOKEN }}@github.com/pivotal-energy-solutions/tensor-infrastructure@master#egg=infrastructure
      - name: Get Test Matrix
        id: get-matrix
        run: |
          test_matrix_builder.py --event=${{ github.event_name }} --branch=${GITHUB_REF##*/} -v > tests.json
          echo "DB_MATRIX=$(jq -c '.db' tests.json)" >> $GITHUB_OUTPUT
          echo "TEST_MATRIX=$(jq -c '.tests' tests.json)" >> $GITHUB_OUTPUT
    outputs:
      db-matrix: ${{ steps.get-matrix.outputs.DB_MATRIX }}
      db-tests: ${{ steps.get-matrix.outputs.TEST_MATRIX }}

  tests:
    name: ${{ matrix.test-path }} / Py ${{ matrix.python-version }} / Django ${{ matrix.django-version }} / ${{ matrix.db }}
    runs-on: ubuntu-latest
    needs: setup-matrix
#    continue-on-error: ${{ matrix.django-version == '~=4.2.0' }}
    strategy:
      max-parallel: 24
      matrix:
        db: ${{fromJson(needs.setup-matrix.outputs.db-matrix)}}
        python-version: [ "3.10" ]
        django-version: [ "~=4.2.0" ]
        test-path: ${{fromJson(needs.setup-matrix.outputs.db-tests)}}

    services:
      mariadb:
        image: mariadb:latest
        env:
          MARIADB_ROOT_PASSWORD: password
          MARIADB_DATABASE: axis
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mariadb-admin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Verify MariaDB connection from host
        if: matrix.db == 'mariadb'
        run: |
          mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e \
            "CREATE DATABASE IF NOT EXISTS axis CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci;\
             CREATE DATABASE IF NOT EXISTS remrate CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci;" \
          2>&1 > /dev/null
#          mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e "SHOW DATABASES;"
#          mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e "SHOW VARIABLES LIKE  'char%';"
#          mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e "SET GLOBAL sql_mode = 'STRICT_TRANS_TABLES'"

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Update and setup requirements
        run: |
          git config --global url.https://${{ secrets.ORGANIZATIONAL_REPO_TOKEN }}@github.com/.insteadOf https://github.com
          sed --in-place=.bak -E 's/^-e[[:space:]]+//' requirements.txt
          sed --in-place=.bak2 -E 's/uWSGI.*//' requirements.txt
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          pip install -q -r requirements.txt --retries 3
          pip install -q -r requirements_dev.txt --retries 3
          pip uninstall -y Django
          pip install Django${{ matrix.django-version }}

      - name: Run ${{ matrix.db }} Django ${{ matrix.django-version }} ${{ matrix.test-path }} Tests
        env:
          PYTHONWARNINGS: module
          TASK_ALWAYS_EAGER: 1
          DB_TYPE: ${{ matrix.db }}
          DB_USER: root
          DB_PASSWORD: password
          BING_MAPS_API_KEY: ${{ secrets.BING_MAPS_API_KEY }}
          GOOGLE_MAPS_CLIENT_ID: ${{ secrets.GOOGLE_MAPS_CLIENT_ID }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          RECAPTCHA_PRIVATE_KEY: ${{ secrets.RECAPTCHA_PRIVATE_KEY }}
          RECAPTCHA_PUBLIC_KEY: ${{ secrets.RECAPTCHA_PUBLIC_KEY }}
          FIELD_ENCRYPTION_KEY: ${{ secrets.FIELD_ENCRYPTION_KEY }}
          SECRET_KEY: SOME_LAME_KEY
          DJANGO_SETTINGS_MODULE: settings.test
        run: |
          coverage run ./manage.py test ${{ matrix.test-path }} --noinput
      - name: "Upload Coverage Results for ${{ matrix.test-path }}"
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.test-path }}-${{ matrix.db}}
          path: .coverage
          retention-days: 1

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ 'cancel', 'black', 'check', 'security', 'webpack', 'docker-build', 'docker-build-messaging', 'tests' ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          pip install git+https://${{ secrets.ORGANIZATIONAL_REPO_TOKEN }}@github.com/pivotal-energy-solutions/tensor-infrastructure@master#egg=infrastructure
      - name: Release
        id: release
        env:
          PYTHONWARNINGS: once::DeprecationWarning
          TASK_ALWAYS_EAGER: 1
          GITHUB_TOKEN: ${{ secrets.ORGANIZATIONAL_REPO_TOKEN }}
        run: |
          bumper.py --directory . --exclude=.run,.github,bin,webpack \
              --version_files axis/__init__.py --consider_sub_applications=axis \
              --repo=pivotal-energy-solutions/axis > out.json
          echo "bumped=$(jq '.bumped' out.json)" >> $GITHUB_OUTPUT
          echo "bump_version=$(jq '.bump_version' out.json)" >> $GITHUB_OUTPUT
          echo "bump_sha=$(jq '.bump_sha' out.json)" >> $GITHUB_OUTPUT
    outputs:
      bumped: ${{ steps.release.outputs.bumped }}
      bump_version: ${{ steps.release.outputs.bump_version }}
      bump_sha: ${{ steps.release.outputs.bump_sha }}

  upload-to-codecov:
    name: Upload Coverage to Codecov
    needs: [ tests ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -q coverage

      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: .

      - name: Combine Report Coverage
        run: |
          coverage combine coverage-*/.coverage
          coverage report --precision=1 --sort=cover --skip-covered --skip-empty
          coverage xml

      - uses: codecov/codecov-action@v3
        with:
          directory: .
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: mariadb
          fail_ci_if_error: true

  docker-push:
    name: "Push Axis tags to Docker"
    runs-on: ubuntu-latest
    needs: [ docker-build, release ]
    steps:
      - run: |
          echo "bumped=${{needs.release.outputs.bumped}}"
          echo "bump_version=${{needs.release.outputs.bump_version}}"
          echo "bump_sha=${{needs.release.outputs.bump_sha}}"
      - uses: actions/checkout@v3
#        with:
#          ref: ${{needs.release.outputs.bump_sha}}
      - uses: docker/setup-buildx-action@v2
      - name: Collect Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: pivotalenergy/axis
          #         See https://github.com/docker/metadata-action/issues/139 Current bug with checkout of ref
          flavor: |
            latest=auto
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || github.event_name == 'schedule' }}
            type=match,pattern=\d.\d.\d
            type=match,pattern=\d.\d
            type=ref,event=pr
            type=sha
          labels: |
            org.opencontainers.image.title="Axis"
            org.opencontainers.image.description="Axis Docker Image"
            org.opencontainers.image.vendor="Pivotal Energy Solutions Inc."
            org.opencontainers.image.url="https://axis.pivotalenergy.net"
            org.opencontainers.image.revision=${{needs.release.outputs.bump_sha}}
            org.opencontainers.image.licenses="Copyright Pivotal Energy Solutions. All rights reserved."
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          secrets: "github_token=${{ secrets.ORGANIZATIONAL_REPO_TOKEN }}"
#          platforms: linux/arm64, linux/amd64
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  docker-push-messaging:
    name: "Push Axis messaging tags to Docker"
    runs-on: ubuntu-latest
    needs: [ docker-build-messaging, release ]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
#        with:
#          ref: ${{needs.release.outputs.bump_sha}}
      - uses: docker/setup-buildx-action@v2
      - name: Collect Messaging Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: pivotalenergy/axis-messaging
          #         See https://github.com/docker/metadata-action/issues/139 Current bug with checkout of ref
          flavor: |
            latest=auto
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || github.event_name == 'schedule' }}
            type=match,pattern=\d.\d.\d
            type=match,pattern=\d.\d
            type=ref,event=pr
            type=sha
          labels: |
            org.opencontainers.image.title="Axis-Messaging"
            org.opencontainers.image.description="Axis-Messaging Docker Image"
            org.opencontainers.image.vendor="Pivotal Energy Solutions Inc."
            org.opencontainers.image.url="https://axis.pivotalenergy.net"
            org.opencontainers.image.revision=${{needs.release.outputs.bump_sha}}
            org.opencontainers.image.licenses="Copyright Pivotal Energy Solutions. All rights reserved."
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          file: axis/messaging/server/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
#          platforms: linux/arm64, linux/amd64
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
