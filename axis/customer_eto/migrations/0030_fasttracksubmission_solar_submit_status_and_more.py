# Generated by Django 4.1.7 on 2023-03-21 21:12

from django.db import migrations, models
from django.db.models import Q

from axis.customer_eto.enumerations import ProjectTrackerSubmissionStatus


def forward(apps, schema_editor):
    FastTrackSubmission = apps.get_model("customer_eto.FastTrackSubmission")
    History = apps.get_model("customer_eto.HistoricalFastTrackSubmission")

    # Attempt to update the create, modify dates and users etc.
    updates = FastTrackSubmission.objects.exclude(
        Q(Q(created_date__isnull=False) | Q(modified_date__isnull=False)),
        Q(Q(project_id__startswith="P") | Q(solar_project_id__startswith="P")),
    )
    updates = updates.filter(id=256)
    print(f"Found {updates.count()} project trackers to update")
    for idx, item in enumerate(updates, start=1):
        print(f"Working on {idx}/{updates.count()} {item}")
        data = {}

        full = History.objects.filter(id=item.id).order_by("history_id")
        if full.count():
            if not item.created_date:
                data["created_date"] = full.first().history_date
            if not item.modified_date:
                data["modified_date"] = full.last().history_date

        if item.project_id and not item.submit_status:
            data["submit_status"] = ProjectTrackerSubmissionStatus.SUCCESS
        if item.solar_project_id and not item.solar_submit_status:
            data["solar_submit_status"] = ProjectTrackerSubmissionStatus.SUCCESS

        if item.project_id or item.solar_project_id and not item.submit_user:
            history = (
                History.objects.filter(id=item.id, project_id=item.project_id)
                .order_by("history_id")
                .first()
            )
            if history and history.history_user:
                data["submit_user"] = history.history_user
        if data:
            FastTrackSubmission.objects.filter(id=item.id).update(**data)
            print(f"Updating {', '.join(data.keys())} for {item.home_status}")
        else:
            print(f"No data for {item.home_status}")

    # Note I also had to do this.
    # FastTrackSubmission.objects.filter(
    #     project_id__startswith="P", submit_status__isnull=True
    # ).update(submit_status=ProjectTrackerSubmissionStatus.SUCCESS)
    # FastTrackSubmission.objects.filter(
    #     solar_project_id__startswith="P", solar_submit_status__isnull=True
    # ).update(solar_submit_status=ProjectTrackerSubmissionStatus.SUCCESS)


def backward(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("customer_eto", "0029_alter_fasttracksubmission_submit_status_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="fasttracksubmission",
            name="solar_submit_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("SUBMITTED", "Submitted"),
                    ("PENDING", "Pending"),
                    ("STARTED", "Started"),
                    ("SUCCESS", "Success"),
                    ("FAILURE", "Failure"),
                    ("RETRY", "Retry"),
                ],
                max_length=50,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="historicalfasttracksubmission",
            name="solar_submit_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("SUBMITTED", "Submitted"),
                    ("PENDING", "Pending"),
                    ("STARTED", "Started"),
                    ("SUCCESS", "Success"),
                    ("FAILURE", "Failure"),
                    ("RETRY", "Retry"),
                ],
                max_length=50,
                null=True,
            ),
        ),
        migrations.RunPython(forward, backward),
    ]
