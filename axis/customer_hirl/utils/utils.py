"""Support utils."""

__author__ = "Autumn Valenta"
__date__ = "08/22/16 5:00 PM"
__copyright__ = "Copyright 2011-2023 Pivotal Energy Solutions. All rights reserved."
__credits__ = [
    "Steven Klass",
]


import logging

from django.apps import apps
from unidecode import unidecode

log = logging.getLogger(__name__)
app = customer_hirl_app = apps.get_app_config("customer_hirl")


ADDRESS_SUFFIX_SIMPLIFICATIONS = {
    "ALY": ["ALLEE", "ALLEY", "ALLY", "ALY"],
    "ANX": ["ANEX", "ANNEX", "ANNX", "ANX"],
    "ARC": ["ARC", "ARCADE"],
    "AVE": ["AV", "AVE", "AVEN", "AVENU", "AVENUE", "AVN", "AVNUE"],
    "BCH": ["BCH", "BEACH"],
    "BG": ["BURG"],
    "BGS": ["BURGS"],
    "BLF": ["BLF", "BLUF", "BLUFF"],
    "BLFS": ["BLUFFS"],
    "BLVD": ["BLVD", "BOUL", "BOULEVARD", "BOULV"],
    "BND": ["BEND", "BND"],
    "BR": ["BR", "BRNCH", "BRANCH"],
    "BRG": ["BRDGE", "BRG", "BRIDGE"],
    "BRK": ["BRK", "BROOK"],
    "BRKS": ["BROOKS"],
    "BTM": ["BOT", "BTM", "BOTTM", "BOTTOM"],
    "BYP": ["BYP", "BYPA", "BYPAS", "BYPASS", "BYPS"],
    "BYU": ["BAYOO", "BAYOU"],
    "CIR": ["CIR", "CIRC", "CIRCL", "CIRCLE", "CRCL", "CRCLE"],
    "CIRS": ["CIRCLES"],
    "CLB": ["CLB", "CLUB"],
    "CLF": ["CLF", "CLIFF"],
    "CLFS": ["CLFS", "CLIFFS"],
    "CMN": ["COMMON"],
    "CMNS": ["COMMONS"],
    "COR": ["COR", "CORNER"],
    "CORS": ["CORNERS", "CORS"],
    "CP": ["CAMP", "CP", "CMP"],
    "CPE": ["CAPE", "CPE"],
    "CRES": ["CRESCENT", "CRES", "CRSENT", "CRSNT"],
    "CRK": ["CREEK", "CRK"],
    "CRSE": ["COURSE", "CRSE"],
    "CRST": ["CREST"],
    "CSWY": ["CAUSEWAY", "CAUSWA", "CSWY"],
    "CT": ["COURT", "CT"],
    "CTR": ["CEN", "CENT", "CENTER", "CENTR", "CENTRE", "CNTER", "CNTR", "CTR"],
    "CTRS": ["CENTERS"],
    "CTS": ["COURTS", "CTS"],
    "CURV": ["CURVE"],
    "CV": ["COVE", "CV"],
    "CVS": ["COVES"],
    "CYN": ["CANYN", "CANYON", "CNYN"],
    "DL": ["DALE", "DL"],
    "DM": ["DAM", "DM"],
    "DR": ["DR", "DRIV", "DRIVE", "DRV"],
    "DRS": ["DRIVES"],
    "DV": ["DIV", "DIVIDE", "DV", "DVD"],
    "EST": ["EST", "ESTATE"],
    "ESTS": ["ESTATES", "ESTS"],
    "EXPY": ["EXP", "EXPR", "EXPRESS", "EXPRESSWAY", "EXPW", "EXPY"],
    "EXT": ["EXT", "EXTENSION", "EXTN", "EXTNSN"],
    "EXTS": ["EXTS"],
    "FALL": ["FALL"],
    "FLD": ["FIELD", "FLD"],
    "FLDS": ["FIELDS", "FLDS"],
    "FLS": ["FALLS", "FLS"],
    "FLT": ["FLAT", "FLT"],
    "FLTS": ["FLATS", "FLTS"],
    "FRD": ["FORD", "FRD"],
    "FRDS": ["FORDS"],
    "FRG": ["FORG", "FORGE", "FRG"],
    "FRGS": ["FORGES"],
    "FRK": ["FORK", "FRK"],
    "FRKS": ["FORKS", "FRKS"],
    "FRST": ["FOREST", "FORESTS", "FRST"],
    "FRY": ["FERRY", "FRRY", "FRY"],
    "FT": ["FORT", "FRT", "FT"],
    "FWY": ["FREEWAY", "FREEWY", "FRWAY", "FRWY", "FWY"],
    "GDN": ["GARDEN", "GARDN", "GRDEN", "GRDN"],
    "GDNS": ["GARDENS", "GDNS", "GRDNS"],
    "GLN": ["GLEN", "GLN"],
    "GLNS": ["GLENS"],
    "GRN": ["GREEN", "GRN"],
    "GRNS": ["GREENS"],
    "GRV": ["GROV", "GROVE", "GRV"],
    "GRVS": ["GROVES"],
    "GTWY": ["GATEWAY", "GATEWY", "GATWAY", "GTWAY", "GTWY"],
    "HBR": ["HARB", "HARBOR", "HARBR", "HBR", "HRBOR"],
    "HBRS": ["HARBORS"],
    "HL": ["HILL", "HL"],
    "HLS": ["HILLS", "HLS"],
    "HOLW": ["HLLW", "HOLLOW", "HOLLOWS", "HOLW", "HOLWS"],
    "HTS": ["HT", "HTS"],
    "HVN": ["HAVEN", "HVN"],
    "HWY": ["HIGHWAY", "HIGHWY", "HIWAY", "HIWY", "HWAY", "HWY"],
    "INLT": ["INLT"],
    "IS": ["IS", "ISLAND", "ISLND"],
    "ISLE": ["ISLE", "ISLES"],
    "ISS": ["ISLANDS", "ISLNDS", "ISS"],
    "JCT": ["JCT", "JCTION", "JCTN", "JUNCTION", "JUNCTN", "JUNCTON"],
    "JCTS": ["JCTNS", "JCTS", "JUNCTIONS"],
    "KNL": ["KNL", "KNOL", "KNOLL"],
    "KNLS": ["KNLS", "KNOLLS"],
    "KY": ["KEY", "KY"],
    "KYS": ["KEYS", "KYS"],
    "LAND": ["LAND"],
    "LCK": ["LCK", "LOCK"],
    "LCKS": ["LCKS", "LOCKS"],
    "LDG": ["LDG", "LDGE", "LODG", "LODGE"],
    "LF": ["LF", "LOAF"],
    "LGT": ["LGT", "LIGHT"],
    "LGTS": ["LIGHTS"],
    "LK": ["LK", "LAKE"],
    "LKS": ["LKS", "LAKES"],
    "LN": ["LANE", "LN"],
    "LNDG": ["LANDING", "LNDG", "LNDNG"],
    "LOOP": ["LOOP", "LOOPS"],
    "MALL": ["MALL"],
    "MDW": ["MEADOW"],
    "MDWS": ["MDW", "MDWS", "MEADOWS", "MEDOWS"],
    "MEWS": ["MEWS"],
    "ML": ["MILL"],
    "MLS": ["MILLS"],
    "MNR": ["MNR", "MANOR"],
    "MNRS": ["MANORS", "MNRS"],
    "MSN": ["MISSN", "MSSN"],
    "MT": ["MNT", "MT", "MOUNT"],
    "MTN": ["MNTAIN", "MNTN", "MOUNTAIN", "MOUNTIN", "MTIN", "MTN"],
    "MTNS": ["MNTNS", "MOUNTAINS"],
    "MTWY": ["MOTORWAY"],
    "NCK": ["NCK", "NECK"],
    "OPAS": ["OVERPASS"],
    "ORCH": ["ORCH", "ORCHARD", "ORCHRD"],
    "OVAL": ["OVAL", "OVL"],
    "PARK": ["PARK", "PRK", "PARKS"],
    "PASS": ["PASS"],
    "PATH": ["PATH", "PATHS"],
    "PIKE": ["PIKE", "PIKES"],
    "PKWY": ["PARKWAY", "PARKWY", "PKWAY", "PKWY", "PKY", "PARKWAYS", "PKWYS"],
    "PL": ["PL"] + ["PLACE"],  # 'place' as 'pl' is a thing we see
    "PLN": ["PLAIN", "PLN"],
    "PLNS": ["PLAINS", "PLNS"],
    "PLZ": ["PLAZA", "PLZ", "PLZA"],
    "PNE": ["PINE"],
    "PNES": ["PINES", "PNES"],
    "PR": ["PR", "PRAIRIE", "PRR"],
    "PRT": ["PORT", "PRT"],
    "PRTS": ["PORTS", "PRTS"],
    "PSGE": ["PASSAGE"],
    "PT": ["POINT", "PT"],
    "PTS": ["POINTS", "PTS"],
    "RADL": ["RAD", "RADIAL", "RADIEL", "RADL"],
    "RAMP": ["RAMP"],
    "RD": ["RD", "ROAD"],
    "RDG": ["RDG", "RDGE", "RIDGE"],
    "RDGS": ["RDGS", "RIDGES"],
    "RDS": ["ROADS", "RDS"],
    "RIV": ["RIV", "RIVER", "RVR", "RIVR"],
    "RNCH": ["RANCH", "RANCHES", "RNCH", "RNCHS"],
    "ROW": ["ROW"],
    "RPD": ["RAPID", "RPD"],
    "RPDS": ["RAPIDS", "RPDS"],
    "RST": ["REST", "RST"],
    "RTE": ["ROUTE"],
    "RUE": ["RUE"],
    "RUN": ["RUN"],
    "SHL": ["SHL", "SHOAL"],
    "SHLS": ["SHLS", "SHOALS"],
    "SHR": ["SHOAR", "SHORE", "SHR"],
    "SHRS": ["SHOARS", "SHORES", "SHRS"],
    "SKWY": ["SKYWAY"],
    "SMT": ["SMT", "SUMIT", "SUMITT", "SUMMIT"],
    "SPG": ["SPG", "SPNG", "SPRING", "SPRNG"],
    "SPGS": ["SPGS", "SPNGS", "SPRINGS", "SPRNGS"],
    "SPUR": ["SPUR", "SPURS"],
    "SQ": ["SQ", "SQR", "SQRE", "SQU", "SQUARE"],
    "SQS": ["SQRS", "SQUARES"],
    "ST": ["STREET", "STRT", "ST", "STR"],
    "STA": ["STA", "STATION", "STATN", "STN"],
    "STRA": ["STRA", "STRAV", "STRAVEN", "STRAVENUE", "STRAVN", "STRVN", "STRVNUE"],
    "STRM": ["STREAM", "STREME", "STRM"],
    "STS": ["STREETS"],
    "TER": ["TER", "TERR", "TERRACE"],
    "TPKE": ["TRNPK", "TURNPIKE", "TURNPK"],
    "TRAK": ["TRACK", "TRACKS", "TRAK", "TRK", "TRKS"],
    "TRCE": ["TRACE", "TRACES", "TRCE"],
    "TRFY": ["TRAFFICWAY"],
    "TRL": ["TRAIL", "TRAILS", "TRL", "TRLS"],
    "TRLR": ["TRAILER", "TRLR", "TRLRS"],
    "TRWY": ["THROUGHWAY"],
    "TUNL": ["TUNEL", "TUNL", "TUNLS", "TUNNEL", "TUNNELS", "TUNNL"],
    "UN": ["UN", "UNION"],
    "UNS": ["UNIONS"],
    "UPAS": ["UNDERPASS"],
    "VIA": ["VDCT", "VIA", "VIADCT", "VIADUCT"],
    "VIS": ["VIS", "VIST", "VISTA", "VST", "VSTA"],
    "VL": ["VILLE", "VL"],
    "VLG": ["VILL", "VILLAG", "VILLAGE", "VILLG", "VILLIAGE", "VLG"],
    "VLGS": ["VILLAGES", "VLGS"],
    "VLY": ["VALLEY", "VALLY", "VLLY", "VLY"],
    "VLYS": ["VALLEYS", "VLYS"],
    "VW": ["VIEW", "VW"],
    "VWS": ["VIEWS", "VWS"],
    "WALK": ["WALK", "WALKS"],
    "WALL": ["WALL"],
    "WAY": ["WY", "WAY"],
    "WAYS": ["WAYS"],
    "WL": ["WELL"],
    "WLS": ["WELLS", "WLS"],
    "XING": ["CROSSING", "CRSSNG", "XING"],
    "XRD": ["CROSSROAD"],
    "XRDS": ["CROSSROADS"],
}


# NOTE: This should be promoted to a home utility if we are going to commit to this strategy
def profile_address(street_line1):
    """
    Create a value which simplifies a string to something queryable for fuzzy matches.  In practice,
    we're reducing the address to the sum of its parts, where string length increases the score more
    dramatically than the value of the individual characters.
    """

    # This is an imperfect method of arriving at a 'profile' value, but it yields results that can
    # be fuzzy-queried with ease directly from the database.  The prime benefit of this general
    # approach is that the profile value is independent of any context, so it can be used in
    # comparisons with any other address, and can therefore be stored for repeated use.  By
    # contrast, a levenshtein score is only valuable in the context of a specific comparison, and so
    # cannot be stored for arbitrary other comparisons.

    # Remove noise in the string that could be omitted in user strings and meant to be equivalent.
    # In this case, we aim to reduce curled quotes, odd spaces, and character accents to their
    # simpler versions, rather than have them stripped from the string altogether.
    street_line1 = unidecode(street_line1)

    # Sum the character values.
    # TODO: Possibly organize the alphabet in our own scoring list rather than its ord value.
    # We would be able to tune it to condense the number space (remove the built-in ord offset, etc)
    profile = sum(map(ord, street_line1.lower()))

    return profile
