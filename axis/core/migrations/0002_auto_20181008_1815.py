# Generated by Django 1.11.16 on 2018-10-08 18:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("company", "0001_initial"),
        ("geographic", "0001_initial"),
        ("core", "0001_initial"),
        ("auth", "0008_alter_user_username_max_length"),
        ("geocoder", "0002_auto_20181008_1815"),
    ]

    operations = [
        migrations.AddField(
            model_name="historicaluser",
            name="city",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="geographic.City",
            ),
        ),
        migrations.AddField(
            model_name="historicaluser",
            name="climate_zone",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="geographic.ClimateZone",
            ),
        ),
        migrations.AddField(
            model_name="historicaluser",
            name="company",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="company.Company",
            ),
        ),
        migrations.AddField(
            model_name="historicaluser",
            name="geocode_response",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="geocoder.GeocodeResponse",
            ),
        ),
        migrations.AddField(
            model_name="historicaluser",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicaluser",
            name="metro",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="geographic.Metro",
            ),
        ),
        migrations.AddField(
            model_name="historicaluser",
            name="place",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="geographic.Place",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="city",
            field=models.ForeignKey(
                blank=True,
                help_text='Type the first few letters of the name of the city the home is located in and select the correct city/state/county combination from the list presented. If the correct city is not available, click "Add New" to add a city to the database.',
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="geographic.City",
                verbose_name="City/State",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="climate_zone",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="geographic.ClimateZone",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="company",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users",
                to="company.Company",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="geocode_response",
            field=models.ForeignKey(
                blank=True,
                help_text="The response this place was constructed from.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="geocoder.GeocodeResponse",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="metro",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="geographic.Metro",
                verbose_name="Metro",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="place",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="user_set",
                to="geographic.Place",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userremoteidentifier",
            unique_together=set([("type", "user")]),
        ),
    ]
