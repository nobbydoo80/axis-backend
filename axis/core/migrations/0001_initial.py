# Generated by Django 1.11.16 on 2018-10-08 18:15

import django.contrib.auth.validators
import django.utils.timezone
import localflavor.us.models
import phonenumber_field.modelfields
import simple_history.models
import timezone_field.fields
from django.conf import settings
from django.db import migrations, models

import axis.core.fields
import axis.core.managers.managers
import axis.core.models
import axis.core.validators
import axis.geographic.placedmodels


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.ASCIIUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=30, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=30, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        choices=[
                            (b"AL", "Alabama"),
                            (b"AK", "Alaska"),
                            (b"AS", "American Samoa"),
                            (b"AZ", "Arizona"),
                            (b"AR", "Arkansas"),
                            (b"AA", "Armed Forces Americas"),
                            (b"AE", "Armed Forces Europe"),
                            (b"AP", "Armed Forces Pacific"),
                            (b"CA", "California"),
                            (b"CO", "Colorado"),
                            (b"CT", "Connecticut"),
                            (b"DE", "Delaware"),
                            (b"DC", "District of Columbia"),
                            (b"FL", "Florida"),
                            (b"GA", "Georgia"),
                            (b"GU", "Guam"),
                            (b"HI", "Hawaii"),
                            (b"ID", "Idaho"),
                            (b"IL", "Illinois"),
                            (b"IN", "Indiana"),
                            (b"IA", "Iowa"),
                            (b"KS", "Kansas"),
                            (b"KY", "Kentucky"),
                            (b"LA", "Louisiana"),
                            (b"ME", "Maine"),
                            (b"MD", "Maryland"),
                            (b"MA", "Massachusetts"),
                            (b"MI", "Michigan"),
                            (b"MN", "Minnesota"),
                            (b"MS", "Mississippi"),
                            (b"MO", "Missouri"),
                            (b"MT", "Montana"),
                            (b"NE", "Nebraska"),
                            (b"NV", "Nevada"),
                            (b"NH", "New Hampshire"),
                            (b"NJ", "New Jersey"),
                            (b"NM", "New Mexico"),
                            (b"NY", "New York"),
                            (b"NC", "North Carolina"),
                            (b"ND", "North Dakota"),
                            (b"MP", "Northern Mariana Islands"),
                            (b"OH", "Ohio"),
                            (b"OK", "Oklahoma"),
                            (b"OR", "Oregon"),
                            (b"PA", "Pennsylvania"),
                            (b"PR", "Puerto Rico"),
                            (b"RI", "Rhode Island"),
                            (b"SC", "South Carolina"),
                            (b"SD", "South Dakota"),
                            (b"TN", "Tennessee"),
                            (b"TX", "Texas"),
                            (b"UT", "Utah"),
                            (b"VT", "Vermont"),
                            (b"VI", "Virgin Islands"),
                            (b"VA", "Virginia"),
                            (b"WA", "Washington"),
                            (b"WV", "West Virginia"),
                            (b"WI", "Wisconsin"),
                            (b"WY", "Wyoming"),
                        ],
                        editable=False,
                        max_length=2,
                        null=True,
                        verbose_name="State",
                    ),
                ),
                ("confirmed_address", models.BooleanField(default=False)),
                (
                    "address_override",
                    models.BooleanField(
                        default=False,
                        help_text="Bypass the attempt to normalize the address via a mapping service. Changing address fields after marking this option will unmark it.",
                        verbose_name="Override address",
                    ),
                ),
                (
                    "street_line1",
                    models.CharField(
                        blank=True,
                        help_text="Enter the street number and street name of the home (e.g. 123 Main St).",
                        max_length=100,
                        null=True,
                        verbose_name="Street Address",
                    ),
                ),
                (
                    "street_line2",
                    models.CharField(
                        blank=True,
                        help_text="Enter the unit number (where multiple dwelling units share a common street address), or leave blank if not applicable.",
                        max_length=100,
                        null=True,
                        verbose_name="Unit number (if applicable)",
                    ),
                ),
                (
                    "zipcode",
                    models.CharField(
                        help_text="Enter the 5-digit ZIP Code of home.",
                        max_length=15,
                        null=True,
                        verbose_name="ZIP Code",
                    ),
                ),
                ("title", models.CharField(max_length=32, null=True)),
                ("department", models.CharField(blank=True, max_length=16)),
                (
                    "work_phone",
                    phonenumber_field.modelfields.PhoneNumberField(max_length=20, null=True),
                ),
                (
                    "cell_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=20, null=True
                    ),
                ),
                (
                    "alt_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=20, null=True
                    ),
                ),
                (
                    "fax_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=20, null=True
                    ),
                ),
                ("use_company_address", models.BooleanField(default=True)),
                (
                    "rater_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1", "Rating Field Inspector"),
                            ("2", "Rater (Certified)"),
                            ("3", "Rater QA"),
                            ("4", "Senior Rater"),
                            ("5", "Operations"),
                        ],
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "rater_id",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[axis.core.validators.validate_rater_id],
                        verbose_name="RESNET RTIN",
                    ),
                ),
                (
                    "signature_image",
                    models.ImageField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to=axis.core.models.signature_image_upload_to,
                        verbose_name="Signature",
                    ),
                ),
                (
                    "resnet_username",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="RESNET Username"
                    ),
                ),
                (
                    "resnet_password",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="RESNET Password"
                    ),
                ),
                ("is_company_admin", models.BooleanField(default=False)),
                ("is_public", models.BooleanField(default=False)),
                ("last_update", models.DateTimeField(auto_now=True, null=True)),
                ("timezone_preference", timezone_field.fields.TimeZoneField(default="US/Pacific")),
            ],
            options={"verbose_name": "User", "verbose_name_plural": "Users"},
            bases=(axis.geographic.placedmodels.PlaceSynchronizationMixin, models.Model),
            managers=[
                ("objects", axis.core.managers.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalUser",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        validators=[django.contrib.auth.validators.ASCIIUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=30, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=30, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        choices=[
                            (b"AL", "Alabama"),
                            (b"AK", "Alaska"),
                            (b"AS", "American Samoa"),
                            (b"AZ", "Arizona"),
                            (b"AR", "Arkansas"),
                            (b"AA", "Armed Forces Americas"),
                            (b"AE", "Armed Forces Europe"),
                            (b"AP", "Armed Forces Pacific"),
                            (b"CA", "California"),
                            (b"CO", "Colorado"),
                            (b"CT", "Connecticut"),
                            (b"DE", "Delaware"),
                            (b"DC", "District of Columbia"),
                            (b"FL", "Florida"),
                            (b"GA", "Georgia"),
                            (b"GU", "Guam"),
                            (b"HI", "Hawaii"),
                            (b"ID", "Idaho"),
                            (b"IL", "Illinois"),
                            (b"IN", "Indiana"),
                            (b"IA", "Iowa"),
                            (b"KS", "Kansas"),
                            (b"KY", "Kentucky"),
                            (b"LA", "Louisiana"),
                            (b"ME", "Maine"),
                            (b"MD", "Maryland"),
                            (b"MA", "Massachusetts"),
                            (b"MI", "Michigan"),
                            (b"MN", "Minnesota"),
                            (b"MS", "Mississippi"),
                            (b"MO", "Missouri"),
                            (b"MT", "Montana"),
                            (b"NE", "Nebraska"),
                            (b"NV", "Nevada"),
                            (b"NH", "New Hampshire"),
                            (b"NJ", "New Jersey"),
                            (b"NM", "New Mexico"),
                            (b"NY", "New York"),
                            (b"NC", "North Carolina"),
                            (b"ND", "North Dakota"),
                            (b"MP", "Northern Mariana Islands"),
                            (b"OH", "Ohio"),
                            (b"OK", "Oklahoma"),
                            (b"OR", "Oregon"),
                            (b"PA", "Pennsylvania"),
                            (b"PR", "Puerto Rico"),
                            (b"RI", "Rhode Island"),
                            (b"SC", "South Carolina"),
                            (b"SD", "South Dakota"),
                            (b"TN", "Tennessee"),
                            (b"TX", "Texas"),
                            (b"UT", "Utah"),
                            (b"VT", "Vermont"),
                            (b"VI", "Virgin Islands"),
                            (b"VA", "Virginia"),
                            (b"WA", "Washington"),
                            (b"WV", "West Virginia"),
                            (b"WI", "Wisconsin"),
                            (b"WY", "Wyoming"),
                        ],
                        editable=False,
                        max_length=2,
                        null=True,
                        verbose_name="State",
                    ),
                ),
                ("confirmed_address", models.BooleanField(default=False)),
                (
                    "address_override",
                    models.BooleanField(
                        default=False,
                        help_text="Bypass the attempt to normalize the address via a mapping service. Changing address fields after marking this option will unmark it.",
                        verbose_name="Override address",
                    ),
                ),
                (
                    "street_line1",
                    models.CharField(
                        blank=True,
                        help_text="Enter the street number and street name of the home (e.g. 123 Main St).",
                        max_length=100,
                        null=True,
                        verbose_name="Street Address",
                    ),
                ),
                (
                    "street_line2",
                    models.CharField(
                        blank=True,
                        help_text="Enter the unit number (where multiple dwelling units share a common street address), or leave blank if not applicable.",
                        max_length=100,
                        null=True,
                        verbose_name="Unit number (if applicable)",
                    ),
                ),
                (
                    "zipcode",
                    models.CharField(
                        help_text="Enter the 5-digit ZIP Code of home.",
                        max_length=15,
                        null=True,
                        verbose_name="ZIP Code",
                    ),
                ),
                ("title", models.CharField(max_length=32, null=True)),
                ("department", models.CharField(blank=True, max_length=16)),
                (
                    "work_phone",
                    phonenumber_field.modelfields.PhoneNumberField(max_length=20, null=True),
                ),
                (
                    "cell_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=20, null=True
                    ),
                ),
                (
                    "alt_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=20, null=True
                    ),
                ),
                (
                    "fax_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=20, null=True
                    ),
                ),
                ("use_company_address", models.BooleanField(default=True)),
                (
                    "rater_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1", "Rating Field Inspector"),
                            ("2", "Rater (Certified)"),
                            ("3", "Rater QA"),
                            ("4", "Senior Rater"),
                            ("5", "Operations"),
                        ],
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "rater_id",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[axis.core.validators.validate_rater_id],
                        verbose_name="RESNET RTIN",
                    ),
                ),
                (
                    "signature_image",
                    models.TextField(
                        blank=True, max_length=512, null=True, verbose_name="Signature"
                    ),
                ),
                (
                    "resnet_username",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="RESNET Username"
                    ),
                ),
                (
                    "resnet_password",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="RESNET Password"
                    ),
                ),
                ("is_company_admin", models.BooleanField(default=False)),
                ("is_public", models.BooleanField(default=False)),
                ("last_update", models.DateTimeField(blank=True, editable=False, null=True)),
                ("timezone_preference", timezone_field.fields.TimeZoneField(default="US/Pacific")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_date", models.DateTimeField()),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1
                    ),
                ),
            ],
            options={
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
                "verbose_name": "historical User",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="UserRemoteIdentifier",
            fields=[
                (
                    "type",
                    models.CharField(
                        choices=[("trc", "TRC UUID")],
                        help_text="A queryable label for an off-site type.",
                        max_length=20,
                    ),
                ),
                (
                    "id",
                    axis.core.fields.UUIDField(
                        blank=True,
                        help_text="Represents an off-site ID of the given type.",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="identifiers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
