# Generated by Django 1.11.16 on 2018-10-08 18:19

import json

from django.db import migrations


def normalize_json_formats(apps, schema_editor):
    field_updates = [
        "certification.CertifiableObject.settings",
        "certification.WorkflowStatus.data",
        "customer_neea.StandardProtocolCalculator.reports",
        "eep_program.EEPProgram.workflow_default_settings",
        "ekotrope.Analysis.data",
        "ekotrope.HousePlan.data",
        "ekotrope.Project.data",
        "floorplan.Floorplan.component_serialization",
        "floorplan.Floorplan.simulation_result",
        "geocoder.GeocodeResponse.place",
        "proto.ProtoObject.data",
    ]

    patchers = [
        fix_quoted_value,
    ]

    for field_path in field_updates:
        app_label, model_name, field_name = field_path.split(".")
        models = [apps.get_model(app_label, model_name)]

        try:
            models.append(apps.get_model(app_label, "Historical" + model_name))
        except:
            pass

        for model in models:
            values = list(model.objects.values_list("pk", field_name))
            for pk, data in values:
                for f in patchers:
                    # Skip if the data is already essentially correct
                    if isinstance(data, dict):
                        continue

                    try:
                        data = f(data)
                    except ValueError as e:
                        raise ValueError(
                            "[{label}(pk={pk})] {patcher}".format(
                                **{
                                    "label": model._meta.label,
                                    "pk": pk,
                                    "patcher": f.__name__,
                                }
                            )
                            + " "
                            + str(e)
                        )

                if not isinstance(data, dict):
                    raise ValueError(
                        "[{label}(pk={pk}] Unexpected normalization result: {data!r}".format(
                            **{
                                "label": model._meta.label,
                                "pk": pk,
                                "data": data,
                            }
                        )
                    )
                # model_obj = model.objects.get(pk=pk)
                # setattr(model_obj, field_name, data)
                # model_obj.save()
                model.objects.filter(pk=pk).update(**{field_name: data})


def fix_quoted_value(data):
    if not isinstance(data, str):
        return data

    unwrapped_data = json.loads(data)
    if isinstance(unwrapped_data, dict):
        return unwrapped_data

    raise ValueError(
        "[fix_quoted_value] Unpredicted unwrap operation, expected dict:" % (repr(unwrapped_data),)
    )


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0002_auto_20181008_1815"),
        # The axis with json fields needing format migration
        ("certification", "0001_initial"),
        ("customer_neea", "0001_initial"),
        ("eep_program", "0003_historicaleepprogram_history_change_reason_foo"),
        ("ekotrope", "0001_initial"),
        ("floorplan", "0004_auto_20181010_2316"),
        ("geocoder", "0001_initial"),
        ("proto", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(normalize_json_formats),
    ]
