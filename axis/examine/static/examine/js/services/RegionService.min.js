angular.module("axis.services.RegionService").factory("RegionService",function($rootScope,$interpolate){var regions=[];var regionsMap={};var helpers={getRegionValue:_getSingleRegionValue,getRegionDependencies:_getRegionDependencies,getRegionDependenciesKeys:_getRegionDependenciesKeys,hasDependencies:_hasDependencies,fetchRegionDependencies:_fetchRegionDependencies,regions:regions,regionsMap:regionsMap};return{addRegion:addRegion,removeRegion:removeRegion,getRegion:getRegion,getRegionFromTypeName:getRegionFromTypeName,getRegionCounter:getRegionCounter,registerChildRegionByTypeName:registerChildRegionByTypeName,registerChildRegion:registerChildRegion,helpers:helpers};function InvalidRegionValueError(regionName,key,message){this.name="InvalidRegionValueError";this.message=message;this.stack=(new Error).stack;this.regionName=regionName;this.key=key;this.getMessage=function(){return $interpolate(this.message)(this)}}function _getRegionValue(region,key){try{var value=region.object[key]}catch(e){throw new InvalidRegionValueError(region.type_name,key,e)}if(value===null||typeof value==="undefined"){throw new InvalidRegionValueError(region.type_name,key,"'[[ key ]]' is undefined for '[[ regionName ]]'")}return value}function _getSingleRegionValue(regionName,key){return _getRegionValue(getRegionFromTypeName(regionName),key)}function _getRegionDependencies(region){return region.region_dependencies||{}}function _getRegionDependenciesKeys(region){return Object.keys(_getRegionDependencies(region))}function _hasDependencies(region){return!!_getRegionDependenciesKeys(region).length}function _fetchRegionDependencies(region){var dependencies={};angular.forEach(_getRegionDependencies(region),function(keys,region_name){angular.forEach(keys,function(obj){if(angular.isDefined(region.parentRegionSet)&&angular.isDefined(region.parentRegionSet.parentRegionObject)){dependencies[obj.serialize_as]=_getRegionValue(region.parentRegionSet.parentRegionObject,obj.field_name)}else{dependencies[obj.serialize_as]=_getSingleRegionValue(region_name,obj.field_name)}})});return dependencies}function addRegion(region){regions.push(region);var val=regionsMap[region.type_name];if(val===undefined){regionsMap[region.type_name]=region}else if(_.isArray(val)){regionsMap[region.type_name].push(region)}else{regionsMap[region.type_name]=[val];regionsMap[region.type_name].push(region)}$rootScope.$broadcast("addedRegion",region);$rootScope.$broadcast("addedRegion:"+region.type_name,region);return getRegion(region)}function removeRegion(region){var index=regions.indexOf(region);regions.splice(index,1);if(_.isArray(regionsMap[region.type_name])){var index=regionsMap[region.type_name].indexOf(region);regionsMap[region.type_name].splice(index,1)}$rootScope.$broadcast("removedRegion",region);$rootScope.$broadcast("removedRegion:"+region.type_name,region)}function getRegion(region){var index=regions.indexOf(region);return regions[index]}function getRegionFromTypeName(typeName){return regionsMap[typeName]}function getRegionCounter(regionNames){var n=0;_.forEach(regionNames,function(typeName){var regionData=regionsMap[typeName];if(angular.isArray(regionData)){n+=regionData.length}else if(regionData!==undefined){n+=1}});return n}function registerChildRegionByTypeName(typeName,childObject){return registerChildRegion(getRegionFromTypeName(typeName),childObject)}function registerChildRegion(parentObject,childObject){return parentObject.controller.children.push(childObject)}});
