# Generated by Django 3.2.10 on 2022-01-05 17:21
import django
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("remrate_data", "0019_auto_20211203_0040"),
    ]

    operations = [
        migrations.CreateModel(
            name="HVACCommissioning",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "_result_number",
                    models.IntegerField(blank=True, db_column="lBldgRunNo", null=True),
                ),
                ("rating_number", models.CharField(blank=True, db_column="sRateNo", max_length=93)),
                (
                    "_source_commissioning_number",
                    models.IntegerField(blank=True, db_column="lHvacCxNo", null=True),
                ),
                (
                    "duct_system_number",
                    models.IntegerField(blank=True, db_column="nDuctSysNo", null=True),
                ),
                (
                    "heating_equipment_number",
                    models.IntegerField(blank=True, db_column="nHtgEquipNo", null=True),
                ),
                (
                    "cooling_equipment_number",
                    models.IntegerField(blank=True, db_column="nClgEquipNo", null=True),
                ),
                (
                    "total_duct_leakage_grade",
                    models.IntegerField(
                        blank=True,
                        choices=[("1", "I"), ("2", "II"), ("3", "III")],
                        db_column="nTotDuctLeakGrade",
                        help_text="Duct Grade",
                        null=True,
                    ),
                ),
                (
                    "total_duct_leakage_exemption",
                    models.BooleanField(
                        blank=True,
                        db_column="bTotDuctLeakExcep",
                        help_text="ACCA 310 Total Duct Leakage test exemption claimed",
                        null=True,
                    ),
                ),
                (
                    "total_duct_leakage_grade_1_met",
                    models.BooleanField(
                        blank=True,
                        db_column="bTotDuctLeakGrdIMet",
                        help_text="Grade I met using ANSI/ACCA5QA",
                        null=True,
                    ),
                ),
                (
                    "total_duct_leakage",
                    models.FloatField(blank=True, db_column="fTotDuctLeakage", null=True),
                ),
                (
                    "blower_airflow_grade",
                    models.IntegerField(
                        blank=True,
                        choices=[("1", "I"), ("2", "II"), ("3", "III")],
                        db_column="nBFAirflowGrade",
                        help_text="Airflow Grade",
                        null=True,
                    ),
                ),
                (
                    "blower_airflow_exemption",
                    models.BooleanField(blank=True, db_column="bBFAirflowException", null=True),
                ),
                (
                    "blower_airflow_design_specified",
                    models.IntegerField(
                        blank=True,
                        db_column="nBFAirflowDesignSpec",
                        help_text="Design Specified airflow Qdesign (CFM)",
                        null=True,
                    ),
                ),
                (
                    "blower_airflow_operating_condition",
                    models.IntegerField(
                        blank=True,
                        db_column="nBFAirflowOpCond",
                        help_text="Measured airflow Qop (CFM)",
                        null=True,
                    ),
                ),
                (
                    "blower_watt_draw_grade",
                    models.IntegerField(
                        blank=True,
                        choices=[("1", "I"), ("2", "II"), ("3", "III")],
                        db_column="nBFWattDrawGrade",
                        help_text="Watt Draw Grade",
                        null=True,
                    ),
                ),
                (
                    "blower_airflow_watt_draw",
                    models.IntegerField(
                        blank=True,
                        db_column="nBFWattDraw",
                        help_text="Power at operating conditions (Watts)",
                        null=True,
                    ),
                ),
                (
                    "blower_fan_efficiency",
                    models.FloatField(blank=True, db_column="fBFEffic", null=True),
                ),
                (
                    "refrigerant_charge_single_package_system",
                    models.BooleanField(
                        blank=True,
                        db_column="bRCSinglePkgSystem",
                        help_text="Selected system is a Single Packaged System",
                        null=True,
                    ),
                ),
                (
                    "refrigerant_charge_onboard_diagnostic",
                    models.BooleanField(
                        blank=True,
                        db_column="bRCOnboardDiagnostic",
                        help_text="On-board diagnostic or independent verification report met",
                        null=True,
                    ),
                ),
                (
                    "refrigerant_charge_test_method",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            ("0", "Not Applicable"),
                            ("1", "Piston/Cap.Tube"),
                            ("2", "TXV/EEV"),
                            ("3", "Weigh-in"),
                        ],
                        db_column="nRCTestMethod",
                        help_text="Test Method",
                        null=True,
                    ),
                ),
                (
                    "refrigerant_charge_grade",
                    models.IntegerField(
                        blank=True,
                        choices=[("1", "I"), ("2", "II"), ("3", "III")],
                        db_column="nRCGrade",
                        help_text="Charge Grade",
                        null=True,
                    ),
                ),
                (
                    "difference_DTD",
                    models.FloatField(
                        blank=True, db_column="fDiffDTD", help_text="Diff DTD (F)", null=True
                    ),
                ),
                (
                    "difference_CTOA",
                    models.FloatField(blank=True, db_column="fDiffCTOA", null=True),
                ),
                ("deviation", models.FloatField(blank=True, db_column="fDeviation", null=True)),
                (
                    "total_refrigerant_weight",
                    models.FloatField(
                        blank=True,
                        db_column="fRptdRefrigWeight",
                        help_text="Total Reported Refrigerant Weight",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="hvaccommissioning",
            name="simulation",
            field=models.ForeignKey(
                default=1, on_delete=django.db.models.deletion.CASCADE, to="remrate_data.simulation"
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="doechallenge",
            name="passive_home_certified",
            field=models.BooleanField(blank=True, db_column="nDCPassiveHome", null=True),
        ),
    ]
