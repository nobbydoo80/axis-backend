# Generated by Django 1.11.16 on 2018-10-08 18:15

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("company", "0001_initial"),
        ("remrate", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AboveGradeWall",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(db_column="szAGName", max_length=93)),
                ("gross_area", models.FloatField(db_column="fAGArea", null=True)),
                (
                    "location",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (201, "Between conditioned space and ambient"),
                            (202, "Between conditioned space and garage"),
                            (203, "Between conditioned space and open crawl"),
                            (204, "Between conditioned space and attic"),
                            (205, "Between conditioned space and uncond bsmnt"),
                            (206, "Between conditioned space and enclosed crawl"),
                            (214, "Between conditioned crawl and ambient"),
                            (215, "Between conditioned crawl and garage"),
                            (216, "Between conditioned crawl and open crawl"),
                            (207, "Between unconditioned bsmnt and ambient"),
                            (208, "Between unconditioned bsmnt and garage"),
                            (209, "Between unconditioned bsmnt and open crawl"),
                            (210, "Between enclosed crawl and ambient"),
                            (211, "Between enclosed crawl and garage"),
                            (212, "Between enclosed crawl and open crawl"),
                            (213, "Between cond and another cond unit (adiabatic)"),
                            (217, "Between sealed attic and ambient"),
                        ],
                        db_column="nAGLoc",
                    ),
                ),
                (
                    "color",
                    models.IntegerField(
                        choices=[(0, "Reflective"), (1, "Light"), (2, "Medium"), (3, "Dark")],
                        db_column="nAGCol",
                    ),
                ),
                ("u_value", models.FloatField(db_column="fAGUo", null=True)),
                ("_wall_type_number", models.IntegerField(db_column="lAGWallTNo")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sAGRateNo", max_length=93),
                ),
            ],
            options={
                "ordering": ("simulation", "gross_area"),
            },
        ),
        migrations.CreateModel(
            name="AcceptedMeasure",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_measure_number", models.IntegerField(db_column="lAMAMNo", unique=True)),
                ("_cost_rate_number", models.IntegerField(db_column="lAMCRNo")),
                ("_parent", models.IntegerField(db_column="lAMParNo", null=True)),
                ("is_multiple_measures", models.BooleanField(db_column="nAMMult", default=False)),
                ("component_name", models.CharField(db_column="sAMComp", max_length=153)),
                ("existing_measure_name", models.CharField(db_column="sAMExist", max_length=153)),
                ("proposed_measure_name", models.CharField(db_column="sAMProp", max_length=153)),
                ("treatment_name", models.CharField(db_column="sAMTreat", max_length=363)),
                ("treatment_description", models.CharField(db_column="sAMTreatD", max_length=363)),
                ("treatment_life", models.FloatField(db_column="fAMLife", null=True)),
                ("treatment_cost", models.FloatField(db_column="fAMCost", null=True)),
                ("yearly_savings", models.FloatField(db_column="fAMYrSav", null=True)),
                ("savings_to_investment_ratio", models.FloatField(db_column="fAMSIR", null=True)),
                (
                    "net_present_value_of_savings",
                    models.FloatField(db_column="fAMPVSav", null=True),
                ),
                ("simple_payback", models.FloatField(db_column="fAMSP", null=True)),
                ("rating", models.FloatField(db_column="fAMRating", null=True)),
                ("first_year_cash_flow", models.FloatField(db_column="fAM1YCF", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="AdditionalMass",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szAMName", max_length=93)),
                ("area", models.FloatField(db_column="fAMArea", null=True)),
                (
                    "location",
                    models.IntegerField(
                        choices=[
                            (1, "Sunlit floor"),
                            (2, "Shaded floor"),
                            (3, "Wall in sunlit room"),
                            (4, "Wall in remote room"),
                        ],
                        db_column="nAMLoc",
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.IntegerField(
                        choices=[(0, "None"), (1, "Concrete"), (2, "Brick/Tile"), (3, "Water")],
                        db_column="nAMType",
                        null=True,
                    ),
                ),
                ("thickness", models.FloatField(db_column="fAMThk", null=True)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sAMRateNo", max_length=93),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AirConditioner",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_air_conditioner_number", models.FloatField(db_column="lCETCETNo")),
                ("name", models.CharField(blank=True, db_column="sCETType", max_length=93)),
                (
                    "type",
                    models.IntegerField(
                        choices=[
                            (1, "Air conditioner"),
                            (2, "Air-source heat pump"),
                            (3, "Ground-source heat pump"),
                            (4, "Evaporative cooler"),
                            (5, "None"),
                        ],
                        db_column="nCETSystTp",
                        null=True,
                    ),
                ),
                (
                    "fuel_type",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="nCETFuelTp",
                        null=True,
                    ),
                ),
                ("output_capacity", models.FloatField(db_column="fCETRatCap", null=True)),
                ("efficiency", models.FloatField(db_column="fCETEff", null=True)),
                ("sensible_heat_fraction", models.FloatField(db_column="fCETSHF", null=True)),
                (
                    "efficiency_unit",
                    models.IntegerField(
                        choices=[(1, "SEER"), (2, "EER"), (3, "% EFF"), (4, "COP")],
                        db_column="nCETEffUTp",
                        null=True,
                    ),
                ),
                ("is_desuperheater", models.BooleanField(db_column="nCETDSHtr", default=False)),
                ("fan_control_type", models.IntegerField(db_column="nCETFnCtrl", null=True)),
                ("fan_defaults", models.BooleanField(db_column="nCETFnDef", default=False)),
                ("fan_high_speed", models.FloatField(db_column="fCETFnHSpd", null=True)),
                ("fan_low_speed", models.FloatField(db_column="fCETFnLSpd", null=True)),
                (
                    "note",
                    models.CharField(blank=True, db_column="sCETNote", max_length=765, null=True),
                ),
                ("fan_power", models.FloatField(db_column="fCETFanPwr", null=True)),
                ("pump_energy", models.FloatField(db_column="fCETPmpEng", null=True)),
                (
                    "pump_energy_units",
                    models.IntegerField(
                        choices=[(0, "kWh/yr"), (1, "Watts")], db_column="nCETPmpTyp", null=True
                    ),
                ),
                (
                    "fan_electric_default",
                    models.BooleanField(db_column="nCETFanDef", default=False),
                ),
            ],
            options={
                "ordering": ("simulation", "-output_capacity"),
            },
        ),
        migrations.CreateModel(
            name="AirSourceHeatPump",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_air_source_heat_pump_number", models.IntegerField(db_column="lASTASTNo")),
                (
                    "name",
                    models.CharField(blank=True, db_column="sASTType", max_length=93, null=True),
                ),
                (
                    "fuel_type",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="nASTFuel",
                        null=True,
                    ),
                ),
                ("heating_capacity", models.FloatField(db_column="fASTHCap47", null=True)),
                ("heating_efficiency", models.FloatField(db_column="FASTHEFF", null=True)),
                (
                    "heating_efficiency_units",
                    models.IntegerField(
                        choices=[(1, "AFUE"), (2, "% EFF"), (3, "HSPF"), (4, "COP")],
                        db_column="NASTHEFFU",
                        null=True,
                    ),
                ),
                ("cooling_capacity", models.FloatField(db_column="fASTCCAP", null=True)),
                ("cooling_efficiency", models.FloatField(db_column="FASTCEFF", null=True)),
                (
                    "cooling_efficiency_units",
                    models.IntegerField(
                        choices=[(1, "SEER"), (2, "EER"), (3, "% EFF"), (4, "COP")],
                        db_column="NASTCEFFU",
                        null=True,
                    ),
                ),
                ("sensible_heat_fraction", models.FloatField(db_column="fASTSHF", null=True)),
                ("is_desuperheater", models.BooleanField(db_column="nASTDSHtr", default=False)),
                (
                    "note",
                    models.CharField(blank=True, db_column="sASTNote", max_length=765, null=True),
                ),
                ("backup_capacity", models.FloatField(db_column="fASTBKUPCP", null=True)),
                (
                    "fan_control_type",
                    models.IntegerField(
                        choices=[(1, "Single Speed"), (2, "Two Speed"), (3, "Variable Speed")],
                        db_column="nASTFnCtrl",
                        null=True,
                    ),
                ),
                ("fan_defaults", models.BooleanField(db_column="nASTFnDef", default=False)),
                ("fan_high_speed", models.FloatField(db_column="fASTFnHSpd", null=True)),
                ("fan_low_speed", models.FloatField(db_column="fASTFnLSpd", null=True)),
                ("heating_capacity_17f", models.FloatField(db_column="fASTHCap17", null=True)),
            ],
            options={
                "ordering": ("simulation", "-heating_capacity", "-cooling_capacity"),
            },
        ),
        migrations.CreateModel(
            name="Block",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_seasonal_rate_number", models.IntegerField(db_column="lBLSRNo")),
                (
                    "max_consumption",
                    models.FloatField(blank=True, db_column="fBLBlckMax", null=True),
                ),
                (
                    "dollars_per_unit_per_month",
                    models.FloatField(blank=True, db_column="fBLRate", null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Building",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("user_host", models.CharField(blank=True, max_length=128, null=True)),
                ("created_on", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("last_update", models.DateTimeField(auto_now=True)),
                (
                    "sync_status",
                    models.IntegerField(
                        choices=[
                            (-1, "Data Inputed"),
                            (0, "Data Ready for Task Server"),
                            (-2, "Task Server Replication In-Progress"),
                            (1, "Available for use"),
                            (-3, "User removed"),
                        ],
                        default=-1,
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_building_number", models.IntegerField(db_column="lBldgNo")),
                ("filename", models.CharField(db_column="sBUBldgNam", max_length=765)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sBURateNo", max_length=93),
                ),
                (
                    "building_input_type",
                    models.IntegerField(
                        choices=[
                            (0, "Undetermined"),
                            (1, "Simplified Building"),
                            (2, "Detailed Building"),
                        ],
                        db_column="nBUBlgType",
                        null=True,
                    ),
                ),
                ("ceiling_attic_ro", models.FloatField(db_column="fCeilAtRo", null=True)),
                ("ceiling_attic_area", models.FloatField(db_column="fCeilAtAr", null=True)),
                ("ceiling_cathedral_ro", models.FloatField(db_column="fCeilCaRo", null=True)),
                ("ceiling_cathedral_area", models.FloatField(db_column="fCeilCaAr", null=True)),
                (
                    "above_ground_wall_conditioned_to_outdoor_ro",
                    models.FloatField(db_column="fAGWCORo", null=True),
                ),
                (
                    "above_ground_wall_conditioned_to_outdoor_area",
                    models.FloatField(db_column="fAGWCOAr", null=True),
                ),
                (
                    "above_ground_wall_buffer_to_outdoor_ro",
                    models.FloatField(db_column="fAGWBORo", null=True),
                ),
                (
                    "above_ground_wall_buffer_to_outdoor_area",
                    models.FloatField(db_column="fAGWBOAr", null=True),
                ),
                (
                    "joist_conditioned_to_outdoor_ro",
                    models.FloatField(db_column="fJoiCORo", null=True),
                ),
                (
                    "joist_conditioned_to_outdoor_area",
                    models.FloatField(db_column="fJoiCOAr", null=True),
                ),
                ("joist_buffer_to_outdoor_ro", models.FloatField(db_column="fJoiBORo", null=True)),
                (
                    "joist_buffer_to_outdoor_area",
                    models.FloatField(db_column="fJoiBOAr", null=True),
                ),
                (
                    "foundation_walls_conditioned_to_outdoor_ro",
                    models.FloatField(db_column="fFndCORo", null=True),
                ),
                (
                    "foundation_walls_conditioned_to_outdoor_area",
                    models.FloatField(db_column="fFndCOAr", null=True),
                ),
                (
                    "foundation_walls_buffer_to_outdoor_ro",
                    models.FloatField(db_column="fFndBORo", null=True),
                ),
                (
                    "foundation_walls_buffer_to_outdoor_area",
                    models.FloatField(db_column="fFndBOAr", null=True),
                ),
                (
                    "frame_floor_conditioned_to_outdoor_ro",
                    models.FloatField(db_column="fFrFCARo", null=True),
                ),
                (
                    "frame_floor_conditioned_to_outdoor_area",
                    models.FloatField(db_column="fFrFCAAr", null=True),
                ),
                (
                    "window_conditioned_to_outdoor_ro",
                    models.FloatField(db_column="fWinCORo", null=True),
                ),
                (
                    "window_conditioned_to_outdoor_area",
                    models.FloatField(db_column="fWinCOAr", null=True),
                ),
                (
                    "skylight_conditioned_to_outdoor_ro",
                    models.FloatField(db_column="fSkyCORo", null=True),
                ),
                (
                    "skylight_conditioned_to_outdoor_area",
                    models.FloatField(db_column="fSkyCOAr", null=True),
                ),
                (
                    "door_conditioned_to_outdoor_ro",
                    models.FloatField(db_column="fDorCORo", null=True),
                ),
                (
                    "door_conditioned_to_outdoor_area",
                    models.FloatField(db_column="fDorCOAr", null=True),
                ),
                (
                    "added_mass_drywall_thickness",
                    models.FloatField(db_column="fAMThDry", null=True),
                ),
                (
                    "window_wall_ratio",
                    models.FloatField(blank=True, db_column="fWinWall", null=True),
                ),
                (
                    "window_floor_ratio",
                    models.FloatField(blank=True, db_column="fWinFloor", null=True),
                ),
                (
                    "dominant_flat_ceiling",
                    models.CharField(blank=True, db_column="SCEILATDOM", max_length=255, null=True),
                ),
                (
                    "dominant_sealed_attic_ceiling",
                    models.CharField(blank=True, db_column="SCEILSADOM", max_length=255, null=True),
                ),
                (
                    "dominant_cathedral_ceiling",
                    models.CharField(blank=True, db_column="SCEILCADOM", max_length=255, null=True),
                ),
                (
                    "dominant_above_grade_wall",
                    models.CharField(blank=True, db_column="SAGWDOM", max_length=255, null=True),
                ),
                (
                    "dominant_foundation_wall",
                    models.CharField(blank=True, db_column="SFNDWDOM", max_length=255, null=True),
                ),
                (
                    "dominant_slab",
                    models.CharField(blank=True, db_column="SSLABDOM", max_length=255, null=True),
                ),
                (
                    "dominant_frame_floor",
                    models.CharField(blank=True, db_column="SFRFDOM", max_length=255, null=True),
                ),
                (
                    "dominant_window",
                    models.CharField(blank=True, db_column="SWINDOM", max_length=255, null=True),
                ),
                (
                    "dominant_duct_leakage",
                    models.CharField(blank=True, db_column="SDUCTDOM", max_length=255, null=True),
                ),
                (
                    "dominant_heating",
                    models.CharField(blank=True, db_column="SHTGDOM", max_length=255, null=True),
                ),
                (
                    "dominant_cooling",
                    models.CharField(blank=True, db_column="SCLGDOM", max_length=255, null=True),
                ),
                (
                    "dominant_hot_water",
                    models.CharField(blank=True, db_column="SDHWDOM", max_length=255, null=True),
                ),
                ("note", models.TextField(blank=True, db_column="sNotes")),
            ],
            options={
                "verbose_name": "REM/Rate Building",
            },
        ),
        migrations.CreateModel(
            name="BuildingInfo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("volume", models.FloatField(db_column="fBIVolume", null=True)),
                ("conditioned_area", models.FloatField(db_column="fBIACond", null=True)),
                (
                    "type",
                    models.IntegerField(
                        choices=[
                            (1, "Single-family detached"),
                            (2, "Townhouse, end unit"),
                            (3, "Townhouse, inside unit"),
                            (4, "Apartment, end unit"),
                            (5, "Apartment, inside unit"),
                            (6, "Multi-family, whole building"),
                            (7, "Duplex, single unit"),
                            (8, "Mobile home"),
                            (9, "Duplex, whole building"),
                        ],
                        db_column="nBIHType",
                        null=True,
                    ),
                ),
                (
                    "house_level_type",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Top floor"),
                            (2, "Mid Level"),
                            (3, "Lowest Level"),
                        ],
                        db_column="nBILType",
                        null=True,
                    ),
                ),
                ("number_stories", models.IntegerField(db_column="nBIStories", null=True)),
                (
                    "foundation_type",
                    models.IntegerField(
                        choices=[
                            (1, "Slab"),
                            (2, "Open crawl space"),
                            (3, "Enclosed crawl space"),
                            (4, "Conditioned basement"),
                            (5, "Unconditioned basement"),
                            (6, "More than one type"),
                            (7, "Apartment above conditioned space"),
                            (8, "Conditioned crawl space"),
                        ],
                        db_column="nBIFType",
                        null=True,
                    ),
                ),
                ("number_bedrooms", models.IntegerField(db_column="nBIBeds", null=True)),
                ("num_units", models.IntegerField(db_column="nBIUnits", null=True)),
                ("rating_number", models.CharField(db_column="sBIRateNo", max_length=93)),
                (
                    "crawl_space_type",
                    models.IntegerField(
                        choices=[(0, "N/A"), (1, "Unvented"), (2, "Vented"), (3, "Operable vents")],
                        db_column="nBICType",
                        null=True,
                    ),
                ),
                ("year_built", models.IntegerField(blank=True, db_column="nBIYearBlt", null=True)),
                (
                    "thermal_boundary",
                    models.IntegerField(
                        choices=[
                            (0, "N/A"),
                            (1, "Frame Floor"),
                            (2, "Foundation Wall"),
                            (3, "REM Default"),
                        ],
                        db_column="nBIThBndry",
                        null=True,
                    ),
                ),
                (
                    "number_stories_including_conditioned_basement",
                    models.IntegerField(db_column="nBIStoryWCB", null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CeilingType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_ceiling_number", models.IntegerField(db_column="lCTCTNo")),
                ("gypsum_thickness", models.FloatField(db_column="fCTGypThk", null=True)),
                ("rafter_width", models.FloatField(db_column="fCTRftrWdt", null=True)),
                ("rafter_height", models.FloatField(db_column="fCTRftrHgt", null=True)),
                ("rafter_spacing", models.FloatField(db_column="fCTRftrSpc", null=True)),
                ("continuous_insulation", models.FloatField(db_column="fCTContIns", null=True)),
                ("cavity_insulation", models.FloatField(db_column="fCTCvtyIns", null=True)),
                (
                    "cavity_insulation_thickness",
                    models.FloatField(db_column="fCTCInsThk", null=True),
                ),
                (
                    "style",
                    models.IntegerField(
                        choices=[
                            (1, "Vaulted"),
                            (2, "Attic"),
                            (3, "Sealed Attic"),
                            (4, "Adiabatic"),
                        ],
                        db_column="nCTCeilTyp",
                        default=1,
                    ),
                ),
                ("_composite_type_number", models.IntegerField(db_column="lCTCompNo")),
                ("quick_fill", models.BooleanField(db_column="bCTQFValid", default=False)),
                (
                    "insulation_type",
                    models.IntegerField(
                        choices=[(1, "Batt"), (2, "Blown")], db_column="NCTINSTYP", default=1
                    ),
                ),
                ("unrestricted_depth", models.FloatField(db_column="FCTUNRDEP", null=True)),
                ("unrestricted_rvalue", models.FloatField(db_column="FCTUNRRVL", null=True)),
                ("ceiling_width", models.FloatField(db_column="FCTCLGWID", null=True)),
                ("ceiling_rise", models.FloatField(db_column="FCTCLGRSE", null=True)),
                ("truss_height", models.FloatField(db_column="FCTTRSHGT", null=True)),
                ("heel_height", models.FloatField(db_column="FCTHELHGT", null=True)),
                ("ventilation_space", models.FloatField(db_column="FCTVNTSPC", null=True)),
                (
                    "quick_fill_type",
                    models.IntegerField(
                        choices=[(0, "Site Built"), (2, "Mobile Home")],
                        db_column="NCTQFTYP",
                        default=0,
                    ),
                ),
                ("framing_factor", models.FloatField(db_column="FCTFF", null=True)),
                (
                    "default_framing_factors",
                    models.BooleanField(db_column="BCTDFLTFF", default=False),
                ),
                (
                    "note",
                    models.CharField(blank=True, db_column="sCTNote", max_length=255, null=True),
                ),
                (
                    "insulation_grade",
                    models.IntegerField(
                        choices=[(1, "I"), (2, "II"), (3, "III")], db_column="NCTINSGRDE", null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Compliance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("hers_index", models.FloatField(db_column="fHERSScor")),
                ("hers_total_cost", models.FloatField(db_column="fHERSCost")),
                ("hers_stars", models.FloatField(db_column="fHERSStars")),
                ("hers_reference_heating_consumption", models.FloatField(db_column="fHERSRHCn")),
                ("hers_reference_cooling_consumption", models.FloatField(db_column="fHERSRCCn")),
                ("hers_reference_hot_water_consumption", models.FloatField(db_column="fHERSRDCN")),
                (
                    "hers_reference_lights_appliance_consumption",
                    models.FloatField(db_column="fHERSRLACn"),
                ),
                (
                    "hers_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="fHERSRPVCn"),
                ),
                ("hers_reference_total_consumption", models.FloatField(db_column="fHERSRTCn")),
                ("hers_designed_heating_consumption", models.FloatField(db_column="fHERSDHCn")),
                ("hers_designed_cooling_consumption", models.FloatField(db_column="fHERSDCCn")),
                ("hers_designed_hot_water_consumption", models.FloatField(db_column="fHERSDDCN")),
                (
                    "hers_designed_lights_appliance_consumption",
                    models.FloatField(db_column="fHERSDLACn"),
                ),
                (
                    "hers_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="fHERSDPVCn"),
                ),
                ("hers_designed_total_consumption", models.FloatField(db_column="fHERSDTCn")),
                ("iecc98_reference_heating_consumption", models.FloatField(db_column="f98IERHCn")),
                ("iecc98_reference_cooling_consumption", models.FloatField(db_column="f98IERCCn")),
                (
                    "iecc98_reference_hot_water_consumption",
                    models.FloatField(db_column="f98IERDCN"),
                ),
                (
                    "iecc98_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f98IERLACn"),
                ),
                (
                    "iecc98_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f98IERPVCn"),
                ),
                ("iecc98_reference_total_consumption", models.FloatField(db_column="f98IERTCn")),
                ("iecc98_designed_heating_consumption", models.FloatField(db_column="f98IEDHCn")),
                ("iecc98_designed_cooling_consumption", models.FloatField(db_column="f98IEDCCn")),
                ("iecc98_designed_hot_water_consumption", models.FloatField(db_column="f98IEDDCN")),
                (
                    "iecc98_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f98IEDLACn"),
                ),
                (
                    "iecc98_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f98IEDPVCn"),
                ),
                ("iecc98_designed_total_consumption", models.FloatField(db_column="f98IEDTCn")),
                (
                    "meets_iecc98_consumption_compliance",
                    models.BooleanField(db_column="b98IECC", default=False),
                ),
                ("iecc00_reference_heating_consumption", models.FloatField(db_column="f00IERHCn")),
                ("iecc00_reference_cooling_consumption", models.FloatField(db_column="f00IERCCn")),
                (
                    "iecc00_reference_hot_water_consumption",
                    models.FloatField(db_column="f00IERDCN"),
                ),
                (
                    "iecc00_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f00IERLACn"),
                ),
                (
                    "iecc00_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f00IERPVCn"),
                ),
                ("iecc00_reference_total_consumption", models.FloatField(db_column="f00IERTCn")),
                ("iecc00_designed_heating_consumption", models.FloatField(db_column="f00IEDHCn")),
                ("iecc00_designed_cooling_consumption", models.FloatField(db_column="f00IEDCCn")),
                ("iecc00_designed_hot_water_consumption", models.FloatField(db_column="f00IEDDCN")),
                (
                    "iecc00_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f00IEDLACn"),
                ),
                (
                    "iecc00_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f00IEDPVCn"),
                ),
                ("iecc00_designed_total_consumption", models.FloatField(db_column="f00IEDTCn")),
                (
                    "meets_iecc00_consumption_compliance",
                    models.BooleanField(db_column="b00IECC", default=False),
                ),
                ("iecc01_reference_heating_consumption", models.FloatField(db_column="f01IERHCn")),
                ("iecc01_reference_cooling_consumption", models.FloatField(db_column="f01IERCCn")),
                (
                    "iecc01_reference_hot_water_consumption",
                    models.FloatField(db_column="f01IERDCN"),
                ),
                (
                    "iecc01_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f01IERLACn"),
                ),
                (
                    "iecc01_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f01IERPVCn"),
                ),
                ("iecc01_reference_total_consumption", models.FloatField(db_column="f01IERTCn")),
                ("iecc01_designed_heating_consumption", models.FloatField(db_column="f01IEDHCn")),
                ("iecc01_designed_cooling_consumption", models.FloatField(db_column="f01IEDCCn")),
                ("iecc01_designed_hot_water_consumption", models.FloatField(db_column="f01IEDDCN")),
                (
                    "iecc01_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f01IEDLACn"),
                ),
                (
                    "iecc01_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f01IEDPVCn"),
                ),
                ("iecc01_designed_total_consumption", models.FloatField(db_column="f01IEDTCn")),
                (
                    "meets_iecc01_consumption_compliance",
                    models.BooleanField(db_column="b01IECC", default=False),
                ),
                ("iecc03_reference_heating_consumption", models.FloatField(db_column="f03IERHCn")),
                ("iecc03_reference_cooling_consumption", models.FloatField(db_column="f03IERCCn")),
                (
                    "iecc03_reference_hot_water_consumption",
                    models.FloatField(db_column="f03IERDCN"),
                ),
                (
                    "iecc03_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f03IERLACn"),
                ),
                (
                    "iecc03_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f03IERPVCn"),
                ),
                ("iecc03_reference_total_consumption", models.FloatField(db_column="f03IERTCn")),
                ("iecc03_designed_heating_consumption", models.FloatField(db_column="f03IEDHCn")),
                ("iecc03_designed_cooling_consumption", models.FloatField(db_column="f03IEDCCn")),
                ("iecc03_designed_hot_water_consumption", models.FloatField(db_column="f03IEDDCN")),
                (
                    "iecc03_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f03IEDLACn"),
                ),
                (
                    "iecc03_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f03IEDPVCn"),
                ),
                ("iecc03_designed_total_consumption", models.FloatField(db_column="f03IEDTCn")),
                (
                    "passes_iecc03_consumption_compliance",
                    models.BooleanField(db_column="b03IECC", default=False),
                ),
                ("iecc04_reference_heating_cost", models.FloatField(db_column="f04IERHCT")),
                ("iecc04_reference_cooling_cost", models.FloatField(db_column="f04IERCCT")),
                ("iecc04_reference_hot_water_cost", models.FloatField(db_column="f04IERDCT")),
                (
                    "iecc04_reference_lights_appliance_cost",
                    models.FloatField(db_column="f04IERLACT"),
                ),
                ("iecc04_reference_photo_voltaic_cost", models.FloatField(db_column="f04IERPVCT")),
                ("iecc04_reference_service_cost", models.FloatField(db_column="f04IERSVCT")),
                ("iecc04_reference_total_cost", models.FloatField(db_column="f04IERTCT")),
                ("iecc04_designed_heating_cost", models.FloatField(db_column="f04IEDHCT")),
                ("iecc04_designed_cooling_cost", models.FloatField(db_column="f04IEDCCT")),
                ("iecc04_designed_hot_water_cost", models.FloatField(db_column="f04IEDDCT")),
                (
                    "iecc04_designed_lights_appliance_cost",
                    models.FloatField(db_column="f04IEDLACT"),
                ),
                ("iecc04_designed_photo_voltaic_cost", models.FloatField(db_column="f04IEDPVCT")),
                ("iecc04_designed_service_cost", models.FloatField(db_column="f04IEDSVCT")),
                ("iecc04_designed_total_cost", models.FloatField(db_column="f04IEDTCT")),
                (
                    "passes_iecc04_consumption_compliance",
                    models.BooleanField(db_column="b04IECC", default=False),
                ),
                ("iecc06_reference_heating_cost", models.FloatField(db_column="f06IERHCT")),
                ("iecc06_reference_cooling_cost", models.FloatField(db_column="f06IERCCT")),
                ("iecc06_reference_hot_water_cost", models.FloatField(db_column="f06IERDCT")),
                (
                    "iecc06_reference_lights_appliance_cost",
                    models.FloatField(db_column="f06IERLACT"),
                ),
                ("iecc06_reference_photo_voltaic_cost", models.FloatField(db_column="f06IERPVCT")),
                ("iecc06_reference_service_cost", models.FloatField(db_column="f06IERSVCT")),
                ("iecc06_reference_total_cost", models.FloatField(db_column="f06IERTCT")),
                ("iecc06_designed_heating_cost", models.FloatField(db_column="f06IEDHCT")),
                ("iecc06_designed_cooling_cost", models.FloatField(db_column="f06IEDCCT")),
                ("iecc06_designed_hot_water_cost", models.FloatField(db_column="f06IEDDCT")),
                (
                    "iecc06_designed_lights_appliance_cost",
                    models.FloatField(db_column="f06IEDLACT"),
                ),
                ("iecc06_designed_photo_voltaic_cost", models.FloatField(db_column="f06IEDPVCT")),
                ("iecc06_designed_service_cost", models.FloatField(db_column="f06IEDSVCT")),
                ("iecc06_designed_total_cost", models.FloatField(db_column="f06IEDTCT")),
                (
                    "passes_iecc06_consumption_compliance",
                    models.BooleanField(db_column="b06IECC", default=False),
                ),
                ("ny_ecc_reference_heating_consumption", models.FloatField(db_column="fNYECRHCn")),
                ("ny_ecc_reference_cooling_consumption", models.FloatField(db_column="fNYECRCCn")),
                (
                    "ny_ecc_reference_hot_water_consumption",
                    models.FloatField(db_column="fNYECRDCN"),
                ),
                (
                    "ny_ecc_reference_lights_appliance_consumption",
                    models.FloatField(db_column="fNYECRLACn"),
                ),
                (
                    "ny_ecc_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="fNYECRPVCn"),
                ),
                ("ny_ecc_reference_total_consumption", models.FloatField(db_column="fNYECRTCn")),
                ("ny_ecc_designed_heating_consumption", models.FloatField(db_column="fNYECDHCn")),
                ("ny_ecc_designed_cooling_consumption", models.FloatField(db_column="fNYECDCCn")),
                ("ny_ecc_designed_hot_water_consumption", models.FloatField(db_column="fNYECDDCN")),
                (
                    "ny_ecc_designed_lights_appliance_consumption",
                    models.FloatField(db_column="fNYECDLACn"),
                ),
                (
                    "ny_ecc_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="fNYECDPVCn"),
                ),
                ("ny_ecc_designed_total_consumption", models.FloatField(db_column="fNYECDTCn")),
                (
                    "passes_ny_ecc_consumption_compliance",
                    models.BooleanField(db_column="bNYECC", default=False),
                ),
                ("nv_ecc_reference_heating_consumption", models.FloatField(db_column="fNVECRHCn")),
                ("nv_ecc_reference_cooling_consumption", models.FloatField(db_column="fNVECRCCn")),
                (
                    "nv_ecc_reference_hot_water_consumption",
                    models.FloatField(db_column="fNVECRDCN"),
                ),
                (
                    "nv_ecc_reference_lights_appliance_consumption",
                    models.FloatField(db_column="fNVECRLACn"),
                ),
                (
                    "nv_ecc_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="fNVECRPVCn"),
                ),
                ("nv_ecc_reference_total_consumption", models.FloatField(db_column="fNVECRTCn")),
                ("nv_ecc_designed_heating_consumption", models.FloatField(db_column="fNVECDHCn")),
                ("nv_ecc_designed_cooling_consumption", models.FloatField(db_column="fNVECDCCn")),
                ("nv_ecc_designed_hot_water_consumption", models.FloatField(db_column="fNVECDDCN")),
                (
                    "nv_ecc_designed_lights_appliance_consumption",
                    models.FloatField(db_column="fNVECDLACn"),
                ),
                (
                    "nv_ecc_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="fNVECDPVCn"),
                ),
                ("nv_ecc_designed_total_consumption", models.FloatField(db_column="fNVECDTCn")),
                (
                    "passes_nv_ecc_consumption_compliance",
                    models.BooleanField(db_column="bNVECC", default=False),
                ),
                ("mec92_reference_overall_u0", models.FloatField(db_column="f92MECReUo")),
                ("mec92_as_designed_overall_u0", models.FloatField(db_column="f92MECADUo")),
                (
                    "passes_mec92_ducts_u0",
                    models.BooleanField(db_column="b92MECDuP", default=False),
                ),
                (
                    "passes_mec92_overall_u0",
                    models.BooleanField(db_column="b92MECuoP", default=False),
                ),
                ("mec93_reference_overall_u0", models.FloatField(db_column="f93MECReUo")),
                ("mec93_as_designed_overall_u0", models.FloatField(db_column="f93MECADUo")),
                (
                    "passes_mec93_ducts_u0",
                    models.BooleanField(db_column="b93MECDuP", default=False),
                ),
                (
                    "passes_mec93_overall_u0",
                    models.BooleanField(db_column="b93MECuoP", default=False),
                ),
                ("mec95_reference_overall_u0", models.FloatField(db_column="f95MECReUo")),
                ("mec95_as_designed_overall_u0", models.FloatField(db_column="f95MECADUo")),
                (
                    "passes_mec95_ducts_u0",
                    models.BooleanField(db_column="b95MECDuP", default=False),
                ),
                (
                    "passes_mec95_overall_u0",
                    models.BooleanField(db_column="b95MECuoP", default=False),
                ),
                ("iecc98_reference_overall_u0", models.FloatField(db_column="f98IECCRUo")),
                ("iecc98_designed_overall_u0", models.FloatField(db_column="f98IECCDUo")),
                (
                    "passes_iecc98_ducts_overall_u0",
                    models.BooleanField(db_column="b98IECCDuP", default=False),
                ),
                (
                    "passes_iecc98_overall_u0",
                    models.BooleanField(db_column="b98IECCuoP", default=False),
                ),
                ("iecc00_reference_overall_u0", models.FloatField(db_column="f00IECCRUo")),
                ("iecc00_designed_overall_u0", models.FloatField(db_column="f00IECCDUo")),
                (
                    "passes_iecc00_ducts_overall_u0",
                    models.BooleanField(db_column="b00IECCDuP", default=False),
                ),
                (
                    "passes_iecc00_overall_u0",
                    models.BooleanField(db_column="b00IECCuoP", default=False),
                ),
                ("iecc01_reference_overall_u0", models.FloatField(db_column="f01IECCRUo")),
                ("iecc01_designed_overall_u0", models.FloatField(db_column="f01IECCDUo")),
                (
                    "passes_iecc01_ducts_overall_u0",
                    models.BooleanField(db_column="b01IECCDuP", default=False),
                ),
                (
                    "passes_iecc01_overall_u0",
                    models.BooleanField(db_column="b01IECCuoP", default=False),
                ),
                ("iecc03_reference_overall_u0", models.FloatField(db_column="f03IECCRUo")),
                ("iecc03_designed_overall_u0", models.FloatField(db_column="f03IECCDUo")),
                (
                    "passes_iecc03_ducts_overall_u0",
                    models.BooleanField(db_column="b03IECCDuP", default=False),
                ),
                (
                    "passes_iecc03_overall_u0",
                    models.BooleanField(db_column="b03IECCuoP", default=False),
                ),
                ("iecc04_reference_overall_u0", models.FloatField(db_column="f04IECCRUA")),
                ("iecc04_designed_overall_u0", models.FloatField(db_column="f04IECCDUA")),
                (
                    "passes_iecc04_ducts_overall_u0",
                    models.BooleanField(db_column="b04IECCDuP", default=False),
                ),
                (
                    "passes_iecc04_overall_ua_compliance",
                    models.BooleanField(db_column="b04IECCuAP", default=False),
                ),
                ("iecc06_reference_overall_u0", models.FloatField(db_column="f06IECCRUA")),
                ("iecc06_designed_overall_u0", models.FloatField(db_column="f06IECCDUA")),
                (
                    "passes_iecc06_ducts_overall_u0",
                    models.BooleanField(db_column="b06IECCDuP", default=False),
                ),
                (
                    "passes_iecc06_overall_ua_compliance",
                    models.BooleanField(db_column="b06IECCuAP", default=False),
                ),
                ("mec92_reference_heating_consumption", models.FloatField(db_column="f92MECRHCn")),
                ("mec92_reference_cooling_consumption", models.FloatField(db_column="f92MECRCCn")),
                (
                    "mec92_reference_hot_water_consumption",
                    models.FloatField(db_column="f92MECRDCn"),
                ),
                (
                    "mec92_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f92MECRLCn"),
                ),
                (
                    "mec92_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f92MECRPCn"),
                ),
                ("mec92_reference_total_consumption", models.FloatField(db_column="f92MECRTCn")),
                ("mec92_designed_heating_consumption", models.FloatField(db_column="f92MECDHCn")),
                ("mec92_designed_cooling_consumption", models.FloatField(db_column="f92MECDCCn")),
                ("mec92_designed_hot_water_consumption", models.FloatField(db_column="f92MECDDCn")),
                (
                    "mec92_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f92MECDLCn"),
                ),
                (
                    "mec92_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f92MECDPCn"),
                ),
                ("mec92_designed_total_consumption", models.FloatField(db_column="f92MECDTCn")),
                (
                    "passes_mec92_consumption_compliance",
                    models.BooleanField(db_column="b92MECCC", default=False),
                ),
                ("mec93_reference_heating_consumption", models.FloatField(db_column="f93MECRHCn")),
                ("mec93_reference_cooling_consumption", models.FloatField(db_column="f93MECRCCn")),
                (
                    "mec93_reference_hot_water_consumption",
                    models.FloatField(db_column="f93MECRDCn"),
                ),
                (
                    "mec93_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f93MECRLCn"),
                ),
                (
                    "mec93_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f93MECRPCn"),
                ),
                ("mec93_reference_total_consumption", models.FloatField(db_column="f93MECRTCn")),
                ("mec93_designed_heating_consumption", models.FloatField(db_column="f93MECDHCn")),
                ("mec93_designed_cooling_consumption", models.FloatField(db_column="f93MECDCCn")),
                ("mec93_designed_hot_water_consumption", models.FloatField(db_column="f93MECDDCn")),
                (
                    "mec93_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f93MECDLCn"),
                ),
                (
                    "mec93_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f93MECDPCn"),
                ),
                ("mec93_designed_total_consumption", models.FloatField(db_column="f93MECDTCn")),
                (
                    "passes_mec93_consumption_compliance",
                    models.BooleanField(db_column="b93MECCC", default=False),
                ),
                ("mec95_reference_heating_consumption", models.FloatField(db_column="f95MECRHCn")),
                ("mec95_reference_cooling_consumption", models.FloatField(db_column="f95MECRCCn")),
                (
                    "mec95_reference_hot_water_consumption",
                    models.FloatField(db_column="f95MECRDCN"),
                ),
                (
                    "mec95_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f95MECRLCn"),
                ),
                (
                    "mec95_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f95MECRPCn"),
                ),
                ("mec95_reference_total_consumption", models.FloatField(db_column="f95MECRTCn")),
                ("mec95_designed_heating_consumption", models.FloatField(db_column="f95MECDHCn")),
                ("mec95_designed_cooling_consumption", models.FloatField(db_column="f95MECDCCn")),
                ("mec95_designed_hot_water_consumption", models.FloatField(db_column="f95MECDDCN")),
                (
                    "mec95_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f95MECDLCn"),
                ),
                (
                    "mec95_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f95MECDPCn"),
                ),
                ("mec95_designed_total_consumption", models.FloatField(db_column="f95MECDTCn")),
                (
                    "passes_mec95_consumption_compliance",
                    models.BooleanField(db_column="b95MECCC", default=False),
                ),
                ("ashrae_90p2_load_change", models.FloatField(db_column="f90_2ASLC")),
                (
                    "meets_ashrae_90p2_envelope_compliance",
                    models.BooleanField(db_column="b90_2ASECP", default=False),
                ),
                ("ashrae_90p2_reference_consumption", models.FloatField(db_column="f90_2ASRCn")),
                ("ashrae_90p2_reference_cost", models.FloatField(db_column="f90_2ASRCt")),
                ("ashrae_90p2_designed_consumption", models.FloatField(db_column="f90_2ASDCn")),
                ("ashrae_90p2_designed_cost", models.FloatField(db_column="f90_2ASDCt")),
                (
                    "meets_ashrae_90p2_cost_compliance",
                    models.BooleanField(db_column="b90_2ASCCP", default=False),
                ),
                (
                    "passes_epact_tax_credit",
                    models.BooleanField(null=True, db_column="bTaxCredit", default=False),
                ),
                ("ny_hers_score", models.FloatField(db_column="FNYHERS")),
                ("passes_energy_star_v2", models.BooleanField(db_column="bEStarv2", default=False)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sRateNo", max_length=93, null=True),
                ),
                ("iecc09_reference_heating_cost", models.FloatField(db_column="f09IERHCT")),
                ("iecc09_reference_cooling_cost", models.FloatField(db_column="f09IERCCT")),
                ("iecc09_reference_hot_water_cost", models.FloatField(db_column="f09IERDCT")),
                (
                    "iecc09_reference_lights_appliance_cost",
                    models.FloatField(db_column="f09IERLACT"),
                ),
                ("iecc09_reference_photo_voltaic_cost", models.FloatField(db_column="f09IERPVCT")),
                ("iecc09_reference_service_cost", models.FloatField(db_column="f09IERSVCT")),
                ("iecc09_reference_total_cost", models.FloatField(db_column="f09IERTCT")),
                ("iecc09_designed_heating_cost", models.FloatField(db_column="f09IEDHCT")),
                ("iecc09_designed_cooling_cost", models.FloatField(db_column="f09IEDCCT")),
                ("iecc09_designed_hot_water_cost", models.FloatField(db_column="f09IEDDCT")),
                (
                    "iecc09_designed_lights_appliance_cost",
                    models.FloatField(db_column="f09IEDLACT"),
                ),
                ("iecc09_designed_photo_voltaic_cost", models.FloatField(db_column="f09IEDPVCT")),
                ("iecc09_designed_service_cost", models.FloatField(db_column="f09IEDSVCT")),
                ("iecc09_designed_total_cost", models.FloatField(db_column="f09IEDTCT")),
                (
                    "passes_iecc09_consumption_compliance",
                    models.BooleanField(db_column="b09IECC", default=False),
                ),
                ("iecc09_reference_overall_u0", models.FloatField(db_column="f09IECCRUA")),
                ("iecc09_designed_overall_u0", models.FloatField(db_column="f09IECCDUA")),
                (
                    "passes_iecc09_ducts_overall_u0",
                    models.BooleanField(db_column="b09IECCDuP", default=False),
                ),
                (
                    "passes_iecc09_overall_ua_compliance",
                    models.BooleanField(db_column="b09IECCuAP", default=False),
                ),
                ("hers_photo_voltaic_adjusted_score", models.FloatField(db_column="fHERS_PV")),
                ("energy_star_hers_score", models.FloatField(db_column="fES_HERS")),
                ("energy_star_hers_saf_score", models.FloatField(db_column="fES_HERSSA")),
                (
                    "passes_energy_star_v2p5",
                    models.BooleanField(db_column="bEStarv25", default=False),
                ),
                ("passes_energy_star_v3", models.BooleanField(db_column="bEStarv3", default=False)),
                ("nv_energy_plus_rebate", models.FloatField(db_column="fNVRebate")),
                ("passes_iecc04_code", models.BooleanField(db_column="bPass04IECC", default=False)),
                ("passes_iecc06_code", models.BooleanField(db_column="bPass06IECC", default=False)),
                ("passes_iecc09_code", models.BooleanField(db_column="bPass09IECC", default=False)),
                (
                    "passes_iecc12_code",
                    models.BooleanField(null=True, db_column="bPass12IECC", default=False),
                ),
                (
                    "passes_doe_challenge_home",
                    models.BooleanField(null=True, db_column="bDOECHALL"),
                ),
                ("hers_130", models.FloatField(blank=True, db_column="FHERS130", null=True)),
                (
                    "size_adjustment_factor",
                    models.FloatField(blank=True, db_column="FES_SZADJF", null=True),
                ),
                ("doe_hers", models.FloatField(blank=True, db_column="FDOE_Hers", null=True)),
                (
                    "doe_hers_saf_adjusted",
                    models.FloatField(blank=True, db_column="FDOE_HersSA", null=True),
                ),
                ("pass_energy_star_v3p1", models.BooleanField(null=True, db_column="bESTARV31")),
                ("pass_energy_star_v3HI", models.BooleanField(null=True, db_column="bESTARV3HI")),
            ],
        ),
        migrations.CreateModel(
            name="CompositeType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_composite_type_number", models.IntegerField(db_column="lTCTTCTTNo")),
                ("name", models.CharField(blank=True, db_column="sTCTType", max_length=93)),
                ("quick_fill", models.BooleanField(db_column="nTCTQFVal", default=False)),
                ("layer_1", models.CharField(blank=True, db_column="sTCTLNm1", max_length=93)),
                ("layer_2", models.CharField(blank=True, db_column="sTCTLNm2", max_length=93)),
                ("layer_3", models.CharField(blank=True, db_column="sTCTLNm3", max_length=93)),
                ("layer_4", models.CharField(blank=True, db_column="sTCTLNm4", max_length=93)),
                ("layer_5", models.CharField(blank=True, db_column="sTCTLNm5", max_length=93)),
                ("layer_6", models.CharField(blank=True, db_column="sTCTLNm6", max_length=93)),
                ("u_value", models.FloatField(blank=True, db_column="fTCTUo", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CostRate",
            fields=[
                (
                    "_source_cost_rate_number",
                    models.IntegerField(db_column="lCRCRNo", primary_key=True, serialize=False),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("heating_cost_as_is", models.FloatField(db_column="fCRHtg", null=True)),
                (
                    "heating_costs_with_improvements",
                    models.FloatField(db_column="fCRHtg2", null=True),
                ),
                ("heating_costs_savings", models.FloatField(db_column="fCRHtgSav", null=True)),
                ("cooling_cost_as_is", models.FloatField(db_column="fCRClg", null=True)),
                (
                    "cooling_costs_with_improvements",
                    models.FloatField(db_column="fCRClg2", null=True),
                ),
                ("cooling_costs_savings", models.FloatField(db_column="fCRClgSav", null=True)),
                ("hot_water_cost_as_is", models.FloatField(db_column="fCRHW", null=True)),
                (
                    "hot_water_costs_with_improvements",
                    models.FloatField(db_column="fCRHW2", null=True),
                ),
                ("hot_water_costs_savings", models.FloatField(db_column="fCRHWSav", null=True)),
                (
                    "lights_and_appliance_cost_as_is",
                    models.FloatField(db_column="fCRLA", null=True),
                ),
                (
                    "lights_and_appliance_costs_with_improvements",
                    models.FloatField(db_column="fCRLA2", null=True),
                ),
                (
                    "lights_and_appliance_costs_savings",
                    models.FloatField(db_column="fCRLASav", null=True),
                ),
                ("service_cost_as_is", models.FloatField(db_column="fCRSC", null=True)),
                (
                    "service_costs_with_improvements",
                    models.FloatField(db_column="fCRSC2", null=True),
                ),
                ("service_costs_savings", models.FloatField(db_column="fCRSCSav", null=True)),
                ("total_cost_as_is", models.FloatField(db_column="fCRTot", null=True)),
                (
                    "total_costs_with_improvements",
                    models.FloatField(db_column="fCRTot2", null=True),
                ),
                ("total_costs_savings", models.FloatField(db_column="fCRTotSav", null=True)),
                ("rating_cost_as_is", models.FloatField(db_column="fCRRating", null=True)),
                (
                    "rating_costs_with_improvements",
                    models.FloatField(db_column="fCRRating2", null=True),
                ),
                ("first_year_cash_flow", models.FloatField(db_column="fCR1YCF", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="DataTracker",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "_result_number",
                    models.IntegerField(blank=True, db_column="lBldgRunNo", null=True),
                ),
                (
                    "_building_number",
                    models.IntegerField(blank=True, db_column="lBldgNo", null=True),
                ),
                ("version", models.CharField(max_length=12)),
                ("db_major_version", models.IntegerField()),
                ("db_minor_version", models.IntegerField()),
                ("user_host", models.CharField(blank=True, max_length=128, null=True)),
                ("created_on", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("last_update", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (-1, "Data Have Building"),
                            (0, "Data Have Simulation and Building"),
                            (1, "Available for use"),
                        ],
                        default=-2,
                    ),
                ),
                (
                    "building",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="remrate_data.Building",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="company.Company",
                    ),
                ),
                (
                    "remrate_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="remrate.RemRateUser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DOEChallenge",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                (
                    "home_builder_id",
                    models.CharField(blank=True, db_column="sDCBldrID", max_length=93),
                ),
                (
                    "verified_fenestration_requirements",
                    models.BooleanField(null=True, db_column="nDCFenstrtn"),
                ),
                (
                    "verified_insulation_requirements",
                    models.BooleanField(null=True, db_column="nDCInsul"),
                ),
                (
                    "verified_duct_location_requirements",
                    models.BooleanField(null=True, db_column="nDCDuctLoc"),
                ),
                (
                    "verified_appliance_requirements",
                    models.BooleanField(null=True, db_column="nDCAppl"),
                ),
                (
                    "verified_lighting_requirements",
                    models.BooleanField(null=True, db_column="nDCLighting"),
                ),
                (
                    "verified_fan_efficiency_requirements",
                    models.BooleanField(null=True, db_column="nDCFanEff"),
                ),
                (
                    "verified_indoor_air_quality_requirements",
                    models.BooleanField(null=True, db_column="nDCAirQual"),
                ),
                (
                    "verified_renewable_solar_electric_requirements",
                    models.BooleanField(null=True, db_column="nDCSolarE"),
                ),
                (
                    "verified_renewable_solar_hot_water_requirements",
                    models.BooleanField(null=True, db_column="nDCSolarHW"),
                ),
                (
                    "verified_water_efficiency",
                    models.BooleanField(null=True, db_column="nDCWaterEff"),
                ),
                (
                    "optional_indoor_air_plus",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Yes"), (2, "No"), (3, "Don't Know")],
                        db_column="nDCAirPlus",
                        null=True,
                    ),
                ),
                (
                    "optional_water_sense",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Yes"), (2, "No"), (3, "Don't Know")],
                        db_column="nDCWtrSense",
                        null=True,
                    ),
                ),
                (
                    "optional_ibhs_fortified",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Yes"), (2, "No"), (3, "Don't Know")],
                        db_column="nDCIBHS",
                        null=True,
                    ),
                ),
                (
                    "optional_quality_management_guidelines",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Yes"), (2, "No"), (3, "Don't Know")],
                        db_column="nDCMGMT",
                        null=True,
                    ),
                ),
                (
                    "optional_utility_bill_waiver",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Yes"), (2, "No"), (3, "Don't Know")],
                        db_column="nDCWaiver",
                        null=True,
                    ),
                ),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sDCRateNo", max_length=93, null=True),
                ),
                (
                    "building",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Door",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szDOName", max_length=93)),
                ("area", models.FloatField(db_column="fNOArea", null=True)),
                ("wall_number", models.IntegerField(db_column="nDOWallNum", null=True)),
                ("_door_type_number", models.IntegerField(db_column="lDODoorTNo")),
                ("u_value", models.FloatField(db_column="fDOUo", null=True)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sDORateNo", max_length=93),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DoorType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_door_type_number", models.IntegerField(db_column="lDTDTNo")),
                ("name", models.CharField(blank=True, db_column="sDTType", max_length=93)),
                (
                    "door_type",
                    models.IntegerField(
                        choices=[(1, "Storm Door"), (2, "No Storm Door")],
                        db_column="nDTType",
                        null=True,
                    ),
                ),
                ("r_value", models.FloatField(db_column="fDTRValue", null=True)),
                ("note", models.CharField(blank=True, db_column="sDTNote", max_length=765)),
            ],
        ),
        migrations.CreateModel(
            name="DualFuelHeatPump",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_dual_fuel_heat_pump_number", models.IntegerField(db_column="lDFTDFTNo")),
                ("name", models.CharField(blank=True, db_column="sDFTType", max_length=93)),
                (
                    "fuel_type",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="nDFTFuel",
                        null=True,
                    ),
                ),
                ("heating_hspf", models.FloatField(db_column="fDFTHHSPF", null=True)),
                ("heating_capacity", models.FloatField(db_column="fDFTHCap47", null=True)),
                (
                    "backup_fuel_type",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="nDFTBFuel",
                        null=True,
                    ),
                ),
                (
                    "backup_heating_efficiency_units",
                    models.IntegerField(
                        choices=[(1, "AFUE"), (2, "% EFF"), (3, "HSPF"), (4, "COP")],
                        db_column="nDFTBEffU",
                        null=True,
                    ),
                ),
                (
                    "backup_heating_seasonal_efficiency",
                    models.FloatField(db_column="fDFTBSEff", null=True),
                ),
                ("backup_heating_capacity", models.FloatField(db_column="fDFTBCap", null=True)),
                ("cooling_seer", models.FloatField(db_column="fDFTCSEER", null=True)),
                ("cooling_capacity", models.FloatField(db_column="fDFTCCap", null=True)),
                (
                    "cooling_sensible_heat_fraction",
                    models.FloatField(db_column="fDFTCSHF", null=True),
                ),
                ("is_desuperheater", models.BooleanField(db_column="nDFTDSHtr", default=False)),
                ("switch_over_temperature", models.FloatField(db_column="fDFTSwitch", null=True)),
                ("fan_control_type", models.IntegerField(db_column="nDFTFnCtrl", null=True)),
                ("fan_defaults", models.BooleanField(db_column="nDFTFnDef", default=False)),
                ("fan_high_speed", models.FloatField(db_column="fDFTFnHSpd", null=True)),
                ("fan_low_speed", models.FloatField(db_column="fDFTFnLSpd", null=True)),
                ("note", models.CharField(blank=True, db_column="sDFTNote", max_length=765)),
            ],
            options={
                "ordering": ("simulation", "-heating_capacity", "-cooling_capacity"),
            },
        ),
        migrations.CreateModel(
            name="Duct",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("_duct_system_number", models.IntegerField(db_column="lDUDSNo")),
                ("area", models.FloatField(db_column="fDUArea", null=True)),
                (
                    "location",
                    models.IntegerField(
                        choices=[
                            (1, "Open crawl/raised floor"),
                            (2, "Enclosed crawl space"),
                            (3, "Conditioned crawl space"),
                            (4, "Unconditioned basement"),
                            (5, "Conditioned basement"),
                            (6, "Attic, under insulation"),
                            (7, "Attic, exposed"),
                            (8, "Conditioned space"),
                            (10, "Garage"),
                            (14, "Floor cavity over garage"),
                            (13, "Exterior wall"),
                            (9, "Wall with no top plate Garage"),
                            (15, "Under slab floor"),
                            (12, "Mobile home belly"),
                            (0, "None"),
                        ],
                        db_column="nDULoc",
                        null=True,
                    ),
                ),
                ("r_value", models.FloatField(db_column="fDUIns", null=True)),
                (
                    "type",
                    models.IntegerField(
                        choices=[(1, "Supply"), (2, "Return")], db_column="nDUDctType", null=True
                    ),
                ),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sDURateNo", max_length=93),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DuctSystem",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("_source_duct_system_number", models.IntegerField(db_column="lDSDSNo")),
                ("name", models.CharField(blank=True, db_column="szDSName", max_length=93)),
                ("heating_equipment_number", models.IntegerField(db_column="lDSHtgNo", null=True)),
                ("cooling_equipment_number", models.IntegerField(db_column="lDSClgNo", null=True)),
                ("supply_area", models.FloatField(db_column="fDSSupArea", null=True)),
                ("return_area", models.FloatField(db_column="fDSRetArea", null=True)),
                (
                    "number_of_return_registers",
                    models.IntegerField(db_column="lDSRegis", null=True),
                ),
                (
                    "leakage_type",
                    models.IntegerField(
                        choices=[
                            (1, "Qualitative Default"),
                            (2, "Total Leakage"),
                            (3, "Supply and Return Leakage"),
                        ],
                        db_column="nDSDLeakTy",
                        null=True,
                    ),
                ),
                ("total_leakage", models.FloatField(db_column="fDSDLeakTo", null=True)),
                ("supply_leakage", models.FloatField(db_column="fDSDLeakSu", null=True)),
                ("return_leakage", models.FloatField(db_column="fDSDLeakRe", null=True)),
                (
                    "leakage_unit",
                    models.IntegerField(
                        choices=[
                            (1, "CFM @ 50 Pascals"),
                            (2, "CFM @ 25 Pascals"),
                            (3, "ACH @ 50 Pascals"),
                            (4, "Natural ACH"),
                            (5, "Eff. Leakage Area (in\xb2)"),
                            (6, "ELA/100 sf shell"),
                            (7, "Thermal Efficiency (%)"),
                            (9, "Specific Leakage Area"),
                            (10, "CFM per Std 152"),
                            (11, "CFM25 / CFA"),
                            (12, "CFM25 / CFMfan"),
                        ],
                        db_column="nDSDLeakUn",
                        null=True,
                    ),
                ),
                (
                    "leakage_estimate",
                    models.IntegerField(
                        choices=[
                            (1, "Leaky, uninsulated"),
                            (2, "RESNET/HERS default"),
                            (3, "Proposed Reduced Leakage"),
                        ],
                        db_column="lDSDLeakET",
                        null=True,
                    ),
                ),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sDSRateNo", max_length=93),
                ),
                (
                    "leakage_tightness_test",
                    models.IntegerField(
                        choices=[
                            (1, "Postconstruction Test"),
                            (2, "Rough-In Test - w/ Air Handler"),
                            (3, "Rough-In Test - w/o Air Handler"),
                            (4, "Duct Leakage Exemption"),
                        ],
                        db_column="nDSDLeakTT",
                        null=True,
                    ),
                ),
                ("conditioned_floor_area", models.FloatField(db_column="fDSCFArea", null=True)),
                ("total_real_leakage", models.FloatField(db_column="fDSDLeakRTo", null=True)),
                (
                    "total_real_leakage_unit",
                    models.IntegerField(
                        choices=[
                            (1, "CFM @ 50 Pascals"),
                            (2, "CFM @ 25 Pascals"),
                            (3, "ACH @ 50 Pascals"),
                            (4, "Natural ACH"),
                            (5, "Eff. Leakage Area (in\xb2)"),
                            (6, "ELA/100 sf shell"),
                            (7, "Thermal Efficiency (%)"),
                            (9, "Specific Leakage Area"),
                            (10, "CFM per Std 152"),
                            (11, "CFM25 / CFA"),
                            (12, "CFM25 / CFMfan"),
                        ],
                        db_column="nDSDLeakRUN",
                        null=True,
                    ),
                ),
                (
                    "leakage_test_exemption",
                    models.BooleanField(db_column="nDSDLeakTEx", default=False),
                ),
                (
                    "duct_leakage_input_type",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Measured"), (1, "Threshold"), (2, "Qualitative Default")],
                        db_column="nDSInpType",
                        null=True,
                    ),
                ),
                (
                    "duct_leakage_leakage_to_outside_type",
                    models.IntegerField(
                        blank=True,
                        choices=[(2, "Total Leakage"), (3, "Supply and Return Leakage")],
                        db_column="nDSLtOType",
                        null=True,
                    ),
                ),
                ("iecc_test_exemption", models.BooleanField(null=True, db_column="nDSIECCEx")),
                ("resnet_test_exemption", models.BooleanField(null=True, db_column="nDSRESNETEx")),
                (
                    "energy_star_test_exemption",
                    models.BooleanField(null=True, db_column="nDSESTAREx"),
                ),
                (
                    "field_test_leakage_to_outside",
                    models.FloatField(blank=True, db_column="fDSTestLtO", null=True),
                ),
                (
                    "field_test_total_duct_leakage",
                    models.FloatField(blank=True, db_column="fDSTestDL", null=True),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Economic",
            fields=[
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                (
                    "_source_economic_number",
                    models.IntegerField(db_column="lECECNo", primary_key=True, serialize=False),
                ),
                ("_cost_rate_number", models.IntegerField(db_column="lECCRNo")),
                (
                    "installed_cost_of_improvements",
                    models.FloatField(db_column="fECImpCst", null=True),
                ),
                (
                    "cost_weighted_life_of_measure",
                    models.FloatField(db_column="fECWtLife", null=True),
                ),
                ("mortgage_term", models.FloatField(db_column="nECMorTerm", null=True)),
                ("mortgage_rate", models.FloatField(db_column="fECMorRate", null=True)),
                ("present_value", models.FloatField(db_column="fECPVF", null=True)),
                (
                    "expected_annual_energy_savings",
                    models.FloatField(db_column="fECSavTot", null=True),
                ),
                (
                    "expected_annual_maintenance_costs",
                    models.FloatField(db_column="fECMaint", null=True),
                ),
                ("expected_annual_savings", models.FloatField(db_column="fECNetSav", null=True)),
                (
                    "increased_annual_mortgage_costs",
                    models.FloatField(db_column="fECMorCst", null=True),
                ),
                ("present_value_of_savings", models.FloatField(db_column="fECPVSav", null=True)),
                (
                    "improvement_raking_criteria",
                    models.IntegerField(
                        choices=[
                            (1, "Rank by SIR"),
                            (2, "Rank by Net Present Value"),
                            (3, "Rank by Simple Payback"),
                            (4, "Rank by Rating"),
                            (5, "Rank by Saving"),
                        ],
                        db_column="nECRankCr",
                        null=True,
                    ),
                ),
                ("improvement_ranking_cutoff", models.FloatField(db_column="fECCutoff", null=True)),
                ("maximum_limit", models.FloatField(db_column="fECMaxLim", null=True)),
                (
                    "interacts_with_measures",
                    models.BooleanField(db_column="nECMeasInt", default=False),
                ),
                (
                    "cost_rate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.CostRate"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EconomicParameters",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("rating_number", models.CharField(blank=True, db_column="sRateNo", max_length=93)),
                ("baseline", models.IntegerField(db_column="nFSBaseline", null=True)),
                (
                    "baseline_file",
                    models.CharField(db_column="sFSBldgName", max_length=255, null=True),
                ),
                ("improvement_cost", models.FloatField(db_column="fEPImpCost", null=True)),
                ("improvement_life", models.FloatField(db_column="fEPImpLife", null=True)),
                ("mortgage_rate", models.FloatField(db_column="fEPMortRat", null=True)),
                ("mortgate_period", models.FloatField(db_column="fEPMortPer", null=True)),
                ("down_payment", models.FloatField(db_column="fEPDownPay", null=True)),
                ("appraisal_value", models.FloatField(db_column="fEPAppVal", null=True)),
                ("inflation", models.FloatField(db_column="fEPInf", null=True)),
                ("discount_rate", models.FloatField(db_column="fEPDisRate", null=True)),
                ("energy_inflation", models.FloatField(db_column="fEPEnInf", null=True)),
                ("analysis_period", models.FloatField(db_column="fEPAnalPer", null=True)),
                ("ImpLifeD", models.BooleanField(null=True, db_column="nEPImpLifeD")),
                ("mortgage_rate_default", models.BooleanField(null=True, db_column="nEPMortRatD")),
                (
                    "mortgage_period_default",
                    models.BooleanField(null=True, db_column="nEPMortPerD"),
                ),
                ("down_payment_default", models.BooleanField(null=True, db_column="nEPDownPayD")),
                ("inflation_default", models.BooleanField(null=True, db_column="nEPInfD")),
                ("discount_rate_default", models.BooleanField(null=True, db_column="nEPDisRateD")),
                ("energy_inflation_default", models.BooleanField(null=True, db_column="nEPEnInfD")),
                (
                    "analysis_period_default",
                    models.BooleanField(null=True, db_column="nEPAnalPerD"),
                ),
                ("use_doe_methodology", models.BooleanField(null=True, db_column="NEPDOECalc")),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ENERGYSTAR",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "_result_number",
                    models.IntegerField(db_column="lBldgRunNo", verbose_name="Key to building run"),
                ),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="SRATENO", max_length=93, null=True),
                ),
                (
                    "passes_energy_star_v2",
                    models.BooleanField(
                        null=True,
                        db_column="BESTARV2",
                        default=False,
                        verbose_name="Passes ENERGY STAR v2.0",
                    ),
                ),
                (
                    "passes_energy_star_v2p5",
                    models.BooleanField(
                        null=True,
                        db_column="BESTARV25",
                        default=False,
                        verbose_name="Passes ENERGY STAR v2.5",
                    ),
                ),
                (
                    "energy_star_v2p5_pv_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV25HERSPV",
                        null=True,
                        verbose_name="ENERGY STAR v2.5 photo voltaic adjusted HERS score",
                    ),
                ),
                (
                    "energy_star_v2p5_hers_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV25HERS",
                        null=True,
                        verbose_name="ENERGY STAR v2.5 Reference Design HERS score",
                    ),
                ),
                (
                    "energy_star_v2p5_hers_saf_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV25HERSSA",
                        null=True,
                        verbose_name="ENERGY STAR v2.5 size adjustment factor adjusted HERS score",
                    ),
                ),
                (
                    "energy_star_v2p5_hers_saf",
                    models.FloatField(
                        blank=True,
                        db_column="FV25SZADJF",
                        null=True,
                        verbose_name="ENERGY STAR v2.5 size adjustment factor",
                    ),
                ),
                (
                    "passes_energy_star_v3",
                    models.BooleanField(
                        null=True,
                        db_column="BESTARV3",
                        default=False,
                        verbose_name="Passes ENERGY STAR v3.0",
                    ),
                ),
                (
                    "energy_star_v3_pv_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV3HERSPV",
                        null=True,
                        verbose_name="ENERGY STAR v3.0 photo voltaic adjusted HERS score",
                    ),
                ),
                (
                    "energy_star_v3_hers_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV3HERS",
                        null=True,
                        verbose_name="ENERGY STAR v3.0 Reference Design HERS score",
                    ),
                ),
                (
                    "energy_star_v3_hers_saf_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV3HERSSA",
                        null=True,
                        verbose_name="ENERGY STAR v3.0 size adjustment factor adjusted HERS score",
                    ),
                ),
                (
                    "energy_star_v3_hers_saf",
                    models.FloatField(
                        blank=True,
                        db_column="FV3SZADJF",
                        null=True,
                        verbose_name="ENERGY STAR v3.0 size adjustment factor",
                    ),
                ),
                (
                    "passes_energy_star_v3_hi",
                    models.BooleanField(
                        null=True,
                        db_column="BESTARV3HI",
                        default=False,
                        verbose_name="Passes ENERGY STAR v3.0 Hawaii, Guam",
                    ),
                ),
                (
                    "energy_star_v3_hi_pv_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV3HIHERSPV",
                        null=True,
                        verbose_name="ENERGY STAR v3.0 Hawaii, Guam photo voltaic adjusted HERS score",
                    ),
                ),
                (
                    "energy_star_v3_hi_hers_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV3HIHERS",
                        null=True,
                        verbose_name="ENERGY STAR v3.0 Hawaii, Guam Reference Design HERS score",
                    ),
                ),
                (
                    "energy_star_v3_hi_hers_saf_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV3HIHERSSA",
                        null=True,
                        verbose_name="ENERGY STAR v3.0 Hawaii, Guam size adjustment factor adjusted HERS score",
                    ),
                ),
                (
                    "energy_star_v3_hi_hers_saf",
                    models.FloatField(
                        blank=True,
                        db_column="FV3HISZADJF",
                        null=True,
                        verbose_name="ENERGY STAR v3.0 Hawaii, Guam size adjustment factor",
                    ),
                ),
                (
                    "passes_energy_star_v3p1",
                    models.BooleanField(
                        null=True,
                        db_column="BESTARV31",
                        default=False,
                        verbose_name="Passes ENERGY STAR v3.1",
                    ),
                ),
                (
                    "energy_star_v3p1_pv_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV31HERSPV",
                        null=True,
                        verbose_name="ENERGY STAR v3.1 photo voltaic adjusted HERS score",
                    ),
                ),
                (
                    "energy_star_v3p1_hers_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV31HERS",
                        null=True,
                        verbose_name="ENERGY STAR v3.1 Reference Design HERS score",
                    ),
                ),
                (
                    "energy_star_v3p1_hers_saf_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV31HERSSA",
                        null=True,
                        verbose_name="ENERGY STAR v3.1 size adjustment factor adjusted HERS score",
                    ),
                ),
                (
                    "energy_star_v3p1_hers_saf",
                    models.FloatField(
                        blank=True,
                        db_column="FV31SZADJF",
                        null=True,
                        verbose_name="ENERGY STAR v3.1 size adjustment factor",
                    ),
                ),
                (
                    "passes_energy_star_v3p2",
                    models.BooleanField(
                        null=True,
                        db_column="BESTARV32W",
                        default=False,
                        verbose_name="Passes ENERGY STAR v3.2 Washington",
                    ),
                ),
                (
                    "energy_star_v3p2_pv_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV32WHERSPV",
                        null=True,
                        verbose_name="ENERGY STAR v3.2 Washington photo voltaic adjusted HERS score",
                    ),
                ),
                (
                    "energy_star_v3p2_whers_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV32WHERS",
                        null=True,
                        verbose_name="ENERGY STAR v3.2 Washington Reference Design HERS score",
                    ),
                ),
                (
                    "energy_star_v3p2_whers_saf_score",
                    models.FloatField(
                        blank=True,
                        db_column="FV32WHERSSA",
                        null=True,
                        verbose_name="ENERGY STAR v3.2 Washington size adjustment factor adjusted HERS score",
                    ),
                ),
                (
                    "energy_star_v3p2_whers_saf",
                    models.FloatField(
                        blank=True,
                        db_column="FV32WSZADJF",
                        null=True,
                        verbose_name="ENERGY STAR v3.2 Washington size adjustment factor",
                    ),
                ),
                (
                    "passes_doe_zero",
                    models.BooleanField(
                        null=True,
                        db_column="BDOEPROGRAM",
                        default=False,
                        verbose_name="Passes DOE Zero Energy Rated Home",
                    ),
                ),
                (
                    "doe_zero_hers_score",
                    models.FloatField(
                        blank=True,
                        db_column="FDOEHERS",
                        null=True,
                        verbose_name="DOE Zero Energy Rated Home Reference Design HERS score",
                    ),
                ),
                (
                    "doe_zero_saf_score",
                    models.FloatField(
                        blank=True,
                        db_column="FDOEHERSSA",
                        null=True,
                        verbose_name="DOE Zero Energy Rated Home size adjustment factor adjusted HERS score",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EnergyStarRequirements",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                (
                    "has_energystar_heating_cooling_equip",
                    models.BooleanField(db_column="nESEQUIP", default=False),
                ),
                ("has_energystar_windows", models.IntegerField(db_column="nESWINDOW")),
                ("has_energystar_fixtures", models.IntegerField(db_column="nESFIXTURE")),
                ("has_energystar_appliances", models.IntegerField(db_column="nESAPPLI")),
                ("has_energystar_ceiling_fans", models.IntegerField(db_column="nESCEILFAN")),
                ("has_energystar_ventilation_fans", models.IntegerField(db_column="nESVENTFAN")),
                (
                    "air_barrier_overall",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nABOVERALL",
                    ),
                ),
                (
                    "air_barrier_garage_band_joist",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nABGRBDJST",
                    ),
                ),
                (
                    "air_barrier_attic_eve_baffles",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nABEVBFFLS",
                    ),
                ),
                (
                    "air_barrier_slab_edge_insulation",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nABSLABEDG",
                    ),
                ),
                (
                    "air_barrier_all_band_joist",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nABBANDJST",
                    ),
                ),
                (
                    "air_barrier_min_thermal_barrier",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nABTHMLBRG",
                    ),
                ),
                (
                    "wall_behind_shower_tub",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nWLSHWRTUB",
                    ),
                ),
                (
                    "wall_behind_fireplace",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nWLFIREPLC",
                    ),
                ),
                (
                    "wall_behind_insulation_attic_slopes",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nWLATCSLPE",
                    ),
                ),
                (
                    "wall_attic_knee",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nWLATCKNEE",
                    ),
                ),
                (
                    "wall_skylight_shaft",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nWLSKYSHFT",
                    ),
                ),
                (
                    "wall_ajoining_porch",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nWLPORCHRF",
                    ),
                ),
                (
                    "wall_staircase",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nWLSTRCASE",
                    ),
                ),
                (
                    "wall_double",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nWLDOUBLE",
                    ),
                ),
                (
                    "floor_above_garage",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nFLRABVGRG",
                    ),
                ),
                (
                    "floor_cantilevered",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nFLRCANTIL",
                    ),
                ),
                (
                    "shafts_duct",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nSHAFTDUCT",
                    ),
                ),
                (
                    "shafts_piping",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nSHAFTPIPE",
                    ),
                ),
                (
                    "shafts_flue",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nSHAFTFLUE",
                    ),
                ),
                (
                    "dropped_ceiling",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nATCACCPNL",
                    ),
                ),
                (
                    "fire_wall",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nATDDSTAIR",
                    ),
                ),
                (
                    "stair_framing",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nRFDRPSOFT",
                    ),
                ),
                (
                    "recess_lights",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nRFRECSLGT",
                    ),
                ),
                (
                    "house_fan",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nRFHOMEFAN",
                    ),
                ),
                (
                    "common_wall",
                    models.IntegerField(
                        choices=[
                            (0, "Verificaton Needed"),
                            (1, "Rater"),
                            (2, "Builder"),
                            (3, "NA"),
                            (4, "Needs Corrections"),
                        ],
                        db_column="nCWLBTWNUT",
                    ),
                ),
                ("rating_number", models.CharField(blank=True, db_column="SRATENO", max_length=93)),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FloorType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_floor_type_number", models.IntegerField(db_column="lFTFTNo")),
                ("joist_width", models.FloatField(db_column="fFTJstWdt", null=True)),
                ("joist_height", models.FloatField(db_column="fFTJstHgt", null=True)),
                ("joist_spacing", models.FloatField(db_column="fFTJstSpg", null=True)),
                ("continuous_insulation", models.FloatField(db_column="fFTContIns", null=True)),
                ("cavity_insulation", models.FloatField(db_column="fFTCvtyIns", null=True)),
                (
                    "cavity_insulation_thickness",
                    models.FloatField(db_column="fFTCInsThk", null=True),
                ),
                (
                    "floor_covering",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Carpet"),
                            (2, "Tile"),
                            (3, "Hardwood"),
                            (4, "Vinyl"),
                        ],
                        db_column="nFTCovType",
                        null=True,
                    ),
                ),
                ("_composite_type_number", models.IntegerField(db_column="nFTTCTNo")),
                ("quick_fill", models.BooleanField(db_column="bFTQFValid", default=False)),
                (
                    "quick_fill_type",
                    models.IntegerField(
                        choices=[(0, "Site Built"), (2, "Mobile Home")], db_column="NFTQFTYPE"
                    ),
                ),
                ("floor_width", models.FloatField(db_column="FFTFLRWID", null=True)),
                ("outrigger_width", models.FloatField(db_column="FFTOUTWID", null=True)),
                ("batt_thickness", models.FloatField(db_column="FFTBATTHK", null=True)),
                ("batt_r_value", models.FloatField(db_column="FFTBATRVL", null=True)),
                ("blanket_thickness", models.FloatField(db_column="FFTBLKTHK", null=True)),
                ("blanket_r_value", models.FloatField(db_column="FFTBLKRVL", null=True)),
                (
                    "center_insulation_config",
                    models.IntegerField(
                        choices=[
                            (1, "Batt in cavities"),
                            (2, "Blanket, compressed"),
                            (3, "Blanket uncompressed"),
                            (4, "Batt with compressed blanket"),
                            (5, "Batt with uncompressed blanket"),
                        ],
                        db_column="NFTCNTINS",
                    ),
                ),
                (
                    "outrigger_insulation_config",
                    models.IntegerField(
                        choices=[
                            (1, "Batt in cavities"),
                            (2, "Blanket, compressed"),
                            (3, "Blanket uncompressed"),
                            (4, "Batt with compressed blanket"),
                            (5, "Batt with uncompressed blanket"),
                        ],
                        db_column="NFTOUTINS",
                    ),
                ),
                ("framing_factor", models.FloatField(db_column="FFTFF", null=True)),
                (
                    "default_framing_factors",
                    models.BooleanField(db_column="BFTDFLTFF", default=False),
                ),
                ("note", models.CharField(blank=True, db_column="SFTNOTE", max_length=765)),
                (
                    "insulation_grade",
                    models.IntegerField(
                        choices=[(1, "I"), (2, "II"), (3, "III")], db_column="nFTInsGrde", null=True
                    ),
                ),
                (
                    "composite_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.CompositeType"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Florida",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("type", models.IntegerField(blank=True, db_column="nType")),
                ("worst_case", models.IntegerField(blank=True, db_column="nWorstCase")),
                ("permit_off", models.CharField(blank=True, db_column="sPermitOff", max_length=51)),
                (
                    "permit_number",
                    models.CharField(blank=True, db_column="sPermitNo", max_length=51),
                ),
                (
                    "juristdiction",
                    models.CharField(blank=True, db_column="sJurisdctn", max_length=51),
                ),
                ("rating_number", models.CharField(blank=True, db_column="sRateNo", max_length=31)),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FoundationWall",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szFWName", max_length=93)),
                ("length", models.FloatField(db_column="fFWLength", null=True)),
                ("height", models.FloatField(db_column="fFWHeight", null=True)),
                ("depth_below_grade", models.FloatField(db_column="fFWDBGrade", null=True)),
                ("depth_above_grade", models.FloatField(db_column="fFWHAGrade", null=True)),
                (
                    "location",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (201, "Between conditioned space and ambient/ground"),
                            (202, "Between conditioned space and garage/ground"),
                            (203, "Between conditioned space and open crawl space/ground"),
                            (205, "Between conditioned space and unconditioned basement/ground"),
                            (206, "Between conditioned space and enclosed crawl space/ground"),
                            (207, "Between unconditioned basement and ambient/ground"),
                            (208, "Between unconditioned basement and garage/ground"),
                            (209, "Between unconditioned basement and open crawl space/ground"),
                            (210, "Between enclosed crawl space and ambient/ground"),
                            (211, "Between enclosed crawl space and garage/ground"),
                            (212, "Between enclosed crawl space and open crawl space/ground"),
                            (214, "Between conditioned crawl space and ambient/ground"),
                            (215, "Between conditioned crawl space and garage/ground"),
                            (216, "Between conditioned crawl space and open crawl space/ground"),
                            (213, "Between cond and another cond unit (adiabatic)"),
                        ],
                        db_column="nFWLoc",
                    ),
                ),
                ("_foundation_wall_number", models.IntegerField(db_column="lFWFWTNo")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sFWRateNo", max_length=93),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FoundationWallType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_foundation_wall_number", models.IntegerField(db_column="lFWTWTNo")),
                ("name", models.CharField(db_column="sFWTType", max_length=93)),
                (
                    "wall_type",
                    models.IntegerField(
                        choices=[
                            (11, "Solid concrete or stone"),
                            (12, "Block: uninsulated cores"),
                            (13, "Block: foam cores"),
                            (14, "Block: vermiculite cores"),
                            (15, "All weather wood"),
                            (16, "Double brick"),
                            (17, "MH wood skirting"),
                            (18, "MH Vinyl Skirting"),
                            (19, "MH aluminum skirting"),
                        ],
                        db_column="nFWTType",
                        null=True,
                    ),
                ),
                (
                    "stud_type",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, 'Wood, 2x4, 12" o.c.'),
                            (2, 'Wood, 2x4, 16" o.c.'),
                            (7, 'Wood, 2x4, 24" o.c.'),
                            (3, 'Wood, 2x6, 16" o.c.'),
                            (4, 'Wood, 2x6, 24" o.c.'),
                            (5, 'Steel, 2x4, 16" o.c.'),
                            (6, 'Steel, 2x6, 24" o.c.'),
                        ],
                        db_column="nFWTStdTyp",
                        null=True,
                    ),
                ),
                ("masonary_thickness", models.FloatField(db_column="fFWTMasThk", null=True)),
                ("exterior_insulation", models.FloatField(db_column="fFWTExtIns", null=True)),
                ("exterior_insulation_top", models.FloatField(db_column="fFWTExInsT", null=True)),
                (
                    "exterior_insulation_bottom",
                    models.FloatField(db_column="fFWTExInsB", null=True),
                ),
                (
                    "exterior_insulation_top_type",
                    models.FloatField(
                        choices=[
                            (1, "from top of wall"),
                            (2, "from bottom of wall"),
                            (3, "above grade"),
                            (4, "below grade"),
                        ],
                        db_column="nFWTEInTTp",
                        null=True,
                    ),
                ),
                (
                    "exterior_insulation_bottom_type",
                    models.FloatField(
                        choices=[
                            (1, "from top of wall"),
                            (2, "from bottom of wall"),
                            (3, "above grade"),
                            (4, "below grade"),
                        ],
                        db_column="nFWTEInBTp",
                        null=True,
                    ),
                ),
                ("rigid_insulation_r_value", models.FloatField(db_column="fFWTInInCt", null=True)),
                (
                    "batt_or_blown_insulation_r_value",
                    models.FloatField(db_column="fFWTInInFC", null=True),
                ),
                ("interior_insulation_top", models.FloatField(db_column="fFWTInInsT", null=True)),
                (
                    "interior_insulation_bottom",
                    models.FloatField(db_column="fFWTInInsB", null=True),
                ),
                (
                    "interior_insulation_top_type",
                    models.FloatField(
                        choices=[
                            (1, "from top of wall"),
                            (2, "from bottom of wall"),
                            (3, "above grade"),
                            (4, "below grade"),
                        ],
                        db_column="nFWTIInTTp",
                        null=True,
                    ),
                ),
                (
                    "interior_insulation_bottom_type",
                    models.FloatField(
                        choices=[
                            (1, "from top of wall"),
                            (2, "from bottom of wall"),
                            (3, "above grade"),
                            (4, "below grade"),
                        ],
                        db_column="nFWTIInBTp",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.CharField(blank=True, db_column="sFWTNote", max_length=765, null=True),
                ),
                (
                    "insulation_grade",
                    models.IntegerField(
                        choices=[(1, "I"), (2, "II"), (3, "III")], db_column="nFWTInsGrd", null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FrameFloor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szFFName", max_length=93)),
                ("area", models.FloatField(db_column="fFFArea", null=True)),
                (
                    "location",
                    models.FloatField(
                        choices=[
                            (0, "None"),
                            (201, "Between conditioned space and ambient conditions"),
                            (202, "Between conditioned space and garage"),
                            (203, "Between conditioned space and open crawl space"),
                            (205, "Between conditioned space and unconditioned basement"),
                            (206, "Between conditioned space and enclosed crawl space"),
                            (213, "Between conditioned space and another (adiabatic)"),
                        ],
                        db_column="nFFLoc",
                        max_length=2,
                    ),
                ),
                ("u_value", models.FloatField(db_column="fFFUo")),
                ("_floor_type_number", models.IntegerField(db_column="lFFFlorTNo")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sFFRateNo", max_length=93),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
            options={
                "ordering": ("simulation", "area"),
            },
        ),
        migrations.CreateModel(
            name="FuelSummary",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                (
                    "fuel_type",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="nFSFuel",
                        null=True,
                    ),
                ),
                (
                    "fuel_units",
                    models.IntegerField(
                        choices=[
                            (0, "MMBtu"),
                            (1, "kWh"),
                            (2, "Gallons"),
                            (3, "CCF"),
                            (4, "Therms"),
                            (5, "Cords"),
                            (6, "MCF"),
                            (7, "kW_Htg"),
                            (8, "kW_Clg"),
                        ],
                        db_column="nFSUnits",
                        null=True,
                    ),
                ),
                ("heating_consumption", models.FloatField(db_column="fFSHCons", null=True)),
                ("cooling_consumption", models.FloatField(db_column="fFSCCons", null=True)),
                ("hot_water_consumption", models.FloatField(db_column="fFSWCons", null=True)),
                (
                    "lights_and_appliances_consumption",
                    models.FloatField(db_column="fFSLACons", null=True),
                ),
                ("total_cost", models.FloatField(db_column="fFSTotCost", null=True)),
                ("rating_number", models.CharField(db_column="sRateNo", max_length=93)),
                ("photo_voltaics_consumption", models.FloatField(db_column="fFSPVCons", null=True)),
                ("total_consumption", models.FloatField(db_column="fFSTotCons", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="GeneralMechanicalEquipment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_source_equipment_number", models.IntegerField(db_column="lEIEINo")),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("heating_set_point", models.FloatField(db_column="fEIHSetPnt", null=True)),
                ("cooling_set_point", models.FloatField(db_column="fEICSetPnt", null=True)),
                ("setback_thermostat", models.BooleanField(db_column="nEISBThrm", default=False)),
                ("setup_thermostat", models.BooleanField(db_column="nEISUThrm", default=False)),
                (
                    "vent_type",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Whole House Fan"),
                            (2, "No Ventilation"),
                            (3, "Natural Ventilation"),
                        ],
                        db_column="nEIVentTyp",
                        null=True,
                    ),
                ),
                (
                    "setback_schedule",
                    models.FloatField(blank=True, db_column="nEISBSch", null=True),
                ),
                (
                    "setback_temperature",
                    models.FloatField(blank=True, db_column="fEISBTemp", null=True),
                ),
                (
                    "duct_location_1",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Open crawl/raised floor"),
                            (2, "Enclosed crawl space"),
                            (3, "Conditioned crawl space"),
                            (4, "Unconditioned basement"),
                            (5, "Conditioned basement"),
                            (6, "Attic, under insulation"),
                            (7, "Attic, exposed"),
                            (8, "Conditioned space"),
                            (10, "Garage"),
                            (14, "Floor cavity over garage"),
                            (13, "Exterior wall"),
                            (9, "Wall with no top plate Garage"),
                            (15, "Under slab floor"),
                            (12, "Mobile home belly"),
                            (0, "None"),
                        ],
                        db_column="nEIDuctLoc",
                        null=True,
                    ),
                ),
                (
                    "duct_location_2",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Open crawl/raised floor"),
                            (2, "Enclosed crawl space"),
                            (3, "Conditioned crawl space"),
                            (4, "Unconditioned basement"),
                            (5, "Conditioned basement"),
                            (6, "Attic, under insulation"),
                            (7, "Attic, exposed"),
                            (8, "Conditioned space"),
                            (10, "Garage"),
                            (14, "Floor cavity over garage"),
                            (13, "Exterior wall"),
                            (9, "Wall with no top plate Garage"),
                            (15, "Under slab floor"),
                            (12, "Mobile home belly"),
                            (0, "None"),
                        ],
                        db_column="nEIDuctLo2",
                        null=True,
                    ),
                ),
                (
                    "duct_location_3",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Open crawl/raised floor"),
                            (2, "Enclosed crawl space"),
                            (3, "Conditioned crawl space"),
                            (4, "Unconditioned basement"),
                            (5, "Conditioned basement"),
                            (6, "Attic, under insulation"),
                            (7, "Attic, exposed"),
                            (8, "Conditioned space"),
                            (10, "Garage"),
                            (14, "Floor cavity over garage"),
                            (13, "Exterior wall"),
                            (9, "Wall with no top plate Garage"),
                            (15, "Under slab floor"),
                            (12, "Mobile home belly"),
                            (0, "None"),
                        ],
                        db_column="nEIDuctLo3",
                        null=True,
                    ),
                ),
                (
                    "duct_insulation_1",
                    models.FloatField(blank=True, db_column="fEIDuctIns", null=True),
                ),
                (
                    "duct_insulation_2",
                    models.FloatField(blank=True, db_column="fEIDuctIn2", null=True),
                ),
                (
                    "duct_insulation_3",
                    models.FloatField(blank=True, db_column="fEIDuctIn3", null=True),
                ),
                (
                    "duct_supply_vs_total_supply_area_1",
                    models.FloatField(blank=True, db_column="fEIDuctSup", null=True),
                ),
                (
                    "duct_supply_vs_total_supply_area_2",
                    models.FloatField(blank=True, db_column="fEIDuctSu2", null=True),
                ),
                (
                    "duct_supply_vs_total_supply_area_3",
                    models.FloatField(blank=True, db_column="fEIDuctSu3", null=True),
                ),
                (
                    "duct_return_vs_total_return_area_1",
                    models.FloatField(blank=True, db_column="fEIDuctRet", null=True),
                ),
                (
                    "duct_return_vs_total_return_area_2",
                    models.FloatField(blank=True, db_column="fEIDuctRe2", null=True),
                ),
                (
                    "duct_return_vs_total_return_area_3",
                    models.FloatField(blank=True, db_column="fEIDuctRe3", null=True),
                ),
                (
                    "qualitative_duct_leakage_estimate",
                    models.IntegerField(
                        choices=[
                            (1, "Leaky, uninsulated"),
                            (2, "RESNET/HERS default"),
                            (3, "Proposed reduced leakage"),
                        ],
                        db_column="nEIDuctLk",
                        null=True,
                    ),
                ),
                (
                    "quantitative_duct_leakage_units",
                    models.IntegerField(
                        choices=[
                            (1, "CFM @ 50 Pascals"),
                            (2, "CFM @ 25 Pascals"),
                            (3, "ACH @ 50 Pascals"),
                            (4, "Natural ACH"),
                            (5, "Eff. Leakage Area (in\xb2)"),
                            (6, "ELA/100 sf shell"),
                            (7, "Thermal Efficiency (%)"),
                            (9, "Specific Leakage Area"),
                            (10, "CFM per Std 152"),
                            (11, "CFM25 / CFA"),
                            (12, "CFM25 / CFMfan"),
                        ],
                        db_column="nEIDTUNITS",
                        null=True,
                    ),
                ),
                ("quantitative_duct_leakage", models.FloatField(db_column="fEIDTLKAGE", null=True)),
                (
                    "using_qualitative",
                    models.IntegerField(
                        choices=[(1, "Qualitative"), (2, "Quantitative")],
                        db_column="nEIDTQUAL",
                        null=True,
                    ),
                ),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sEIRateNo", max_length=93),
                ),
                (
                    "capacity_weighting_heating",
                    models.BooleanField(
                        null=True,
                        db_column="nEIHTGCAPWT",
                        verbose_name="Capacity Weighting Heating",
                    ),
                ),
                (
                    "capacity_weighting_cooling",
                    models.BooleanField(
                        null=True,
                        db_column="nEICLGCAPWT",
                        verbose_name="Capacity Weighting Cooling",
                    ),
                ),
                (
                    "capacity_weighting_hot_water",
                    models.BooleanField(
                        null=True,
                        db_column="nEIDHWCAPWT",
                        verbose_name="Capacity Weighting Hot Water",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GroundSourceHeatPump",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                (
                    "_source_ground_source_heat_pump_number",
                    models.IntegerField(db_column="lGSTGSTNo"),
                ),
                ("name", models.CharField(blank=True, db_column="sGSTType", max_length=93)),
                (
                    "type",
                    models.IntegerField(
                        choices=[(1, "ARI 330/Closed Loop"), (2, "ARI 325/Open Loop")],
                        db_column="nGSTType",
                        null=True,
                    ),
                ),
                (
                    "fuel_type",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="nGSTFuel",
                        null=True,
                    ),
                ),
                (
                    "heating_coefficient_of_performance_70f",
                    models.FloatField(db_column="fGSTHCOP70", null=True),
                ),
                (
                    "heating_coefficient_of_performance_50f",
                    models.FloatField(db_column="fGSTHCOP50", null=True),
                ),
                (
                    "cooling_energy_efficiency_ratio_70f",
                    models.FloatField(db_column="fGSTCEER70", null=True),
                ),
                (
                    "cooling_energy_efficiency_ratio_50f",
                    models.FloatField(db_column="fGSTCEER50", null=True),
                ),
                ("heating_capacity_70f", models.FloatField(db_column="fGSTHCap70", null=True)),
                ("heating_capacity_50f", models.FloatField(db_column="fGSTHCap50", null=True)),
                ("cooling_capacity_70f", models.FloatField(db_column="fGSTCCap70", null=True)),
                ("cooling_capacity_50f", models.FloatField(db_column="fGSTCCap50", null=True)),
                (
                    "heating_coefficient_of_performance_32f",
                    models.FloatField(db_column="fGSTHCOP32", null=True),
                ),
                ("heating_capacity_32f", models.FloatField(db_column="fGSTHCap32", null=True)),
                (
                    "cooling_energy_efficiency_ratio_77f",
                    models.FloatField(db_column="fGSTCEER77", null=True),
                ),
                ("cooling_capacity_77f", models.FloatField(db_column="fGSTCCap77", null=True)),
                ("sensible_heat_fraction", models.FloatField(db_column="fGSTSHF", null=True)),
                ("fan_defaults", models.BooleanField(db_column="nGSTFanDef", default=False)),
                ("is_desuperheater", models.BooleanField(db_column="nGSTDSHtr", default=False)),
                ("note", models.CharField(blank=True, db_column="sGSTNote", max_length=765)),
                (
                    "backup_capacity",
                    models.FloatField(blank=True, db_column="fGSTBKUPCP", null=True),
                ),
                ("fan_power", models.FloatField(blank=True, db_column="fGSTFanPwr", null=True)),
                ("pump_energy", models.FloatField(blank=True, db_column="fGSTPmpEng", null=True)),
                (
                    "pump_energy_type",
                    models.IntegerField(
                        choices=[(0, "kWh/yr"), (1, "Watts")], db_column="nGSTPmpEnT", null=True
                    ),
                ),
                (
                    "distribution_type",
                    models.IntegerField(
                        choices=[(0, "Hydronic"), (1, "Air Distribution")],
                        db_column="nGSTDbType",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ("simulation", "-heating_capacity_50f", "-cooling_capacity_50f"),
            },
        ),
        migrations.CreateModel(
            name="GroundSourceHeatPumpWell",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_ground_source_heat_pump", models.IntegerField(db_column="lGWellNo")),
                (
                    "well_type",
                    models.IntegerField(
                        choices=[(0, "Vertical"), (1, "Horizontal")],
                        db_column="nGWType",
                        verbose_name="Well Type",
                    ),
                ),
                (
                    "number_of_wells",
                    models.FloatField(
                        db_column="fGWNoWells", verbose_name="Number of Wells or Trenches"
                    ),
                ),
                (
                    "well_depth_trench_length",
                    models.FloatField(
                        db_column="fGWDepth", verbose_name="Well Depth or Trench Length"
                    ),
                ),
                (
                    "loop_flow_gpm",
                    models.FloatField(db_column="fGWLpFlow", verbose_name="Loop Flow (GPM)"),
                ),
                (
                    "rating_number",
                    models.CharField(
                        blank=True, db_column="sRateNo", max_length=93, verbose_name=""
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Heater",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_heater_number", models.FloatField(db_column="lHETHETNo")),
                ("name", models.CharField(blank=True, db_column="sHETType", max_length=93)),
                (
                    "type",
                    models.IntegerField(
                        choices=[
                            (1, "Fuel-fired air distribution"),
                            (2, "Fuel-fired hydronic distribution"),
                            (3, "Fuel-fired unit heater"),
                            (9, "Fuel-fired unvented unit heater"),
                            (4, "Electric baseboard or radiant"),
                            (5, "Electric air distribution"),
                            (8, "Electric hydronic distribution"),
                            (6, "Air-source heat pump"),
                            (7, "Ground-source heat pump"),
                            (0, "None"),
                        ],
                        db_column="nHETSystTp",
                        null=True,
                    ),
                ),
                (
                    "fuel_type",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="nHETFuelTp",
                        null=True,
                    ),
                ),
                ("output_capacity", models.FloatField(db_column="fHETRatCap", null=True)),
                ("efficiency", models.FloatField(db_column="fHETEff", null=True)),
                (
                    "efficiency_unit",
                    models.IntegerField(
                        choices=[(1, "AFUE"), (2, "% EFF"), (3, "HSPF"), (4, "COP")],
                        db_column="nHETEffUTp",
                        null=True,
                    ),
                ),
                ("is_desuperheater", models.BooleanField(db_column="nHETDSHtr", default=False)),
                (
                    "fan_control_type",
                    models.IntegerField(
                        choices=[(1, "Single Speed"), (2, "Two Speed"), (3, "Variable Speed")],
                        db_column="nHETFnCtrl",
                        null=True,
                    ),
                ),
                ("fan_defaults", models.BooleanField(db_column="nHETFnDef", default=False)),
                ("fan_high_speed", models.FloatField(db_column="fHETFnHSpd", null=True)),
                ("fan_low_speed", models.FloatField(db_column="fHETFnLSpd", null=True)),
                (
                    "note",
                    models.CharField(blank=True, db_column="sHETNote", max_length=765, null=True),
                ),
                (
                    "auxiliary_electric",
                    models.FloatField(blank=True, db_column="fHETAuxElc", null=True),
                ),
                (
                    "auxiliary_electric_type",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Eae"), (2, "kWh/yr"), (3, "Watts")],
                        db_column="nHETAuxETp",
                        null=True,
                    ),
                ),
                ("auxiliary_defaults", models.BooleanField(db_column="nHETAuxDef", default=False)),
                ("fan_power", models.FloatField(db_column="fHETFanPwr", null=True)),
                ("pump_energy", models.FloatField(db_column="fHETPmpEng", null=True)),
                (
                    "pump_energy_units",
                    models.IntegerField(
                        choices=[(0, "kWh/yr"), (1, "Watts")], db_column="nHETPmpTyp", null=True
                    ),
                ),
                ("rated_output_capacity_17f", models.FloatField(db_column="fHETRCap17", null=True)),
            ],
            options={
                "ordering": ("simulation", "-output_capacity"),
            },
        ),
        migrations.CreateModel(
            name="HeatPath",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_composite_type_number", models.FloatField(db_column="lHPTCTTNo")),
                ("name", models.CharField(blank=True, db_column="sHPPthName", max_length=93)),
                ("area", models.FloatField(db_column="fHPPthArea", null=True)),
                ("r_value", models.FloatField(db_column="fHPPthRVal", null=True)),
                (
                    "layer_1_r_value",
                    models.FloatField(blank=True, db_column="fHPLRval1", null=True),
                ),
                (
                    "layer_2_r_value",
                    models.FloatField(blank=True, db_column="fHPLRval2", null=True),
                ),
                (
                    "layer_3_r_value",
                    models.FloatField(blank=True, db_column="fHPLRval3", null=True),
                ),
                (
                    "layer_4_r_value",
                    models.FloatField(blank=True, db_column="fHPLRval4", null=True),
                ),
                (
                    "layer_5_r_value",
                    models.FloatField(blank=True, db_column="fHPLRval5", null=True),
                ),
                (
                    "layer_6_r_value",
                    models.FloatField(blank=True, db_column="fHPLRval6", null=True),
                ),
                (
                    "layer_7_r_value",
                    models.FloatField(blank=True, db_column="fHPLRval7", null=True),
                ),
                (
                    "layer_8_r_value",
                    models.FloatField(blank=True, db_column="fHPLRval8", null=True),
                ),
                (
                    "composite_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.CompositeType"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HercInfo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("user_set_item_in_herc", models.CharField(db_column="sHIUsrItem", max_length=765)),
                (
                    "criteria_or_recommendation",
                    models.CharField(db_column="sHIITMTYPE", max_length=765),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HERS",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "_result_number",
                    models.IntegerField(db_column="lBldgRunNo", verbose_name="Key to building run"),
                ),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="SRATENO", max_length=93, null=True),
                ),
                (
                    "score",
                    models.FloatField(
                        blank=True, db_column="fHERSScor", null=True, verbose_name="Hers Rating"
                    ),
                ),
                (
                    "total_cost",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSCost",
                        null=True,
                        verbose_name="Hers Rating Cost",
                    ),
                ),
                (
                    "stars",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSStars",
                        null=True,
                        verbose_name="Hers Star Rating",
                    ),
                ),
                (
                    "reference_heating_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSRHCn",
                        null=True,
                        verbose_name="HERS Reference Heating Consumption",
                    ),
                ),
                (
                    "reference_cooling_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSRCCn",
                        null=True,
                        verbose_name="HERS Reference Cooling Consumption",
                    ),
                ),
                (
                    "reference_hot_water_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSRDCN",
                        null=True,
                        verbose_name="HERS Reference Hot Water Consumption",
                    ),
                ),
                (
                    "reference_lights_appliance_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSRLACn",
                        null=True,
                        verbose_name="HERS Reference Lights and Appliance Consumption",
                    ),
                ),
                (
                    "reference_photo_voltaic_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSRPVCn",
                        null=True,
                        verbose_name="HERS Reference Photo Voltaic Consumption",
                    ),
                ),
                (
                    "reference_total_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSRTCn",
                        null=True,
                        verbose_name="HERS Reference Total Consumption",
                    ),
                ),
                (
                    "designed_heating_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSDHCn",
                        null=True,
                        verbose_name="HERS Designed Heating Consumption",
                    ),
                ),
                (
                    "designed_cooling_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSDCCn",
                        null=True,
                        verbose_name="HERS Designed Cooling Consumption",
                    ),
                ),
                (
                    "designed_hot_water_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSDDCN",
                        null=True,
                        verbose_name="HERS Designed Hot Water Consumption",
                    ),
                ),
                (
                    "designed_lights_appliance_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSDLACn",
                        null=True,
                        verbose_name="HERS Designed Lights and Appliance Consumption",
                    ),
                ),
                (
                    "designed_photo_voltaic_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSDPVCn",
                        null=True,
                        verbose_name="HERS Designed Photo Voltaic Consumption",
                    ),
                ),
                (
                    "designed_total_consumption",
                    models.FloatField(
                        blank=True,
                        db_column="fHERSDTCn",
                        null=True,
                        verbose_name="HERS Designed Total Consumption",
                    ),
                ),
                (
                    "ny_score",
                    models.FloatField(
                        blank=True, db_column="FNYHERS", null=True, verbose_name="NY HERS Score"
                    ),
                ),
                (
                    "passes_2005_epact_tax_credit",
                    models.BooleanField(
                        null=True,
                        db_column="bTaxCredit",
                        default=False,
                        verbose_name="2005 EPAct Tax Credit",
                    ),
                ),
                (
                    "hers_130_savings",
                    models.FloatField(
                        blank=True, db_column="FHERS130", null=True, verbose_name="HERS 130 savings"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalSimulation",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("_source_result_number", models.IntegerField(db_column="lBldgRunNo")),
                (
                    "simulation_date",
                    models.DateTimeField(
                        db_column="sBRDate",
                        default=datetime.datetime(1900, 1, 1, 0, 0),
                        max_length=93,
                        null=True,
                    ),
                ),
                (
                    "version",
                    models.CharField(blank=True, db_column="sBRProgVer", max_length=120, null=True),
                ),
                ("flavor", models.CharField(blank=True, db_column="SBRProgFlvr", max_length=255)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sBRRateNo", max_length=93, null=True),
                ),
                (
                    "building_run_flag",
                    models.CharField(blank=True, db_column="sBRFlag", max_length=90, null=True),
                ),
                (
                    "export_type",
                    models.IntegerField(
                        choices=[
                            (1, "Standard Building"),
                            (2, "IA Base Building"),
                            (3, "IA Improved Building"),
                            (4, "UDRH As Is Building"),
                            (5, "UDRH Reference Building"),
                            (6, "ASHRAE Code Reference Building"),
                            (7, "ASHRAE Code Design Building"),
                            (8, "HERS Code Reference Building"),
                            (9, "HERS Code Design Building"),
                            (10, "1998 IECC Code Reference Building"),
                            (11, "1998 IECC Code Design Building"),
                            (12, "2000 IECC Code Reference Building"),
                            (13, "2000 IECC Code Design Building"),
                            (14, "2001 IECC Code Reference Building"),
                            (15, "2001 IECC Code Design Building"),
                            (16, "2003 IECC Code Reference Building"),
                            (17, "2003 IECC Code Design Building"),
                            (18, "2004 IECC Code Reference Building"),
                            (19, "2004 IECC Code Design Building"),
                            (20, "ECC of NY Code Reference Building"),
                            (21, "ECC of NY Code Design Building"),
                            (22, "ECC of NV Code Reference Building"),
                            (23, "ECC of NV Code Design Building"),
                            (24, "1992 MEC Code Reference Building"),
                            (25, "1992 MEC Code Design Building"),
                            (26, "1993 MEC Code Reference Building"),
                            (27, "1993 MEC Code Design Building"),
                            (28, "1995 MEC Code Reference Building"),
                            (29, "1995 MEC Code Design Building"),
                            (30, "2006 IECC Code Reference Building"),
                            (31, "2006 IECC Code Design Building"),
                            (32, "2009 IECC Code Reference Building"),
                            (33, "2009 IECC Code Design Building"),
                            (34, "ENERGY STAR V2 Code Reference Building"),
                            (35, "ENERGY STAR V2 Code Design Building"),
                            (36, "ENERGY STAR V2.5 Code Reference Building"),
                            (37, "ENERGY STAR V2.5 Code Design Building"),
                            (38, "FE PA New Homes Qualification Reference Building"),
                            (39, "FE PA New Homes Qualification Design Building"),
                            (40, "FE PA Savings Reference Building"),
                            (41, "FE PA Savings Design Building"),
                            (42, "2012 IECC Code Reference Building"),
                            (43, "2012 IECC Code Design Building"),
                            (44, "ENERGY STAR V3 Code Reference Building"),
                            (45, "ENERGY STAR V3 Code Design Building"),
                            (46, "FE OH New Homes 2006 IECC Code Reference Building"),
                            (47, "FE OH New Homes 2006 IECC Code Design Building"),
                            (48, "FE OH Savings Reference Building"),
                            (49, "FE OH Savings Design Building"),
                            (50, "EnerGuide Package J Reference Building"),
                            (51, "EnerGuide Package J Design Building"),
                            (52, "DOE Challenge Reference Building"),
                            (53, "DOE Challenge Design Building"),
                        ],
                        db_column="lBRExpTpe",
                        default=0,
                    ),
                ),
                (
                    "number_of_runs",
                    models.IntegerField(blank=True, db_column="nInstance", null=True),
                ),
                (
                    "udrh_filename",
                    models.CharField(blank=True, db_column="sBRUdrName", max_length=255, null=True),
                ),
                (
                    "udrh_checksum",
                    models.CharField(blank=True, db_column="sBRUdrChk", max_length=255, null=True),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_date", models.DateTimeField()),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="company.Company",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "remrate_user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="remrate.RemRateUser",
                    ),
                ),
            ],
            options={
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
                "verbose_name": "historical REM/Rate Data Set",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HotWaterDistribution",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                (
                    "_source_hot_water_distribution_number",
                    models.IntegerField(db_column="lDhwDistNo"),
                ),
                ("rating_number", models.CharField(blank=True, db_column="sRateNo", max_length=93)),
                (
                    "fix_low_flow",
                    models.BooleanField(null=True, db_column="bFixLowFlow", default=False),
                ),
                (
                    "hot_water_pipe_insulation",
                    models.BooleanField(null=True, db_column="bDhwPipeIns", default=False),
                ),
                (
                    "recirculation_type",
                    models.IntegerField(
                        choices=[
                            (1, "None (standard systems"),
                            (2, "Timer or Uncontroled"),
                            (3, "Temperature control"),
                            (4, "Demand (presence sensor)"),
                            (5, "Demand (manual"),
                        ],
                        db_column="nRecircType",
                        null=True,
                    ),
                ),
                ("max_fix_distribution", models.FloatField(db_column="fMaxFixDist", null=True)),
                (
                    "max_supply_return_distribution",
                    models.FloatField(db_column="fSupRetDist", null=True),
                ),
                ("hot_water_pipe_length", models.FloatField(db_column="fPipeLenDhw", null=True)),
                (
                    "hot_water_pipe_recirculation_length",
                    models.FloatField(db_column="fPipeLenRec", null=True),
                ),
                (
                    "hot_water_recirculation_pump_power",
                    models.FloatField(db_column="fRecPumpPwr", null=True),
                ),
                (
                    "has_recirculation_pump",
                    models.BooleanField(null=True, db_column="bHasDwhr", default=False),
                ),
                (
                    "hot_water_recirculation_pump_efficiency",
                    models.FloatField(db_column="fDwhrEff", null=True),
                ),
                (
                    "hot_water_recirculation_pre_heat_cold",
                    models.BooleanField(null=True, db_column="bDwhrPrehtC"),
                ),
                (
                    "hot_water_recirculation_pre_heat_hot",
                    models.BooleanField(null=True, db_column="bDwhrPrehtH"),
                ),
                ("number_shower_heads", models.IntegerField(db_column="nShwrheads", null=True)),
                (
                    "number_recirculation_shower_heads",
                    models.IntegerField(db_column="nShwrToDwhr", null=True),
                ),
                ("flow_control_efficiency", models.IntegerField(db_column="fHwCtrlEff", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="HotWaterHeater",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_hot_water_heater_number", models.FloatField(db_column="lDETDETNo")),
                ("name", models.CharField(blank=True, db_column="sDETType", max_length=93)),
                (
                    "type",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Conventional"),
                            (3, "Instant water heater"),
                            (4, "Heat pump"),
                            (5, "Ground source heat pump"),
                            (21, "Integrated"),
                        ],
                        db_column="nDETSystTp",
                        null=True,
                    ),
                ),
                (
                    "fuel_type",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="nDETFuelTp",
                        null=True,
                    ),
                ),
                ("tank_size", models.FloatField(db_column="fDETTnkVol", null=True)),
                (
                    "extra_tank_insulation_r_value",
                    models.FloatField(blank=True, db_column="fDETTnkIns", null=True),
                ),
                ("energy_factor", models.FloatField(db_column="fDETEnergy", null=True)),
                ("recovery_efficiency", models.FloatField(db_column="fDETRecEff", null=True)),
                (
                    "note",
                    models.CharField(blank=True, db_column="sDETNote", max_length=765, null=True),
                ),
            ],
            options={
                "ordering": ("simulation", "-tank_size"),
            },
        ),
        migrations.CreateModel(
            name="IECC",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="SRATENO", max_length=93, null=True),
                ),
                ("iecc98_reference_heating_consumption", models.FloatField(db_column="f98IERHCn")),
                ("iecc98_reference_cooling_consumption", models.FloatField(db_column="f98IERCCn")),
                (
                    "iecc98_reference_hot_water_consumption",
                    models.FloatField(db_column="f98IERDCN"),
                ),
                (
                    "iecc98_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f98IERLACn"),
                ),
                (
                    "iecc98_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f98IERPVCn"),
                ),
                ("iecc98_reference_total_consumption", models.FloatField(db_column="f98IERTCn")),
                ("iecc98_designed_heating_consumption", models.FloatField(db_column="f98IEDHCn")),
                ("iecc98_designed_cooling_consumption", models.FloatField(db_column="f98IEDCCn")),
                ("iecc98_designed_hot_water_consumption", models.FloatField(db_column="f98IEDDCN")),
                (
                    "iecc98_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f98IEDLACn"),
                ),
                (
                    "iecc98_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f98IEDPVCn"),
                ),
                ("iecc98_designed_total_consumption", models.FloatField(db_column="f98IEDTCn")),
                (
                    "meets_iecc98_consumption_compliance",
                    models.BooleanField(db_column="b98IECC", default=False),
                ),
                ("iecc98_reference_overall_u0", models.FloatField(db_column="f98IECCRUo")),
                ("iecc98_designed_overall_u0", models.FloatField(db_column="f98IECCDUo")),
                (
                    "passes_iecc98_ducts_overall_u0",
                    models.BooleanField(db_column="b98IECCDuP", default=False),
                ),
                (
                    "passes_iecc98_overall_u0",
                    models.BooleanField(db_column="b98IECCuoP", default=False),
                ),
                ("iecc00_reference_heating_consumption", models.FloatField(db_column="f00IERHCn")),
                ("iecc00_reference_cooling_consumption", models.FloatField(db_column="f00IERCCn")),
                (
                    "iecc00_reference_hot_water_consumption",
                    models.FloatField(db_column="f00IERDCN"),
                ),
                (
                    "iecc00_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f00IERLACn"),
                ),
                (
                    "iecc00_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f00IERPVCn"),
                ),
                ("iecc00_reference_total_consumption", models.FloatField(db_column="f00IERTCn")),
                ("iecc00_designed_heating_consumption", models.FloatField(db_column="f00IEDHCn")),
                ("iecc00_designed_cooling_consumption", models.FloatField(db_column="f00IEDCCn")),
                ("iecc00_designed_hot_water_consumption", models.FloatField(db_column="f00IEDDCN")),
                (
                    "iecc00_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f00IEDLACn"),
                ),
                (
                    "iecc00_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f00IEDPVCn"),
                ),
                ("iecc00_designed_total_consumption", models.FloatField(db_column="f00IEDTCn")),
                (
                    "meets_iecc00_consumption_compliance",
                    models.BooleanField(db_column="b00IECC", default=False),
                ),
                ("iecc00_reference_overall_u0", models.FloatField(db_column="f00IECCRUo")),
                ("iecc00_designed_overall_u0", models.FloatField(db_column="f00IECCDUo")),
                (
                    "passes_iecc00_ducts_overall_u0",
                    models.BooleanField(db_column="b00IECCDuP", default=False),
                ),
                (
                    "passes_iecc00_overall_u0",
                    models.BooleanField(db_column="b00IECCuoP", default=False),
                ),
                ("iecc01_reference_heating_consumption", models.FloatField(db_column="f01IERHCn")),
                ("iecc01_reference_cooling_consumption", models.FloatField(db_column="f01IERCCn")),
                (
                    "iecc01_reference_hot_water_consumption",
                    models.FloatField(db_column="f01IERDCN"),
                ),
                (
                    "iecc01_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f01IERLACn"),
                ),
                (
                    "iecc01_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f01IERPVCn"),
                ),
                ("iecc01_reference_total_consumption", models.FloatField(db_column="f01IERTCn")),
                ("iecc01_designed_heating_consumption", models.FloatField(db_column="f01IEDHCn")),
                ("iecc01_designed_cooling_consumption", models.FloatField(db_column="f01IEDCCn")),
                ("iecc01_designed_hot_water_consumption", models.FloatField(db_column="f01IEDDCN")),
                (
                    "iecc01_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f01IEDLACn"),
                ),
                (
                    "iecc01_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f01IEDPVCn"),
                ),
                ("iecc01_designed_total_consumption", models.FloatField(db_column="f01IEDTCn")),
                (
                    "meets_iecc01_consumption_compliance",
                    models.BooleanField(db_column="b01IECC", default=False),
                ),
                ("iecc01_reference_overall_u0", models.FloatField(db_column="f01IECCRUo")),
                ("iecc01_designed_overall_u0", models.FloatField(db_column="f01IECCDUo")),
                (
                    "passes_iecc01_ducts_overall_u0",
                    models.BooleanField(db_column="b01IECCDuP", default=False),
                ),
                (
                    "passes_iecc01_overall_u0",
                    models.BooleanField(db_column="b01IECCuoP", default=False),
                ),
                ("iecc03_reference_heating_consumption", models.FloatField(db_column="f03IERHCn")),
                ("iecc03_reference_cooling_consumption", models.FloatField(db_column="f03IERCCn")),
                (
                    "iecc03_reference_hot_water_consumption",
                    models.FloatField(db_column="f03IERDCN"),
                ),
                (
                    "iecc03_reference_lights_appliance_consumption",
                    models.FloatField(db_column="f03IERLACn"),
                ),
                (
                    "iecc03_reference_photo_voltaic_consumption",
                    models.FloatField(db_column="f03IERPVCn"),
                ),
                ("iecc03_reference_total_consumption", models.FloatField(db_column="f03IERTCn")),
                ("iecc03_designed_heating_consumption", models.FloatField(db_column="f03IEDHCn")),
                ("iecc03_designed_cooling_consumption", models.FloatField(db_column="f03IEDCCn")),
                ("iecc03_designed_hot_water_consumption", models.FloatField(db_column="f03IEDDCN")),
                (
                    "iecc03_designed_lights_appliance_consumption",
                    models.FloatField(db_column="f03IEDLACn"),
                ),
                (
                    "iecc03_designed_photo_voltaic_consumption",
                    models.FloatField(db_column="f03IEDPVCn"),
                ),
                ("iecc03_designed_total_consumption", models.FloatField(db_column="f03IEDTCn")),
                (
                    "passes_iecc03_consumption_compliance",
                    models.BooleanField(db_column="b03IECC", default=False),
                ),
                ("iecc03_reference_overall_u0", models.FloatField(db_column="f03IECCRUo")),
                ("iecc03_designed_overall_u0", models.FloatField(db_column="f03IECCDUo")),
                (
                    "passes_iecc03_ducts_overall_u0",
                    models.BooleanField(db_column="b03IECCDuP", default=False),
                ),
                (
                    "passes_iecc03_overall_u0",
                    models.BooleanField(db_column="b03IECCuoP", default=False),
                ),
                ("iecc04_reference_heating_cost", models.FloatField(db_column="f04IERHCT")),
                ("iecc04_reference_cooling_cost", models.FloatField(db_column="f04IERCCT")),
                ("iecc04_reference_hot_water_cost", models.FloatField(db_column="f04IERDCT")),
                (
                    "iecc04_reference_lights_appliance_cost",
                    models.FloatField(db_column="f04IERLACT"),
                ),
                ("iecc04_reference_photo_voltaic_cost", models.FloatField(db_column="f04IERPVCT")),
                ("iecc04_reference_service_cost", models.FloatField(db_column="f04IERSVCT")),
                ("iecc04_reference_total_cost", models.FloatField(db_column="f04IERTCT")),
                ("iecc04_designed_heating_cost", models.FloatField(db_column="f04IEDHCT")),
                ("iecc04_designed_cooling_cost", models.FloatField(db_column="f04IEDCCT")),
                ("iecc04_designed_hot_water_cost", models.FloatField(db_column="f04IEDDCT")),
                (
                    "iecc04_designed_lights_appliance_cost",
                    models.FloatField(db_column="f04IEDLACT"),
                ),
                ("iecc04_designed_photo_voltaic_cost", models.FloatField(db_column="f04IEDPVCT")),
                ("iecc04_designed_service_cost", models.FloatField(db_column="f04IEDSVCT")),
                ("iecc04_designed_total_cost", models.FloatField(db_column="f04IEDTCT")),
                (
                    "passes_iecc04_consumption_compliance",
                    models.BooleanField(db_column="b04IECC", default=False),
                ),
                ("iecc04_reference_overall_u0", models.FloatField(db_column="f04IECCRUA")),
                ("iecc04_designed_overall_u0", models.FloatField(db_column="f04IECCDUA")),
                (
                    "passes_iecc04_ducts_overall_u0",
                    models.BooleanField(db_column="b04IECCDuP", default=False),
                ),
                (
                    "passes_iecc04_overall_ua_compliance",
                    models.BooleanField(db_column="b04IECCuAP", default=False),
                ),
                ("passes_iecc04_code", models.BooleanField(db_column="bPass04IECC", default=False)),
                ("iecc06_reference_heating_cost", models.FloatField(db_column="f06IERHCT")),
                ("iecc06_reference_cooling_cost", models.FloatField(db_column="f06IERCCT")),
                ("iecc06_reference_hot_water_cost", models.FloatField(db_column="f06IERDCT")),
                (
                    "iecc06_reference_lights_appliance_cost",
                    models.FloatField(db_column="f06IERLACT"),
                ),
                ("iecc06_reference_photo_voltaic_cost", models.FloatField(db_column="f06IERPVCT")),
                ("iecc06_reference_service_cost", models.FloatField(db_column="f06IERSVCT")),
                ("iecc06_reference_total_cost", models.FloatField(db_column="f06IERTCT")),
                ("iecc06_designed_heating_cost", models.FloatField(db_column="f06IEDHCT")),
                ("iecc06_designed_cooling_cost", models.FloatField(db_column="f06IEDCCT")),
                ("iecc06_designed_hot_water_cost", models.FloatField(db_column="f06IEDDCT")),
                (
                    "iecc06_designed_lights_appliance_cost",
                    models.FloatField(db_column="f06IEDLACT"),
                ),
                ("iecc06_designed_photo_voltaic_cost", models.FloatField(db_column="f06IEDPVCT")),
                ("iecc06_designed_service_cost", models.FloatField(db_column="f06IEDSVCT")),
                ("iecc06_designed_total_cost", models.FloatField(db_column="f06IEDTCT")),
                (
                    "passes_iecc06_consumption_compliance",
                    models.BooleanField(db_column="b06IECC", default=False),
                ),
                ("iecc06_reference_overall_u0", models.FloatField(db_column="f06IECCRUA")),
                ("iecc06_designed_overall_u0", models.FloatField(db_column="f06IECCDUA")),
                (
                    "passes_iecc06_ducts_overall_u0",
                    models.BooleanField(db_column="b06IECCDuP", default=False),
                ),
                (
                    "passes_iecc06_overall_ua_compliance",
                    models.BooleanField(db_column="b06IECCuAP", default=False),
                ),
                ("passes_iecc06_code", models.BooleanField(db_column="bPass06IECC", default=False)),
                ("iecc09_reference_heating_cost", models.FloatField(db_column="f09IERHCT")),
                ("iecc09_reference_cooling_cost", models.FloatField(db_column="f09IERCCT")),
                ("iecc09_reference_hot_water_cost", models.FloatField(db_column="f09IERDCT")),
                (
                    "iecc09_reference_lights_appliance_cost",
                    models.FloatField(db_column="f09IERLACT"),
                ),
                ("iecc09_reference_photo_voltaic_cost", models.FloatField(db_column="f09IERPVCT")),
                ("iecc09_reference_service_cost", models.FloatField(db_column="f09IERSVCT")),
                ("iecc09_reference_total_cost", models.FloatField(db_column="f09IERTCT")),
                ("iecc09_designed_heating_cost", models.FloatField(db_column="f09IEDHCT")),
                ("iecc09_designed_cooling_cost", models.FloatField(db_column="f09IEDCCT")),
                ("iecc09_designed_hot_water_cost", models.FloatField(db_column="f09IEDDCT")),
                (
                    "iecc09_designed_lights_appliance_cost",
                    models.FloatField(db_column="f09IEDLACT"),
                ),
                ("iecc09_designed_photo_voltaic_cost", models.FloatField(db_column="f09IEDPVCT")),
                ("iecc09_designed_service_cost", models.FloatField(db_column="f09IEDSVCT")),
                ("iecc09_designed_total_cost", models.FloatField(db_column="f09IEDTCT")),
                (
                    "passes_iecc09_consumption_compliance",
                    models.BooleanField(db_column="b09IECC", default=False),
                ),
                ("iecc09_reference_overall_u0", models.FloatField(db_column="f09IECCRUA")),
                ("iecc09_designed_overall_u0", models.FloatField(db_column="f09IECCDUA")),
                (
                    "passes_iecc09_ducts_overall_u0",
                    models.BooleanField(db_column="b09IECCDuP", default=False),
                ),
                (
                    "passes_iecc09_overall_ua_compliance",
                    models.BooleanField(db_column="b09IECCuAP", default=False),
                ),
                ("passes_iecc09_code", models.BooleanField(db_column="bPass09IECC", default=False)),
                (
                    "iecc12_reference_heating_cost",
                    models.FloatField(blank=True, db_column="f12IERHCT", null=True),
                ),
                (
                    "iecc12_reference_cooling_cost",
                    models.FloatField(blank=True, db_column="f12IERCCT", null=True),
                ),
                (
                    "iecc12_reference_hot_water_cost",
                    models.FloatField(blank=True, db_column="f12IERDCT", null=True),
                ),
                (
                    "iecc12_reference_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="f12IERLACT", null=True),
                ),
                (
                    "iecc12_reference_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="f12IERPVCT", null=True),
                ),
                (
                    "iecc12_reference_service_cost",
                    models.FloatField(blank=True, db_column="f12IERSVCT", null=True),
                ),
                (
                    "iecc12_reference_total_cost",
                    models.FloatField(blank=True, db_column="f12IERTCT", null=True),
                ),
                (
                    "iecc12_designed_heating_cost",
                    models.FloatField(blank=True, db_column="f12IEDHCT", null=True),
                ),
                (
                    "iecc12_designed_cooling_cost",
                    models.FloatField(blank=True, db_column="f12IEDCCT", null=True),
                ),
                (
                    "iecc12_designed_hot_water_cost",
                    models.FloatField(blank=True, db_column="f12IEDDCT", null=True),
                ),
                (
                    "iecc12_designed_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="f12IEDLACT", null=True),
                ),
                (
                    "iecc12_designed_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="f12IEDPVCT", null=True),
                ),
                (
                    "iecc12_designed_service_cost",
                    models.FloatField(blank=True, db_column="f12IEDSVCT", null=True),
                ),
                (
                    "iecc12_designed_total_cost",
                    models.FloatField(blank=True, db_column="f12IEDTCT", null=True),
                ),
                (
                    "passes_iecc12_consumption_compliance",
                    models.BooleanField(null=True, db_column="b12IECC", default=False),
                ),
                (
                    "iecc12_reference_overall_u0",
                    models.FloatField(blank=True, db_column="f12IECCRUA", null=True),
                ),
                (
                    "iecc12_designed_overall_u0",
                    models.FloatField(blank=True, db_column="f12IECCDUA", null=True),
                ),
                (
                    "passes_iecc12_ducts_overall_u0",
                    models.BooleanField(null=True, db_column="b12IECCDuP", default=False),
                ),
                (
                    "passes_iecc12_overall_ua_compliance",
                    models.BooleanField(null=True, db_column="b12IECCuAP", default=False),
                ),
                (
                    "passes_iecc12_code",
                    models.BooleanField(null=True, db_column="bPass12IECC", default=False),
                ),
                (
                    "iecc15_reference_heating_cost",
                    models.FloatField(blank=True, db_column="f15IERHCT", null=True),
                ),
                (
                    "iecc15_reference_cooling_cost",
                    models.FloatField(blank=True, db_column="f15IERCCT", null=True),
                ),
                (
                    "iecc15_reference_hot_water_cost",
                    models.FloatField(blank=True, db_column="f15IERDCT", null=True),
                ),
                (
                    "iecc15_reference_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="f15IERLACT", null=True),
                ),
                (
                    "iecc15_reference_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="f15IERPVCT", null=True),
                ),
                (
                    "iecc15_reference_service_cost",
                    models.FloatField(blank=True, db_column="f15IERSVCT", null=True),
                ),
                (
                    "iecc15_reference_total_cost",
                    models.FloatField(blank=True, db_column="f15IERTCT", null=True),
                ),
                (
                    "iecc15_designed_heating_cost",
                    models.FloatField(blank=True, db_column="f15IEDHCT", null=True),
                ),
                (
                    "iecc15_designed_cooling_cost",
                    models.FloatField(blank=True, db_column="f15IEDCCT", null=True),
                ),
                (
                    "iecc15_designed_hot_water_cost",
                    models.FloatField(blank=True, db_column="f15IEDDCT", null=True),
                ),
                (
                    "iecc15_designed_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="f15IEDLACT", null=True),
                ),
                (
                    "iecc15_designed_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="f15IEDPVCT", null=True),
                ),
                (
                    "iecc15_designed_service_cost",
                    models.FloatField(blank=True, db_column="f15IEDSVCT", null=True),
                ),
                (
                    "iecc15_designed_total_cost",
                    models.FloatField(blank=True, db_column="f15IEDTCT", null=True),
                ),
                (
                    "passes_iecc15_consumption_compliance",
                    models.BooleanField(null=True, db_column="b15IECC"),
                ),
                (
                    "iecc15_reference_overall_u0",
                    models.FloatField(blank=True, db_column="f15IECCRUA", null=True),
                ),
                (
                    "iecc15_designed_overall_u0",
                    models.FloatField(blank=True, db_column="f15IECCDUA", null=True),
                ),
                (
                    "passes_iecc15_ducts_overall_u0",
                    models.BooleanField(null=True, db_column="b15IECCDuP"),
                ),
                (
                    "passes_iecc15_overall_ua_compliance",
                    models.BooleanField(null=True, db_column="b15IECCuAP"),
                ),
                (
                    "passes_iecc15_code",
                    models.BooleanField(null=True, db_column="bPass15IECC", default=False),
                ),
                (
                    "iecc18_reference_heating_cost",
                    models.FloatField(blank=True, db_column="f18IERHCT", null=True),
                ),
                (
                    "iecc18_reference_cooling_cost",
                    models.FloatField(blank=True, db_column="f18IERCCT", null=True),
                ),
                (
                    "iecc18_reference_hot_water_cost",
                    models.FloatField(blank=True, db_column="f18IERDCT", null=True),
                ),
                (
                    "iecc18_reference_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="f18IERLACT", null=True),
                ),
                (
                    "iecc18_reference_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="f18IERPVCT", null=True),
                ),
                (
                    "iecc18_reference_service_cost",
                    models.FloatField(blank=True, db_column="f18IERSVCT", null=True),
                ),
                (
                    "iecc18_reference_total_cost",
                    models.FloatField(blank=True, db_column="f18IERTCT", null=True),
                ),
                (
                    "iecc18_designed_heating_cost",
                    models.FloatField(blank=True, db_column="f18IEDHCT", null=True),
                ),
                (
                    "iecc18_designed_cooling_cost",
                    models.FloatField(blank=True, db_column="f18IEDCCT", null=True),
                ),
                (
                    "iecc18_designed_hot_water_cost",
                    models.FloatField(blank=True, db_column="f18IEDDCT", null=True),
                ),
                (
                    "iecc18_designed_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="f18IEDLACT", null=True),
                ),
                (
                    "iecc18_designed_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="f18IEDPVCT", null=True),
                ),
                (
                    "iecc18_designed_service_cost",
                    models.FloatField(blank=True, db_column="f18IEDSVCT", null=True),
                ),
                (
                    "iecc18_designed_total_cost",
                    models.FloatField(blank=True, db_column="f18IEDTCT", null=True),
                ),
                (
                    "passes_iecc18_consumption_compliance",
                    models.BooleanField(null=True, db_column="b18IECC"),
                ),
                (
                    "iecc18_reference_overall_u0",
                    models.FloatField(blank=True, db_column="f18IECCRUA", null=True),
                ),
                (
                    "iecc18_designed_overall_u0",
                    models.FloatField(blank=True, db_column="f18IECCDUA", null=True),
                ),
                (
                    "passes_iecc18_ducts_overall_u0",
                    models.BooleanField(null=True, db_column="b18IECCDuP"),
                ),
                (
                    "passes_iecc18_overall_ua_compliance",
                    models.BooleanField(null=True, db_column="b18IECCuAP"),
                ),
                (
                    "passes_iecc18_code",
                    models.BooleanField(null=True, db_column="bPass18IECC", default=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Infiltration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("_source_infiltration_number", models.IntegerField(db_column="lINInfilNo")),
                (
                    "testing_type",
                    models.IntegerField(
                        choices=[
                            (1, "User estimate"),
                            (3, "Tracer gas test"),
                            (4, "Blower door test"),
                            (5, "Code default"),
                            (6, "Threshold"),
                        ],
                        db_column="nINType",
                        null=True,
                    ),
                ),
                ("heating_value", models.FloatField(db_column="fINHeatVal", null=True)),
                ("cooling_value", models.FloatField(db_column="fINCoolVal", null=True)),
                (
                    "units",
                    models.IntegerField(
                        choices=[
                            (1, "CFM @ 50 Pascals"),
                            (2, "CFM @ 25 Pascals"),
                            (3, "ACH @ 50 Pascals"),
                            (4, "Natural ACH"),
                            (5, "Eff. Leakage Area (in\xb2)"),
                            (6, "ELA/100 sf shell"),
                            (7, "Thermal Efficiency (%)"),
                            (9, "Specific Leakage Area"),
                            (10, "CFM per Std 152"),
                            (11, "CFM25 / CFA"),
                            (12, "CFM25 / CFMfan"),
                        ],
                        db_column="nINWHInfUn",
                        null=True,
                    ),
                ),
                (
                    "mechanical_vent_type",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Balanced"),
                            (2, "Exhaust Only"),
                            (3, "Supply Only"),
                            (4, "Air Cycler"),
                        ],
                        db_column="lINMVType",
                        null=True,
                    ),
                ),
                ("mechanical_vent_cfm", models.FloatField(db_column="fINMVRate", null=True)),
                (
                    "sensible_recovery_efficiency",
                    models.FloatField(db_column="fINSREff", null=True),
                ),
                ("hours_per_day", models.IntegerField(db_column="nINHrsDay", null=True)),
                ("mechanical_vent_power", models.FloatField(db_column="fINMVFan", null=True)),
                ("rating_number", models.CharField(db_column="sINRateNo", max_length=93)),
                ("total_recovery_efficiency", models.FloatField(db_column="fINTREff", null=True)),
                (
                    "verification_type",
                    models.FloatField(
                        choices=[(1, "Visually Inspected"), (2, "Tested")],
                        db_column="nINVerify",
                        null=True,
                    ),
                ),
                ("shelter_class", models.IntegerField(db_column="nINShltrCl", null=True)),
                (
                    "cooling_type",
                    models.IntegerField(
                        choices=[
                            (1, "Whole House Fan"),
                            (2, "No Ventilation"),
                            (3, "Natural Ventilation"),
                        ],
                        db_column="nINClgVent",
                        null=True,
                    ),
                ),
                ("ecm_fan_motor", models.IntegerField(db_column="nINFanMotor", null=True)),
                (
                    "annual_filtration",
                    models.FloatField(blank=True, db_column="FINANNUAL", null=True),
                ),
                (
                    "field_tested_value",
                    models.FloatField(blank=True, db_column="FINTESTED", null=True),
                ),
                (
                    "building",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InstalledEquipment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_source_equipment_number", models.IntegerField(db_column="lEIEINo")),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                (
                    "_heater_number",
                    models.IntegerField(blank=True, db_column="lEIHETNo", null=True),
                ),
                (
                    "_ground_source_heat_pump_number",
                    models.IntegerField(blank=True, db_column="lEIGSTNo", null=True),
                ),
                (
                    "_dual_fuel_heat_pump_number",
                    models.IntegerField(blank=True, db_column="lEIDFTNo", null=True),
                ),
                (
                    "_air_conditioner_number",
                    models.IntegerField(blank=True, db_column="lEICLTNo", null=True),
                ),
                (
                    "_hot_water_heater_number",
                    models.IntegerField(blank=True, db_column="lEIDHTNo", null=True),
                ),
                (
                    "_air_source_heat_pump_number",
                    models.IntegerField(blank=True, db_column="lEIASTNO", null=True),
                ),
                (
                    "_integrated_space_water_heater_number",
                    models.IntegerField(blank=True, db_column="lEIHDTNO", null=True),
                ),
                (
                    "system_type",
                    models.IntegerField(
                        choices=[
                            (1, "Space Heating"),
                            (2, "Space Cooling"),
                            (3, "Water Heating"),
                            (4, "Air-Source Heat Pump"),
                            (5, "Ground Source Heat Pump"),
                            (6, "Dual Fuel Heat Pump"),
                            (7, "Integrated Space/Water Heating"),
                        ],
                        db_column="nEISysType",
                        null=True,
                    ),
                ),
                (
                    "performance_adjustment_pct",
                    models.FloatField(blank=True, db_column="fEIPerAdj", null=True),
                ),
                (
                    "location",
                    models.IntegerField(
                        choices=[
                            (1, "Conditioned area"),
                            (6, "Conditioned Crawlspace"),
                            (2, "Uncond bsmnt/enclosed crawl"),
                            (3, "Garage or open crawl space"),
                            (4, "Attic"),
                            (5, "Ambient"),
                            (0, "None"),
                        ],
                        db_column="nEILoc",
                        null=True,
                    ),
                ),
                ("heating_load_served_pct", models.FloatField(db_column="fEIHLdSrv", null=True)),
                (
                    "air_conditioner_load_served_pct",
                    models.FloatField(db_column="fEICLdSrv", null=True),
                ),
                (
                    "hot_water_heater_load_served_pct",
                    models.FloatField(db_column="fEIDLdSrv", null=True),
                ),
                ("qty_installed", models.IntegerField(db_column="nEINoUnits", null=True)),
                (
                    "air_conditioner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="remrate_data.AirConditioner",
                    ),
                ),
                (
                    "air_source_heat_pump",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="remrate_data.AirSourceHeatPump",
                    ),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
                (
                    "dual_fuel_heat_pump",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="remrate_data.DualFuelHeatPump",
                    ),
                ),
                (
                    "ground_source_heat_pump",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="remrate_data.GroundSourceHeatPump",
                    ),
                ),
                (
                    "heater",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="remrate_data.Heater",
                    ),
                ),
                (
                    "hot_water_heater",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="remrate_data.HotWaterHeater",
                    ),
                ),
            ],
            options={
                "ordering": ("simulation", "heater", "air_conditioner", "ground_source_heat_pump"),
            },
        ),
        migrations.CreateModel(
            name="InstalledLightsAndAppliances",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="SLAINAME", max_length=765)),
                (
                    "type",
                    models.IntegerField(
                        choices=[
                            (1, "Light Fixture(s)"),
                            (2, "Plug Load(s)"),
                            (3, "Refrigerator"),
                            (4, "Freezer"),
                            (5, "Dishwasher"),
                            (6, "Microwave"),
                            (7, "Oven/Range"),
                            (8, "Clothes Washer"),
                            (9, "Clothes Dryer"),
                            (10, "Shower/Bath"),
                            (11, "Miscellaneous"),
                            (12, "Fluorescent Fixture(s)"),
                            (13, "Non-Fluorescent Fixture(s)"),
                            (14, "Ceiling Fan(s)"),
                            (15, "Exterior Light Fixture(s)"),
                            (16, "Garage Light Fixture(s)"),
                        ],
                        db_column="NLAITYPE",
                        null=True,
                    ),
                ),
                (
                    "location",
                    models.IntegerField(
                        choices=[
                            (1, "Conditioned area"),
                            (6, "Conditioned Crawlspace"),
                            (2, "Uncond bsmnt/enclosed crawl"),
                            (3, "Garage or open crawl space"),
                            (4, "Attic"),
                            (5, "Ambient"),
                            (0, "None"),
                        ],
                        db_column="NLAILOC",
                        null=True,
                    ),
                ),
                (
                    "fuel_type",
                    models.IntegerField(
                        choices=[
                            (1, "Natural Gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electricity"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="NLAIFUEL",
                        null=True,
                    ),
                ),
                ("energy_use_rate", models.FloatField(db_column="FLAIRATE", null=True)),
                (
                    "energy_use_rate_unit",
                    models.IntegerField(
                        choices=[
                            (1, "kBtuh"),
                            (2, "Watts"),
                            (3, "KW"),
                            (4, "kWh/use"),
                            (5, "Gallons/use"),
                            (6, "kBtu/use"),
                            (7, "MMBtu/use"),
                        ],
                        db_column="NLAIRATEU",
                        null=True,
                    ),
                ),
                ("usage_amount", models.FloatField(db_column="FLAIUSE", null=True)),
                (
                    "usage_amount_unit",
                    models.IntegerField(
                        choices=[
                            (1, "Hours/Day"),
                            (2, "Hours/Week"),
                            (3, "Hours/Month"),
                            (4, "Hours/Year"),
                            (5, "Uses/Day"),
                            (6, "Uses/Week"),
                            (7, "Uses/Month "),
                            (8, "Uses/Year"),
                        ],
                        db_column="NLAIUSEU",
                        null=True,
                    ),
                ),
                ("quantity", models.IntegerField(db_column="NLAIQTY")),
                ("efficiency", models.IntegerField(db_column="NLAIEFF", null=True)),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IntegratedSpaceWaterHeater",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                (
                    "_source_integrated_space_water_heater_number",
                    models.IntegerField(db_column="lHTDHTDNo"),
                ),
                ("name", models.CharField(blank=True, db_column="sHTDType", max_length=93)),
                (
                    "fuel_type",
                    models.FloatField(
                        blank=True,
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="nHTDFuel",
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Combined Appliance"),
                            (2, "Boiler w/tankless coil"),
                            (3, "Hot Water System for space heating"),
                        ],
                        db_column="NHTDSYSTTP",
                        null=True,
                    ),
                ),
                (
                    "distribution_type",
                    models.FloatField(
                        choices=[(1, "Hydronic only"), (2, "Hydronic w/air")],
                        db_column="NHTDDISTTP",
                        null=True,
                    ),
                ),
                ("output_capacity", models.FloatField(db_column="FHTDRATCAP", null=True)),
                ("space_heating_efficiency", models.FloatField(db_column="FHTDSPHTE", null=True)),
                ("water_heating_energy_factor", models.FloatField(db_column="FHTDWHEF", null=True)),
                (
                    "water_heating_recovery_efficiency",
                    models.FloatField(db_column="FHTDWHRE", null=True),
                ),
                ("tank_size", models.FloatField(db_column="FHTDTNKSZ", null=True)),
                ("tank_insulation", models.FloatField(db_column="FHTDTNKIN", null=True)),
                (
                    "fan_control_type",
                    models.IntegerField(
                        choices=[(1, "Single Speed"), (2, "Two Speed"), (3, "Variable Speed")],
                        db_column="nHTDFnCtrl",
                        null=True,
                    ),
                ),
                ("fan_defaults", models.BooleanField(db_column="nHTDFnDef", default=False)),
                ("fan_high_speed", models.FloatField(db_column="fHTDFnHSpd", null=True)),
                ("fan_low_speed", models.FloatField(db_column="fHTDFnLSpd", null=True)),
                ("note", models.CharField(blank=True, db_column="sHTDNote", max_length=765)),
                (
                    "auxiliary_electric",
                    models.FloatField(blank=True, db_column="fHTDAuxElc", null=True),
                ),
                (
                    "auxiliary_electric_type",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "kWh/yr"), (1, "Watts")],
                        db_column="nHTDAuxETp",
                        null=True,
                    ),
                ),
                ("auxiliary_defaults", models.BooleanField(db_column="nHTDAuxDef", default=False)),
            ],
            options={
                "ordering": ("simulation", "-output_capacity"),
            },
        ),
        migrations.CreateModel(
            name="Joist",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo", null=True)),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szRJName", max_length=93)),
                ("area", models.FloatField(db_column="fRJArea", null=True)),
                (
                    "location",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (201, "Between conditioned space and ambient"),
                            (202, "Between conditioned space and garage"),
                            (203, "Between conditioned space and open crawl"),
                            (204, "Between conditioned space and attic"),
                            (205, "Between conditioned space and uncond bsmnt"),
                            (206, "Between conditioned space and enclosed crawl"),
                            (214, "Between conditioned crawl and ambient"),
                            (215, "Between conditioned crawl and garage"),
                            (216, "Between conditioned crawl and open crawl"),
                            (207, "Between unconditioned bsmnt and ambient"),
                            (208, "Between unconditioned bsmnt and garage"),
                            (209, "Between unconditioned bsmnt and open crawl"),
                            (210, "Between enclosed crawl and ambient"),
                            (211, "Between enclosed crawl and garage"),
                            (212, "Between enclosed crawl and open crawl"),
                            (213, "Between cond and another cond unit (adiabatic)"),
                            (217, "Between sealed attic and ambient"),
                        ],
                        db_column="nRJLoc",
                        null=True,
                    ),
                ),
                (
                    "continuous_insulation_r_value",
                    models.FloatField(db_column="fRJCoInsul", null=True),
                ),
                ("cavity_insulation_r_value", models.FloatField(db_column="fRJFrInsul", null=True)),
                ("spacing", models.FloatField(db_column="fRJSpacing", null=True)),
                ("u_value", models.FloatField(db_column="fRJUo", null=True)),
                ("insulation_thickness", models.FloatField(db_column="fRJInsulTh", null=True)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sRJRateNo", max_length=93),
                ),
                (
                    "insulation_grade",
                    models.IntegerField(
                        choices=[(1, "I"), (2, "II"), (3, "III")], db_column="nRJInsGrde", null=True
                    ),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LightsAndAppliance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                (
                    "oven_fuel",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="FLAOVNFUEL",
                        null=True,
                    ),
                ),
                (
                    "clothes_dryer_fuel",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="FLADRYFUEL",
                        null=True,
                    ),
                ),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="SLARATENO", max_length=93),
                ),
                ("default_loads", models.BooleanField(db_column="NLAUSEDEF", default=False)),
                ("refrigerator_kw_yr", models.FloatField(db_column="FLAREFKWH", null=True)),
                ("dishwasher_energy_factor", models.FloatField(db_column="FLADISHWEF", null=True)),
                ("pct_florescent", models.FloatField(db_column="FLAFLRCENT", null=True)),
                ("ceiling_fan_cfm_watt", models.FloatField(db_column="FLAFANCFM", null=True)),
                ("pct_interior_cfl", models.FloatField(db_column="FLACFLCENT", null=True)),
                ("pct_exterior_cfl", models.FloatField(db_column="FLACFLEXT", null=True)),
                ("pct_garage_cfl", models.FloatField(db_column="FLACFLGAR", null=True)),
                ("pct_interior_led", models.FloatField(db_column="FLALEDINT", null=True)),
                ("pct_exterior_led", models.FloatField(db_column="FLALEDEXT", null=True)),
                ("pct_garage_led", models.FloatField(db_column="FLALEDGAR", null=True)),
                (
                    "refrigerator_location",
                    models.IntegerField(
                        choices=[(1, "Conditioned"), (2, "Unconditioned")], db_column="NLAREFLOC"
                    ),
                ),
                ("dishwasher_capacity", models.FloatField(db_column="FLADISHWCAP", null=True)),
                ("dishwasher_kw_yr", models.FloatField(db_column="FLADISHWYR", null=True)),
                ("oven_induction", models.BooleanField(db_column="NLAOVNIND", default=False)),
                ("oven_convection", models.BooleanField(db_column="NLAOVNCON", default=False)),
                (
                    "clothes_dryer_location",
                    models.IntegerField(
                        choices=[(1, "Conditioned"), (2, "Unconditioned")], db_column="NLADRYLOC"
                    ),
                ),
                (
                    "clothes_dryer_moisture_sensing",
                    models.BooleanField(db_column="NLADRYMOIST", default=False),
                ),
                ("clothes_dryer_energy_factor", models.FloatField(db_column="FLADRYEF", null=True)),
                (
                    "clothes_dryer_modified_energy_factor",
                    models.FloatField(db_column="FLADRYMEF", null=True),
                ),
                (
                    "clothes_dryer_gas_energy_factor",
                    models.FloatField(db_column="FLADRYGASEF", null=True),
                ),
                (
                    "clothes_washer_location",
                    models.IntegerField(
                        choices=[(1, "Conditioned"), (2, "Unconditioned")], db_column="NLAWASHLOC"
                    ),
                ),
                (
                    "clothes_washer_label_energy_rating",
                    models.FloatField(db_column="FLAWASHLER", null=True),
                ),
                ("clothes_washer_capacity", models.FloatField(db_column="FLAWASHCAP", null=True)),
                (
                    "clothes_washer_electric_rate",
                    models.FloatField(db_column="FLAWASHELEC", null=True),
                ),
                ("clothes_washer_gas_rate", models.FloatField(db_column="FLAWASHGAS", null=True)),
                ("clothes_washer_gas_cost", models.FloatField(db_column="FLAWASHGCST", null=True)),
                (
                    "clothes_washer_efficiency",
                    models.FloatField(blank=True, db_column="FLAWASHEFF", null=True),
                ),
                (
                    "building",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MandatoryRequirements",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("verified_iecc04", models.BooleanField(db_column="nMRIECC04", default=False)),
                ("verified_iecc06", models.BooleanField(db_column="nMRIECC06", default=False)),
                ("verified_iecc09", models.BooleanField(db_column="nMRIECC09", default=False)),
                (
                    "verified_energy_star_v2_thermal_bypass_checklist",
                    models.BooleanField(db_column="nMRESV2TBC", default=False),
                ),
                (
                    "verified_energy_star_v2_products",
                    models.BooleanField(db_column="nMRESV2PRD", default=False),
                ),
                (
                    "verified_energy_star_v3_thermal_enclosure_checklist",
                    models.BooleanField(db_column="nMRESV3TEC", default=False),
                ),
                (
                    "verified_energy_star_v3_hvac_contractor_checklist",
                    models.BooleanField(db_column="nMRESV3HC", default=False),
                ),
                (
                    "verified_energy_star_v3_hvac_rater_checklist",
                    models.BooleanField(db_column="nMRESV3HR", default=False),
                ),
                (
                    "verified_energy_star_v3_water_management_checklist",
                    models.BooleanField(db_column="nMRESV3WM", default=False),
                ),
                (
                    "verified_energy_star_v3_indoor_air_plus",
                    models.BooleanField(db_column="nMRESV3AP", default=False),
                ),
                (
                    "verified_energy_star_v3_refrigerators",
                    models.BooleanField(db_column="nMRESV3RF", default=False),
                ),
                (
                    "verified_energy_star_v3_ceiling_fans",
                    models.BooleanField(db_column="nMRESV3CF", default=False),
                ),
                (
                    "verified_energy_star_v3_exhaust_fans",
                    models.BooleanField(db_column="nMRESV3EF", default=False),
                ),
                (
                    "verified_energy_star_v3_dishwashers",
                    models.BooleanField(db_column="nMRESV3DW", default=False),
                ),
                ("energy_star_v3_refrigerators", models.IntegerField(db_column="nMRESV3NRF")),
                ("energy_star_v3_ceiling_fans", models.IntegerField(db_column="nMRESV3NCF")),
                ("energy_star_v3_exhaust_fans", models.IntegerField(db_column="nMRESV3NEF")),
                ("energy_star_v3_dishwashers", models.IntegerField(db_column="nMRESV3NDW")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sMRRateNo", max_length=93, null=True),
                ),
                ("verified_iecc10_ny", models.BooleanField(db_column="nMRIECCNY", default=False)),
                (
                    "energy_star_v3basement_qualifies_for_saf_exclusion",
                    models.BooleanField(db_column="nMRESV3SAF", default=False),
                ),
                ("energy_star_v3_basement_floor_area", models.FloatField(db_column="fMRESV3BFA")),
                (
                    "energy_star_v3_basement_bedrooms",
                    models.BooleanField(db_column="nMRESV3NBB", default=False),
                ),
                ("verified_iecc12", models.BooleanField(db_column="nMRIECC12", default=False)),
                (
                    "meets_florida_requirements",
                    models.BooleanField(db_column="NMRFLORIDA", default=False),
                ),
                (
                    "energy_star_v3_slab_exempt",
                    models.BooleanField(db_column="NMRESV3SLAB", default=False),
                ),
                ("verified_iecc15", models.BooleanField(null=True, db_column="NMRIECC15")),
                (
                    "energy_star_version_to_qualify",
                    models.CharField(blank=True, db_column="sMResQual4", max_length=31, null=True),
                ),
                ("verified_iecc18", models.BooleanField(null=True, db_column="NMRIECC18")),
                ("verified_iecc15_mi", models.BooleanField(null=True, db_column="NMRIECCMI")),
                (
                    "building",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NevMeas",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "_source_nev_measure_number",
                    models.IntegerField(db_column="lNMNMNo", unique=True),
                ),
                ("city_name", models.CharField(blank=True, db_column="sNMCity", max_length=300)),
                ("house_type", models.CharField(blank=True, db_column="sNMHouse", max_length=300)),
                (
                    "foundation_type",
                    models.CharField(blank=True, db_column="sNMFnd", max_length=300),
                ),
                (
                    "heating_fuel_type",
                    models.CharField(blank=True, db_column="sNMHTG", max_length=300),
                ),
                ("cooling_type", models.CharField(blank=True, db_column="sNMCLG", max_length=300)),
                (
                    "hot_water_fuel_type",
                    models.CharField(blank=True, db_column="sNMDHWFT", max_length=300),
                ),
                (
                    "measure_type",
                    models.CharField(blank=True, db_column="sNMMEATYP", max_length=300),
                ),
                (
                    "measure_description",
                    models.CharField(blank=True, db_column="sNMMEADSC", max_length=765),
                ),
                ("kwh_savings", models.FloatField(blank=True, db_column="fNMKWH", null=True)),
                ("therm_savings", models.FloatField(blank=True, db_column="fNMTherm", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="PhotoVoltaic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="sPVName", max_length=93)),
                (
                    "type",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Air, direct"),
                            (2, "Air, indirect"),
                            (3, "Liquid, direct"),
                            (4, "Liquid, indirect"),
                            (5, "Batch heater"),
                        ],
                        db_column="nPVColType",
                        null=True,
                    ),
                ),
                ("area", models.FloatField(db_column="fPVArea", null=True)),
                ("peak_power", models.FloatField(db_column="fPVPower", null=True)),
                ("tilt", models.FloatField(db_column="fPVTilt", null=True)),
                (
                    "orientation",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "South"),
                            (2, "Southeast/Southwest"),
                            (3, "East/West"),
                            (4, "Northeast/Northwest"),
                            (5, "North"),
                        ],
                        db_column="nPVOr",
                        null=True,
                    ),
                ),
                ("inverter_efficiency", models.FloatField(db_column="fPVInvEff", null=True)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sPVRateNo", max_length=93),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                (
                    "name",
                    models.CharField(blank=True, db_column="sPIBlgName", max_length=153, null=True),
                ),
                (
                    "property_owner",
                    models.CharField(blank=True, db_column="sPIPOwner", max_length=93, null=True),
                ),
                (
                    "property_address",
                    models.CharField(blank=True, db_column="sPIStreet", max_length=93, null=True),
                ),
                (
                    "property_city",
                    models.CharField(blank=True, db_column="sPICity", max_length=93, null=True),
                ),
                (
                    "property_state",
                    models.CharField(blank=True, db_column="sPIState", max_length=93, null=True),
                ),
                (
                    "property_zip",
                    models.CharField(blank=True, db_column="sPIZip", max_length=93, null=True),
                ),
                (
                    "property_phone",
                    models.CharField(blank=True, db_column="sPIPhone", max_length=93, null=True),
                ),
                (
                    "builder_permit",
                    models.CharField(blank=True, db_column="sPIBldrPrmt", max_length=93, null=True),
                ),
                (
                    "builder_name",
                    models.CharField(blank=True, db_column="SPIBuilder", max_length=93, null=True),
                ),
                (
                    "builder_address",
                    models.CharField(blank=True, db_column="sPIBldrStr", max_length=93, null=True),
                ),
                (
                    "builder_address2",
                    models.CharField(blank=True, db_column="sPIBldrCty", max_length=93, null=True),
                ),
                (
                    "builder_email",
                    models.CharField(blank=True, db_column="sPIBldrEml", max_length=303, null=True),
                ),
                (
                    "builder_phone",
                    models.CharField(blank=True, db_column="sPIBldrPho", max_length=93, null=True),
                ),
                (
                    "builder_model",
                    models.CharField(blank=True, db_column="sPIModel", max_length=153, null=True),
                ),
                (
                    "builder_development",
                    models.CharField(blank=True, db_column="sPIBldrDev", max_length=93, null=True),
                ),
                (
                    "rating_organization",
                    models.CharField(blank=True, db_column="sPIRatOrg", max_length=93, null=True),
                ),
                (
                    "rating_organization_address",
                    models.CharField(blank=True, db_column="sPIRatStr", max_length=93, null=True),
                ),
                (
                    "rating_organization_city",
                    models.CharField(blank=True, db_column="sPIRatCity", max_length=93, null=True),
                ),
                (
                    "rating_organization_state",
                    models.CharField(blank=True, db_column="sPIRatSt", max_length=93, null=True),
                ),
                (
                    "rating_organization_zip",
                    models.CharField(blank=True, db_column="sPIRatZip", max_length=93, null=True),
                ),
                (
                    "rating_organization_phone",
                    models.CharField(blank=True, db_column="sPIRatPhon", max_length=93, null=True),
                ),
                (
                    "rating_organization_website",
                    models.CharField(blank=True, db_column="sPIRatWeb", max_length=303, null=True),
                ),
                (
                    "provider_id",
                    models.CharField(blank=True, db_column="sPIPRVDRID", max_length=93, null=True),
                ),
                (
                    "rater_name",
                    models.CharField(blank=True, db_column="sPIRatName", max_length=93, null=True),
                ),
                (
                    "rater_id",
                    models.CharField(blank=True, db_column="sPIRaterNo", max_length=93, null=True),
                ),
                (
                    "rater_email",
                    models.CharField(blank=True, db_column="sPIRatEMal", max_length=303, null=True),
                ),
                (
                    "rating_date",
                    models.CharField(blank=True, db_column="sPIRatDate", max_length=93, null=True),
                ),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sPIRatngNo", max_length=93, null=True),
                ),
                (
                    "rating_type",
                    models.CharField(blank=True, db_column="sPIRatType", max_length=93, null=True),
                ),
                (
                    "rating_reason",
                    models.CharField(blank=True, db_column="sPIRatReas", max_length=93, null=True),
                ),
                (
                    "rater_plan_inspector_one_name",
                    models.CharField(blank=True, db_column="sPIVer1Name", max_length=93, null=True),
                ),
                (
                    "rater_plan_inspector_one_id",
                    models.CharField(blank=True, db_column="sPIVer1ID", max_length=93, null=True),
                ),
                (
                    "rater_plan_inspector_two_name",
                    models.CharField(blank=True, db_column="sPIVer2Name", max_length=93, null=True),
                ),
                (
                    "rater_plan_inspector_two_id",
                    models.CharField(blank=True, db_column="sPIVer2ID", max_length=93, null=True),
                ),
                (
                    "rater_plan_inspector_three_name",
                    models.CharField(blank=True, db_column="sPIVer3Name", max_length=93, null=True),
                ),
                (
                    "rater_plan_inspector_three_id",
                    models.CharField(blank=True, db_column="sPIVer3ID", max_length=93, null=True),
                ),
                (
                    "rater_plan_inspector_four_name",
                    models.CharField(blank=True, db_column="sPIVer4Name", max_length=93, null=True),
                ),
                (
                    "rater_plan_inspector_four_id",
                    models.CharField(blank=True, db_column="sPIVer4ID", max_length=93, null=True),
                ),
                (
                    "sampleset_id",
                    models.CharField(blank=True, db_column="SPISAMSETID", max_length=93),
                ),
                (
                    "resnet_registry_id",
                    models.CharField(blank=True, db_column="sPIREGID", max_length=153, null=True),
                ),
                (
                    "resnet_registry_date",
                    models.CharField(blank=True, db_column="sPIRegDate", max_length=32, null=True),
                ),
                (
                    "building",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RegionalCode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "_result_number",
                    models.IntegerField(db_column="lBldgRunNo", verbose_name="Key to building run"),
                ),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="SRATENO", max_length=93, null=True),
                ),
                (
                    "nv_energy_plus_rebate",
                    models.FloatField(blank=True, db_column="fNVRebate", null=True),
                ),
                (
                    "ny_eccc_2010_reference_heating_consumption",
                    models.FloatField(blank=True, db_column="fNYECRHCn", null=True),
                ),
                (
                    "ny_eccc_2010_reference_cooling_consumption",
                    models.FloatField(blank=True, db_column="fNYECRCCn", null=True),
                ),
                (
                    "ny_eccc_2010_reference_hot_water_consumption",
                    models.FloatField(blank=True, db_column="fNYECRDCN", null=True),
                ),
                (
                    "ny_eccc_2010_reference_lights_appliance_consumption",
                    models.FloatField(blank=True, db_column="fNYECRLACn", null=True),
                ),
                (
                    "ny_eccc_2010_reference_photo_voltaic_consumption",
                    models.FloatField(blank=True, db_column="fNYECRPVCn", null=True),
                ),
                (
                    "ny_eccc_2010_reference_total_consumption",
                    models.FloatField(blank=True, db_column="fNYECRTCn", null=True),
                ),
                (
                    "ny_eccc_2010_designed_heating_consumption",
                    models.FloatField(blank=True, db_column="fNYECDHCn", null=True),
                ),
                (
                    "ny_eccc_2010_designed_cooling_consumption",
                    models.FloatField(blank=True, db_column="fNYECDCCn", null=True),
                ),
                (
                    "ny_eccc_2010_designed_hot_water_consumption",
                    models.FloatField(blank=True, db_column="fNYECDDCN", null=True),
                ),
                (
                    "ny_eccc_2010_designed_lights_appliance_consumption",
                    models.FloatField(blank=True, db_column="fNYECDLACn", null=True),
                ),
                (
                    "ny_eccc_2010_designed_photo_voltaic_consumption",
                    models.FloatField(blank=True, db_column="fNYECDPVCn", null=True),
                ),
                (
                    "ny_eccc_2010_designed_total_consumption",
                    models.FloatField(blank=True, db_column="fNYECDTCn", null=True),
                ),
                (
                    "passes_ny_eccc_2010_consumption_compliance",
                    models.BooleanField(null=True, db_column="bNYECC", default=False),
                ),
                (
                    "nv_ecc_reference_heating_consumption",
                    models.FloatField(blank=True, db_column="fNVECRHCn", null=True),
                ),
                (
                    "nv_ecc_reference_cooling_consumption",
                    models.FloatField(blank=True, db_column="fNVECRCCn", null=True),
                ),
                (
                    "nv_ecc_reference_hot_water_consumption",
                    models.FloatField(blank=True, db_column="fNVECRDCN", null=True),
                ),
                (
                    "nv_ecc_reference_lights_appliance_consumption",
                    models.FloatField(blank=True, db_column="fNVECRLACn", null=True),
                ),
                (
                    "nv_ecc_reference_photo_voltaic_consumption",
                    models.FloatField(blank=True, db_column="fNVECRPVCn", null=True),
                ),
                (
                    "nv_ecc_reference_total_consumption",
                    models.FloatField(blank=True, db_column="fNVECRTCn", null=True),
                ),
                (
                    "nv_ecc_designed_heating_consumption",
                    models.FloatField(blank=True, db_column="fNVECDHCn", null=True),
                ),
                (
                    "nv_ecc_designed_cooling_consumption",
                    models.FloatField(blank=True, db_column="fNVECDCCn", null=True),
                ),
                (
                    "nv_ecc_designed_hot_water_consumption",
                    models.FloatField(blank=True, db_column="fNVECDDCN", null=True),
                ),
                (
                    "nv_ecc_designed_lights_appliance_consumption",
                    models.FloatField(blank=True, db_column="fNVECDLACn", null=True),
                ),
                (
                    "nv_ecc_designed_photo_voltaic_consumption",
                    models.FloatField(blank=True, db_column="fNVECDPVCn", null=True),
                ),
                (
                    "nv_ecc_designed_total_consumption",
                    models.FloatField(blank=True, db_column="fNVECDTCn", null=True),
                ),
                (
                    "passes_nv_ecc_consumption_compliance",
                    models.BooleanField(null=True, db_column="bNVECC", default=False),
                ),
                (
                    "nc_2012_reference_heating_cost",
                    models.FloatField(blank=True, db_column="fNCRHCT", null=True),
                ),
                (
                    "nc_2012_reference_cooling_cost",
                    models.FloatField(blank=True, db_column="fNCRCCT", null=True),
                ),
                (
                    "nc_2012_reference_hot_water_cost",
                    models.FloatField(blank=True, db_column="fNCRDCT", null=True),
                ),
                (
                    "nc_2012_reference_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="fNCRLACT", null=True),
                ),
                (
                    "nc_2012_reference_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="fNCRPVCT", null=True),
                ),
                (
                    "nc_2012_reference_service_cost",
                    models.FloatField(blank=True, db_column="fNCRSVCT", null=True),
                ),
                (
                    "nc_2012_reference_total_cost",
                    models.FloatField(blank=True, db_column="fNCRTCT", null=True),
                ),
                (
                    "nc_2012_designed_heating_cost",
                    models.FloatField(blank=True, db_column="fNCDHCT", null=True),
                ),
                (
                    "nc_2012_designed_cooling_cost",
                    models.FloatField(blank=True, db_column="fNCDCCT", null=True),
                ),
                (
                    "nc_2012_designed_hot_water_cost",
                    models.FloatField(blank=True, db_column="fNCDDCT", null=True),
                ),
                (
                    "nc_2012_designed_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="fNCDLACT", null=True),
                ),
                (
                    "nc_2012_designed_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="fNCDPVCT", null=True),
                ),
                (
                    "nc_2012_designed_service_cost",
                    models.FloatField(blank=True, db_column="fNCDSVCT", null=True),
                ),
                (
                    "nc_2012_designed_total_cost",
                    models.FloatField(blank=True, db_column="fNCDTCT", null=True),
                ),
                (
                    "passes_nc_2012_cost_compliance",
                    models.BooleanField(null=True, db_column="bNCMeetCT", default=False),
                ),
                (
                    "nc_2012_reference_overall_ua",
                    models.FloatField(blank=True, db_column="fNCRUA", null=True),
                ),
                (
                    "nc_2012_designed_overall_ua",
                    models.FloatField(blank=True, db_column="fNCDUA", null=True),
                ),
                (
                    "nc_2012_passing_ducts",
                    models.BooleanField(null=True, db_column="bNCDctPass", default=False),
                ),
                (
                    "passes_nc_2012_overall_ua_compliance",
                    models.BooleanField(null=True, db_column="bNCUAPass", default=False),
                ),
                (
                    "passes_nc_2012_code",
                    models.BooleanField(null=True, db_column="bNCPass", default=False),
                ),
                (
                    "nc_hero_2012_reference_heating_cost",
                    models.FloatField(blank=True, db_column="fNCHRHCT", null=True),
                ),
                (
                    "nc_hero_2012_reference_cooling_cost",
                    models.FloatField(blank=True, db_column="fNCHRCCT", null=True),
                ),
                (
                    "nc_hero_2012_reference_hot_water_cost",
                    models.FloatField(blank=True, db_column="fNCHRDCT", null=True),
                ),
                (
                    "nc_hero_2012_reference_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="fNCHRLACT", null=True),
                ),
                (
                    "nc_hero_2012_reference_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="fNCHRPVCT", null=True),
                ),
                (
                    "nc_hero_2012_reference_service_cost",
                    models.FloatField(blank=True, db_column="fNCHRSVCT", null=True),
                ),
                (
                    "nc_hero_2012_reference_total_cost",
                    models.FloatField(blank=True, db_column="fNCHRTCT", null=True),
                ),
                (
                    "nc_hero_2012_designed_heating_cost",
                    models.FloatField(blank=True, db_column="fNCHDHCT", null=True),
                ),
                (
                    "nc_hero_2012_designed_cooling_cost",
                    models.FloatField(blank=True, db_column="fNCHDCCT", null=True),
                ),
                (
                    "nc_hero_2012_designed_hot_water_cost",
                    models.FloatField(blank=True, db_column="fNCHDDCT", null=True),
                ),
                (
                    "nc_hero_2012_designed_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="fNCHDLACT", null=True),
                ),
                (
                    "nc_hero_2012_designed_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="fNCHDPVCT", null=True),
                ),
                (
                    "nc_hero_2012_designed_service_cost",
                    models.FloatField(blank=True, db_column="fNCHDSVCT", null=True),
                ),
                (
                    "nc_hero_2012_designed_total_cost",
                    models.FloatField(blank=True, db_column="fNCHDTCT", null=True),
                ),
                (
                    "passes_nc_hero_2012_cost_compliance",
                    models.BooleanField(null=True, db_column="bNCHMeetCT", default=False),
                ),
                (
                    "nc_hero_2012_reference_overall_ua",
                    models.FloatField(blank=True, db_column="fNCHRUA", null=True),
                ),
                (
                    "nc_hero_2012_designed_overall_ua",
                    models.FloatField(blank=True, db_column="fNCHDUA", null=True),
                ),
                (
                    "nc_hero_2012_passing_ducts",
                    models.BooleanField(null=True, db_column="bNCHDctPass", default=False),
                ),
                (
                    "passes_nc_hero_2012_overall_ua_compliance",
                    models.BooleanField(null=True, db_column="bNCHUAPass", default=False),
                ),
                (
                    "passes_nc_hero_2012_code",
                    models.BooleanField(null=True, db_column="bNCHPass", default=False),
                ),
                (
                    "ny_eccc_2016_reference_heating_cost",
                    models.FloatField(blank=True, db_column="FNYRHCT", null=True),
                ),
                (
                    "ny_eccc_2016_reference_cooling_cost",
                    models.FloatField(blank=True, db_column="FNYRCCT", null=True),
                ),
                (
                    "ny_eccc_2016_reference_hot_water_cost",
                    models.FloatField(blank=True, db_column="FNYRDCT", null=True),
                ),
                (
                    "ny_eccc_2016_reference_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="FNYRLACT", null=True),
                ),
                (
                    "ny_eccc_2016_reference_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="FNYRPVCT", null=True),
                ),
                (
                    "ny_eccc_2016_reference_service_cost",
                    models.FloatField(blank=True, db_column="FNYRSVCT", null=True),
                ),
                (
                    "ny_eccc_2016_reference_total_cost",
                    models.FloatField(blank=True, db_column="FNYRTCT", null=True),
                ),
                (
                    "ny_eccc_2016_designed_heating_cost",
                    models.FloatField(blank=True, db_column="FNYDHCT", null=True),
                ),
                (
                    "ny_eccc_2016_designed_cooling_cost",
                    models.FloatField(blank=True, db_column="FNYDCCT", null=True),
                ),
                (
                    "ny_eccc_2016_designed_hot_water_cost",
                    models.FloatField(blank=True, db_column="FNYDDCT", null=True),
                ),
                (
                    "ny_eccc_2016_designed_lights_appliance_cost",
                    models.FloatField(blank=True, db_column="FNYDLACT", null=True),
                ),
                (
                    "ny_eccc_2016_designed_photo_voltaic_cost",
                    models.FloatField(blank=True, db_column="FNYDPVCT", null=True),
                ),
                (
                    "ny_eccc_2016_designed_service_cost",
                    models.FloatField(blank=True, db_column="FNYDSVCT", null=True),
                ),
                (
                    "ny_eccc_2016_designed_total_cost",
                    models.FloatField(blank=True, db_column="FNYDTCT", null=True),
                ),
                (
                    "passes_ny_eccc_2016_cost_compliance",
                    models.BooleanField(null=True, db_column="BNYMEETCT", default=False),
                ),
                (
                    "ny_eccc_2016_reference_overall_ua",
                    models.FloatField(blank=True, db_column="FNYRUA", null=True),
                ),
                (
                    "ny_eccc_2016_designed_overall_ua",
                    models.FloatField(blank=True, db_column="FNYDUA", null=True),
                ),
                (
                    "ny_eccc_2016_passing_ducts",
                    models.BooleanField(null=True, db_column="BNYDCTPASS", default=False),
                ),
                (
                    "passes_ny_eccc_2016_overall_ua_compliance",
                    models.BooleanField(null=True, db_column="BNYUAPASS", default=False),
                ),
                (
                    "passes_ny_eccc_2016_code",
                    models.BooleanField(null=True, db_column="BNYPASS", default=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RejectedMeasure",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                (
                    "_source_rejected_measure_number",
                    models.IntegerField(db_column="lRMRMNo", unique=True),
                ),
                ("_cost_rate_number", models.IntegerField(db_column="lRMCRNo")),
                ("_parent", models.IntegerField(db_column="lRMParNo", null=True)),
                ("is_multiple_measures", models.BooleanField(db_column="nRMMult", default=False)),
                (
                    "component_name",
                    models.CharField(blank=True, db_column="sRMComp", max_length=153),
                ),
                (
                    "existing_measure_name",
                    models.CharField(blank=True, db_column="sRMExist", max_length=153),
                ),
                (
                    "proposed_measure_name",
                    models.CharField(blank=True, db_column="sRMProp", max_length=153),
                ),
                (
                    "treatment_name",
                    models.CharField(blank=True, db_column="sRMTreat", max_length=363),
                ),
                (
                    "treatment_description",
                    models.CharField(blank=True, db_column="sRMTreatD", max_length=363),
                ),
                ("treatment_life", models.FloatField(blank=True, db_column="fRMLife", null=True)),
                ("treatment_cost", models.FloatField(blank=True, db_column="fRMCost", null=True)),
                (
                    "rejection_type",
                    models.IntegerField(
                        choices=[
                            (1, "Failed Criteria"),
                            (2, "Exceeded available funds"),
                            (3, "Redundant w/ accepted measure"),
                            (4, "Caused a building error"),
                        ],
                        db_column="nRMRejReas",
                        null=True,
                    ),
                ),
                (
                    "rejection_reason",
                    models.CharField(blank=True, db_column="sRMRejReas", max_length=153),
                ),
                (
                    "cost_rate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.CostRate"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ResnetDisc",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("question_1", models.BooleanField(null=True, db_column="nRDQ1")),
                ("question_2a", models.BooleanField(null=True, db_column="nRDQ2A")),
                ("question_2b", models.BooleanField(null=True, db_column="nRDQ2B")),
                ("question_2c", models.BooleanField(null=True, db_column="nRDQ2C")),
                ("question_2d", models.BooleanField(null=True, db_column="nRDQ2D")),
                ("question_2e", models.BooleanField(null=True, db_column="nRDQ2E")),
                (
                    "question_2e_other",
                    models.CharField(blank=True, db_column="SRDQ2EOTHR", max_length=765),
                ),
                ("question_3a", models.BooleanField(null=True, db_column="nRDQ3A")),
                ("question_3b", models.BooleanField(null=True, db_column="nRDQ3B")),
                ("question_3c", models.BooleanField(null=True, db_column="nRDQ3C")),
                (
                    "question_4_hvac_installed",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4HVACI",
                        null=True,
                    ),
                ),
                (
                    "question_4_hvac_business",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4HVACB",
                        null=True,
                    ),
                ),
                (
                    "question_4_thermal_insulation_installed",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4THMLI",
                        null=True,
                    ),
                ),
                (
                    "question_4_thermal_insulation_business",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4THMLB",
                        null=True,
                    ),
                ),
                (
                    "question_4_air_sealing_installed",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4AIRSI",
                        null=True,
                    ),
                ),
                (
                    "question_4_air_sealing_business",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4AIRSB",
                        null=True,
                    ),
                ),
                (
                    "question_4_windows_installed",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4WINI",
                        null=True,
                    ),
                ),
                (
                    "question_4_windows_business",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4WINB",
                        null=True,
                    ),
                ),
                (
                    "question_4_appliance_installed",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4APPLI",
                        null=True,
                    ),
                ),
                (
                    "question_4_appliance_business",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4APPLB",
                        null=True,
                    ),
                ),
                (
                    "question_4_construction_installed",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4CNSTI",
                        null=True,
                    ),
                ),
                (
                    "question_4_construction_business",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4CNSTB",
                        null=True,
                    ),
                ),
                (
                    "question_4_other_installed",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4OTHRI",
                        null=True,
                    ),
                ),
                (
                    "question_4_other_business",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Employer"), (2, "Rater"), (3, "N/A")],
                        db_column="NRDQ4OTHRB",
                        null=True,
                    ),
                ),
                (
                    "question_4_other",
                    models.CharField(blank=True, db_column="SRDQ4OTHR", max_length=765),
                ),
                (
                    "question_5_sampling",
                    models.BooleanField(null=True, db_column="NRDQ5", default=False),
                ),
                ("rating_number", models.CharField(blank=True, db_column="sRateNo", max_length=93)),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Results",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "_result_number",
                    models.IntegerField(db_column="lBldgRunNo", verbose_name="Key to building run"),
                ),
                (
                    "heating_system_efficiency",
                    models.FloatField(
                        db_column="FHTEFF", verbose_name="Heating system efficiency."
                    ),
                ),
                (
                    "cooling_system_efficiency",
                    models.FloatField(
                        db_column="FCLGEFF", verbose_name="Cooling system efficiency."
                    ),
                ),
                (
                    "hot_water_system_efficiency",
                    models.FloatField(
                        db_column="FHWEFF", verbose_name="Hot Water system efficiency"
                    ),
                ),
                (
                    "roof_heating_load",
                    models.FloatField(
                        db_column="FLHROOF", verbose_name="Roof heating component load"
                    ),
                ),
                (
                    "roof_cooling_load",
                    models.FloatField(
                        db_column="FLCROOF", verbose_name="Roof cooling component load"
                    ),
                ),
                (
                    "joist_heating_load",
                    models.FloatField(
                        db_column="FLHJOIST", verbose_name="Joist heating component load"
                    ),
                ),
                (
                    "joist_cooling_load",
                    models.FloatField(
                        db_column="FLCJOIST", verbose_name="Joist cooling component load"
                    ),
                ),
                (
                    "above_ground_walls_heating_load",
                    models.FloatField(
                        db_column="FLHAGWALL",
                        verbose_name="Above Grade Wall heating component load",
                    ),
                ),
                (
                    "above_ground_walls_cooling_load",
                    models.FloatField(
                        db_column="FLCAGWALL",
                        verbose_name="Above Grade Wall cooling component load",
                    ),
                ),
                (
                    "foundation_wall_heating_load",
                    models.FloatField(
                        db_column="FLHFNDWALL",
                        verbose_name="Foundation Wall heating component load",
                    ),
                ),
                (
                    "foundation_wall_cooling_load",
                    models.FloatField(
                        db_column="FLCFNDWALL",
                        verbose_name="Foundation Wall cooling component load",
                    ),
                ),
                (
                    "windows_skylights_heating_load",
                    models.FloatField(
                        db_column="FLHWNDOSK",
                        verbose_name="Windows/Skylight heating component load",
                    ),
                ),
                (
                    "windows_skylights_cooling_load",
                    models.FloatField(
                        db_column="FLCWNDOSK",
                        verbose_name="Windows/Skylight cooling component load",
                    ),
                ),
                (
                    "frame_floor_heating_load",
                    models.FloatField(
                        db_column="FLHFFLR", verbose_name="Frame Floor heating component load"
                    ),
                ),
                (
                    "frame_floor_cooling_load",
                    models.FloatField(
                        db_column="FLCFFLR", verbose_name="Frame Floor cooling component load"
                    ),
                ),
                (
                    "crawl_heating_load",
                    models.FloatField(
                        db_column="FLHCRAWL", verbose_name="Crawl heating component load"
                    ),
                ),
                (
                    "crawl_cooling_load",
                    models.FloatField(
                        db_column="FLCCRAWL", verbose_name="Crawl cooling component load"
                    ),
                ),
                (
                    "slab_heating_load",
                    models.FloatField(
                        db_column="FLHSLAB", verbose_name="Slab heating component load"
                    ),
                ),
                (
                    "slab_cooling_load",
                    models.FloatField(
                        db_column="FLCSLAB", verbose_name="Slab cooling component load"
                    ),
                ),
                (
                    "infiltration_heating_load",
                    models.FloatField(
                        db_column="FLHINF", verbose_name="Infiltration heating component load"
                    ),
                ),
                (
                    "infiltration_cooling_load",
                    models.FloatField(
                        db_column="FLCINF", verbose_name="Infiltration cooling component load"
                    ),
                ),
                (
                    "mechanical_ventilation_heating_load",
                    models.FloatField(
                        db_column="FLHMECHVNT",
                        verbose_name="Mechanical ventilation heating component load",
                    ),
                ),
                (
                    "mechanical_ventilation_cooling_load",
                    models.FloatField(
                        db_column="FLCMECHVNT",
                        verbose_name="Mechanical ventilation cooling component load",
                    ),
                ),
                (
                    "duct_heating_load",
                    models.FloatField(
                        db_column="FLHDUCT", verbose_name="Duct heating component load"
                    ),
                ),
                (
                    "duct_cooling_load",
                    models.FloatField(
                        db_column="FLCDUCT", verbose_name="Duct cooling component load"
                    ),
                ),
                (
                    "active_solar_heating_load",
                    models.FloatField(
                        db_column="FLHASOL", verbose_name="Active Solar heating component load"
                    ),
                ),
                (
                    "active_solar_cooling_load",
                    models.FloatField(
                        db_column="FLCASOL", verbose_name="Active Solar cooling component load"
                    ),
                ),
                (
                    "sunspace_heating_load",
                    models.FloatField(
                        db_column="FLHSS", verbose_name="Sunspace heating component load"
                    ),
                ),
                (
                    "sunspace_cooling_load",
                    models.FloatField(
                        db_column="FLCSS", verbose_name="Sunspace cooling component load"
                    ),
                ),
                (
                    "internal_gains_heating_load",
                    models.FloatField(
                        db_column="FLHIGAIN", verbose_name="Internal gains heating component load"
                    ),
                ),
                (
                    "internal_gains_cooling_load",
                    models.FloatField(
                        db_column="FLCIGAIN", verbose_name="Internal gains cooling component load"
                    ),
                ),
                (
                    "whole_house_fan_heating_load",
                    models.FloatField(
                        db_column="FLHWHF", verbose_name="Whole house fan heating component load"
                    ),
                ),
                (
                    "whole_house_fan_cooling_load",
                    models.FloatField(
                        db_column="FLCWHF", verbose_name="Whole house fan cooling component load"
                    ),
                ),
                (
                    "door_heating_load",
                    models.FloatField(
                        db_column="FLHDOOR", verbose_name="Door heating component load"
                    ),
                ),
                (
                    "door_cooling_load",
                    models.FloatField(
                        db_column="FLCDOOR", verbose_name="Door cooling component load"
                    ),
                ),
                (
                    "total_heating_load",
                    models.FloatField(db_column="FLHTOTAL", verbose_name="Total heating load"),
                ),
                (
                    "total_cooling_load",
                    models.FloatField(db_column="FLCTOTAL", verbose_name="Total cooling load"),
                ),
                (
                    "hot_water_heating_consumption",
                    models.FloatField(
                        db_column="FTOTDHW",
                        verbose_name="Total domestic hot water heating consumption",
                    ),
                ),
                (
                    "hot_water_heating_consumption_no_loss",
                    models.FloatField(
                        blank=True,
                        db_column="fDHWNoLoss",
                        null=True,
                        verbose_name="Total domestic hot water heating load w/out tank loss",
                    ),
                ),
                (
                    "solar_savings",
                    models.FloatField(
                        db_column="FSOLSAVE", verbose_name="Savings due to active solar system"
                    ),
                ),
                (
                    "heating_design_load",
                    models.FloatField(db_column="FHTPEAK", verbose_name="Heating design load"),
                ),
                (
                    "calculated_sensible_cooling_load",
                    models.FloatField(
                        db_column="FACSPEAK", verbose_name="Calculated sensible cooling design load"
                    ),
                ),
                (
                    "calculated_latent_cooling_load",
                    models.FloatField(
                        db_column="FACLPEAK", verbose_name="Calculated latent cooling design load"
                    ),
                ),
                (
                    "calculated_sensible_latent_cooling_load",
                    models.FloatField(
                        db_column="FACTPEAK",
                        verbose_name="Calculated sensible + latent cooling design load",
                    ),
                ),
                (
                    "unit_heating_cost",
                    models.FloatField(db_column="FHBUCK", verbose_name="Unit Heating Cost $/MBtu"),
                ),
                (
                    "unit_cooling_cost",
                    models.FloatField(db_column="FACBUCK", verbose_name="Unit cooling Cost $/MBtu"),
                ),
                (
                    "unit_hot_water_cost",
                    models.FloatField(db_column="FWBUCK", verbose_name="Unit DHW Cost $/MBtu"),
                ),
                (
                    "heating_consumption",
                    models.FloatField(
                        db_column="FHCONS", verbose_name="Annual Energy Consumption Heating (MBtu)"
                    ),
                ),
                (
                    "cooling_consumption",
                    models.FloatField(
                        db_column="FCCONS", verbose_name="Annual Energy Consumption Cooling (MBtu)"
                    ),
                ),
                (
                    "heating_cost",
                    models.FloatField(
                        db_column="FHCOST", verbose_name="Annual Energy Cost Heating"
                    ),
                ),
                (
                    "cooling_cost",
                    models.FloatField(
                        db_column="FCCOST", verbose_name="Annual Energy Cost Cooling"
                    ),
                ),
                (
                    "hot_water_consumption",
                    models.FloatField(
                        db_column="FWCONS",
                        verbose_name="Annual Energy Consumption Water Heating (MBtu)",
                    ),
                ),
                (
                    "hot_water_cost",
                    models.FloatField(
                        db_column="FWCOST", verbose_name="Annual Energy Cost Water Heating"
                    ),
                ),
                (
                    "service_cost",
                    models.FloatField(
                        db_column="FSERVCOST", verbose_name="Annual Energy Cost Service Charges"
                    ),
                ),
                (
                    "total_cost",
                    models.FloatField(
                        db_column="FTOTCOST", verbose_name="Annual Energy Cost Total"
                    ),
                ),
                (
                    "refrigerator_consumption",
                    models.FloatField(
                        db_column="FREFRCONS", verbose_name="Refrigerator consumption"
                    ),
                ),
                (
                    "freezer_consumption",
                    models.FloatField(db_column="FFRZCONS", verbose_name="Freezer consumption"),
                ),
                (
                    "dryer_consumption",
                    models.FloatField(db_column="FDRYCONS", verbose_name="Dryer consumption"),
                ),
                (
                    "oven_consumption",
                    models.FloatField(db_column="FOVENCONS", verbose_name="Oven consumption"),
                ),
                (
                    "lights_and_appliances_consumption",
                    models.FloatField(
                        db_column="FLAOTHCONS",
                        verbose_name="Light And Appliances Other consumption",
                    ),
                ),
                (
                    "lights_hs_consumption",
                    models.FloatField(db_column="FLIHSCONS", verbose_name="Light Hs consumption"),
                ),
                (
                    "lights_cs_consumption",
                    models.FloatField(db_column="FLICSCONS", verbose_name="Light Cs consumption"),
                ),
                (
                    "refrigerator_cost",
                    models.FloatField(db_column="FREFRCOST", verbose_name="Refrigerator cost"),
                ),
                (
                    "freezer_cost",
                    models.FloatField(db_column="FFRZCOST", verbose_name="Freezer cost"),
                ),
                ("dryer_cost", models.FloatField(db_column="FDRYCOST", verbose_name="Dryer Cost")),
                ("oven_cost", models.FloatField(db_column="FOVENCOST", verbose_name="Oven Cost")),
                (
                    "lights_and_appliances_cost",
                    models.FloatField(
                        db_column="FLAOTHCOST", verbose_name="Light And Appliances Other cost"
                    ),
                ),
                (
                    "lighting_cost",
                    models.FloatField(db_column="FLIGHTCOST", verbose_name="Lighting cost"),
                ),
                (
                    "lights_and_appliances_total_consumption",
                    models.FloatField(
                        db_column="FLATOTCONS",
                        verbose_name="Light And Appliances Total consumption",
                    ),
                ),
                (
                    "lights_and_appliances_total_cost",
                    models.FloatField(
                        db_column="FLATOTCOST",
                        verbose_name="Annual Energy Cost Lights & Appliances",
                    ),
                ),
                (
                    "photo_voltaic_consumption",
                    models.FloatField(
                        db_column="FPVTOTCONS",
                        verbose_name="Annual Energy Consumption Total Photovoltaics (MBtu)",
                    ),
                ),
                (
                    "photo_voltaic_cost",
                    models.FloatField(
                        db_column="FPVTOTCOST", verbose_name="Annual Energy Cost Photovoltaics"
                    ),
                ),
                (
                    "shell_area",
                    models.FloatField(db_column="FSHELLAREA", verbose_name="Shell Area"),
                ),
                (
                    "heating_load_per_shell_area_hdd75",
                    models.FloatField(
                        db_column="FHTGLDPHDD", verbose_name="Heating Load per shell area per HDD65"
                    ),
                ),
                (
                    "cooling_load_per_shell_area_cdd74",
                    models.FloatField(
                        db_column="FCLGLDPHDD", verbose_name="Cooling Load per shell area per CDD74"
                    ),
                ),
                (
                    "heating_design_load_per_shell_area_hdd75",
                    models.FloatField(
                        db_column="FHTGDDPHDD",
                        verbose_name="Heating Design Load per shell area per HDD65",
                    ),
                ),
                (
                    "cooling_design_load_per_shell_area_cdd74",
                    models.FloatField(
                        db_column="FCLGDDPHDD",
                        verbose_name="Cooling Design Load per shell area per CDD74",
                    ),
                ),
                (
                    "heating_natural_ach",
                    models.FloatField(
                        db_column="FHTGACH",
                        verbose_name="Heating Natural ACH, calculated from user inputs",
                    ),
                ),
                (
                    "cooling_natural_ach",
                    models.FloatField(
                        db_column="FCLGACH",
                        verbose_name="Cooling Natural ACH, calculated from user inputs",
                    ),
                ),
                (
                    "rating_number",
                    models.CharField(
                        blank=True,
                        db_column="SRATENO",
                        max_length=93,
                        null=True,
                        verbose_name="Rating Number",
                    ),
                ),
                (
                    "co2_total_emission",
                    models.FloatField(
                        db_column="FEMCO2TOT", verbose_name="Emission - Carbon Dioxide Total"
                    ),
                ),
                (
                    "s02_total_emission",
                    models.FloatField(
                        db_column="FEMSO2TOT", verbose_name="Emission - Sulfur Dioxide Total"
                    ),
                ),
                (
                    "nox_total_emission",
                    models.FloatField(
                        db_column="FEMNOXTOT", verbose_name="Emission - Nitrogen Oxides Total"
                    ),
                ),
                (
                    "co2_heating_emission",
                    models.FloatField(
                        db_column="FEMCO2HTG", verbose_name="Emission - Carbon Dioxide Heating"
                    ),
                ),
                (
                    "co2_cooling_emission",
                    models.FloatField(
                        db_column="FEMCO2CLG", verbose_name="Emission - Carbon Dioxide Cooling"
                    ),
                ),
                (
                    "co2_hot_water_emission",
                    models.FloatField(
                        db_column="FEMCO2DHW",
                        verbose_name="Emission - Carbon Dioxide Water Heating",
                    ),
                ),
                (
                    "co2_lights_appliance_emission",
                    models.FloatField(
                        db_column="FEMCO2LA",
                        verbose_name="Emission - Carbon Dioxide Lights and Appliances",
                    ),
                ),
                (
                    "co2_photo_voltaic_emission",
                    models.FloatField(
                        db_column="FEMCO2PV", verbose_name="Emission - Carbon Dioxide Photovoltaics"
                    ),
                ),
                (
                    "so2_heating_emission",
                    models.FloatField(
                        db_column="FEMSO2HTG", verbose_name="Emission - Sulfur Dioxide Heating"
                    ),
                ),
                (
                    "so2_cooling_emission",
                    models.FloatField(
                        db_column="FEMSO2CLG", verbose_name="Emission - Sulfur Dioxide Cooling"
                    ),
                ),
                (
                    "so2_hot_water_emission",
                    models.FloatField(
                        db_column="FEMSO2DHW",
                        verbose_name="Emission - Sulfur Dioxide Water Heating",
                    ),
                ),
                (
                    "so2_lights_appliance_emission",
                    models.FloatField(
                        db_column="FEMSO2LA",
                        verbose_name="Emission - Sulfur Dioxide Lights and Appliances",
                    ),
                ),
                (
                    "so2_photo_voltaic_emission",
                    models.FloatField(
                        db_column="FEMSO2PV", verbose_name="Emission - Sulfur Dioxide Photovoltaics"
                    ),
                ),
                (
                    "nox_heating_emission",
                    models.FloatField(
                        db_column="FEMNOXHTG", verbose_name="Emission - Nitrogen Oxide Heating"
                    ),
                ),
                (
                    "nox_cooling_emission",
                    models.FloatField(
                        db_column="FEMNOXCLG", verbose_name="Emission - Nitrogen Oxide Cooling"
                    ),
                ),
                (
                    "nox_hot_water_emission",
                    models.FloatField(
                        db_column="FEMNOXDHW",
                        verbose_name="Emission - Nitrogen Oxide Water Heating",
                    ),
                ),
                (
                    "nox_lights_appliance_emission",
                    models.FloatField(
                        db_column="FEMNOXLA",
                        verbose_name="Emission - Nitrogen Oxide Lights and Appliances",
                    ),
                ),
                (
                    "nox_photo_voltaic_emission",
                    models.FloatField(
                        db_column="FEMNOXPV", verbose_name="Emission - Nitrogen Oxide Photovoltaics"
                    ),
                ),
                (
                    "co2_hers_emission_savings",
                    models.FloatField(
                        db_column="FEMHERSCO2",
                        verbose_name="HERS Emission Savings - Carbon Dioxide (Not in REM/Design)",
                    ),
                ),
                (
                    "so2_hers_emission_savings",
                    models.FloatField(
                        db_column="FEMHERSSO2",
                        verbose_name="HERS Emission Savings - Sulfur Dioxide (Not in REM/Design)",
                    ),
                ),
                (
                    "nox_hers_emission_savings",
                    models.FloatField(
                        db_column="FEMHERSNOX",
                        verbose_name="HERSEmission Savings - Nitrogen Oxides (Not in REM/Design)",
                    ),
                ),
                (
                    "source_energy_heating",
                    models.FloatField(
                        db_column="FSRCEGYHTG", verbose_name="Source Energy - Heating (MBtu/year)"
                    ),
                ),
                (
                    "source_energy_cooling",
                    models.FloatField(
                        db_column="FSRCEGYCLG", verbose_name="Source Energy - Cooling (MBtu/year)"
                    ),
                ),
                (
                    "source_energy_hot_water",
                    models.FloatField(
                        db_column="FSRCEGYDHW",
                        verbose_name="Source Energy - W ater Heating (MBtu/year)",
                    ),
                ),
                (
                    "source_energy_lights_appliance",
                    models.FloatField(
                        db_column="FSRCEGYLA",
                        verbose_name="Source Energy - Lights and Appliances (MBtu/year)",
                    ),
                ),
                (
                    "source_energy_photo_voltaic",
                    models.FloatField(
                        db_column="FSRCEGYPV",
                        verbose_name="Source Energy - Photovoltaics (MBtu/year)",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Roof",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(db_column="szROName", max_length=31, null=True)),
                ("area", models.FloatField(db_column="fROArea", null=True)),
                (
                    "style",
                    models.IntegerField(
                        choices=[(1, "Vaulted"), (2, "Attic")], db_column="nROType"
                    ),
                ),
                (
                    "radiant_barrier",
                    models.IntegerField(choices=[(1, True), (2, False)], db_column="nRORadBar"),
                ),
                (
                    "color",
                    models.IntegerField(
                        choices=[(0, "Reflective"), (1, "Light"), (2, "Medium"), (3, "Dark")],
                        db_column="nROCol",
                    ),
                ),
                ("_ceiling_number", models.IntegerField(db_column="lROCeilTNo")),
                ("u_value", models.FloatField(db_column="fROUo")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sRORateNo", max_length=93),
                ),
                (
                    "clay_or_concrete",
                    models.IntegerField(choices=[(1, True), (2, False)], db_column="nROClay"),
                ),
                (
                    "sub_tile_ventilation",
                    models.IntegerField(choices=[(1, True), (2, False)], db_column="nROVent"),
                ),
                (
                    "sealed_attic_roof_area",
                    models.FloatField(blank=True, db_column="fRORoofArea", null=True),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
            options={
                "ordering": ("simulation", "-area"),
            },
        ),
        migrations.CreateModel(
            name="SeasonalRate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_seasonal_rate_number", models.IntegerField(db_column="lSRSRNo")),
                ("_utility_rate_no", models.IntegerField(db_column="lSRURNo")),
                (
                    "start_month",
                    models.IntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        db_column="nSRStrtMth",
                        null=True,
                    ),
                ),
                (
                    "end_month",
                    models.IntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        db_column="nSRStopMth",
                        null=True,
                    ),
                ),
                ("cost", models.FloatField(db_column="fSRSvcChrg", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="SimplifiedInput",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                (
                    "house_type",
                    models.IntegerField(
                        choices=[
                            (1, "1 Story"),
                            (2, "1-1/2 Story"),
                            (3, "2 Story"),
                            (4, "2-1/2 Story"),
                            (5, "3 Story"),
                            (6, "Bi-Level"),
                            (7, "Tri-Level"),
                        ],
                        db_column="nSIHseType",
                        null=True,
                    ),
                ),
                (
                    "foundation_type",
                    models.FloatField(
                        choices=[
                            (0, "Slab"),
                            (1, "Open Crawl Space"),
                            (2, "Enclosed Crawl Space"),
                            (3, "Conditioned Crawl Space"),
                            (4, "Un-Conditioned Full Basement"),
                            (5, "Conditioned Full Basement"),
                            (6, "Unconditioned Walkout Basement"),
                            (7, "Conditioned Walkout Basement"),
                            (8, "Mixed"),
                        ],
                        db_column="nSIFndType",
                        null=True,
                    ),
                ),
                (
                    "pct_of_each_foundation_sl",
                    models.FloatField(blank=True, db_column="fSIFndPesl", null=True),
                ),
                (
                    "pct_of_each_foundation_oc",
                    models.FloatField(blank=True, db_column="fSIFndPeoc", null=True),
                ),
                (
                    "pct_of_each_foundation_ec",
                    models.FloatField(blank=True, db_column="fSIFndPeec", null=True),
                ),
                (
                    "pct_of_each_foundation_hc",
                    models.FloatField(blank=True, db_column="fSIFndPeHC", null=True),
                ),
                (
                    "pct_of_each_foundation_uf",
                    models.FloatField(blank=True, db_column="fSIFndPeUF", null=True),
                ),
                (
                    "pct_of_each_foundation_hf",
                    models.FloatField(blank=True, db_column="fSIFndPeHF", null=True),
                ),
                (
                    "pct_of_each_foundation_uw",
                    models.FloatField(blank=True, db_column="fSIFndPeUW", null=True),
                ),
                (
                    "pct_of_each_foundation_hw",
                    models.FloatField(blank=True, db_column="fSIFndPeHW", null=True),
                ),
                (
                    "conditioned_floor_area",
                    models.FloatField(blank=True, db_column="fSICFlArea", null=True),
                ),
                (
                    "number_of_bedrooms",
                    models.IntegerField(blank=True, db_column="nSIBedRms", null=True),
                ),
                (
                    "pct_of_each_floor_area_hb",
                    models.FloatField(blank=True, db_column="fSIPFlArHB", null=True),
                ),
                (
                    "pct_of_each_floor_area_fl",
                    models.FloatField(blank=True, db_column="fSIPFlArFL", null=True),
                ),
                (
                    "pct_of_each_floor_area_ml",
                    models.FloatField(blank=True, db_column="fSIPFlArML", null=True),
                ),
                (
                    "pct_of_each_floor_area_sl",
                    models.FloatField(blank=True, db_column="fSIPFlArSL", null=True),
                ),
                (
                    "pct_of_each_floor_area_tl",
                    models.FloatField(blank=True, db_column="fSIPFlArTL", null=True),
                ),
                (
                    "number_of_corners_hb",
                    models.IntegerField(blank=True, db_column="nSINoCrnHB", null=True),
                ),
                (
                    "number_of_corners_fl",
                    models.IntegerField(blank=True, db_column="nSINoCrnFL", null=True),
                ),
                (
                    "number_of_corners_ml",
                    models.IntegerField(blank=True, db_column="nSINoCrnML", null=True),
                ),
                (
                    "number_of_corners_sl",
                    models.IntegerField(blank=True, db_column="nSINoCrnSL", null=True),
                ),
                (
                    "number_of_corners_tl",
                    models.IntegerField(blank=True, db_column="nSINoCrnTL", null=True),
                ),
                (
                    "pct_open_above_hb",
                    models.FloatField(blank=True, db_column="fSIPOAboHB", null=True),
                ),
                (
                    "pct_open_above_fl",
                    models.FloatField(blank=True, db_column="fSIPOAboFL", null=True),
                ),
                (
                    "pct_open_above_ml",
                    models.FloatField(blank=True, db_column="fSIPOAboML", null=True),
                ),
                (
                    "pct_open_above_sl",
                    models.FloatField(blank=True, db_column="fSIPOAboSL", null=True),
                ),
                (
                    "pct_open_above_tl",
                    models.FloatField(blank=True, db_column="fSIPOAboTL", null=True),
                ),
                (
                    "ceiling_height_hb",
                    models.FloatField(blank=True, db_column="fSICeilHHB", null=True),
                ),
                (
                    "ceiling_height_fl",
                    models.FloatField(blank=True, db_column="fSICeilHFL", null=True),
                ),
                (
                    "ceiling_height_ml",
                    models.FloatField(blank=True, db_column="fSICeilHML", null=True),
                ),
                (
                    "ceiling_height_sl",
                    models.FloatField(blank=True, db_column="fSICeilHSL", null=True),
                ),
                (
                    "ceiling_height_tl",
                    models.FloatField(blank=True, db_column="fSICeilHTL", null=True),
                ),
                (
                    "pct_level_over_garage",
                    models.FloatField(blank=True, db_column="fSIPOGrge", null=True),
                ),
                (
                    "pct_catherdral_hb",
                    models.FloatField(blank=True, db_column="fSIPCathHB", null=True),
                ),
                (
                    "pct_catherdral_fl",
                    models.FloatField(blank=True, db_column="fSIPCathFL", null=True),
                ),
                (
                    "pct_catherdral_ml",
                    models.FloatField(blank=True, db_column="fSIPCathML", null=True),
                ),
                (
                    "pct_catherdral_sl",
                    models.FloatField(blank=True, db_column="fSIPCathSL", null=True),
                ),
                (
                    "pct_catherdral_tl",
                    models.FloatField(blank=True, db_column="fSIPCathTL", null=True),
                ),
                (
                    "infiltration_rate",
                    models.FloatField(blank=True, db_column="fSIInfRate", null=True),
                ),
                (
                    "infiltration_measure_type",
                    models.IntegerField(
                        choices=[
                            (1, "User estimate"),
                            (3, "Tracer gas test"),
                            (4, "Blower door test"),
                            (5, "Code default"),
                            (6, "Threshold"),
                        ],
                        db_column="nSIInfMTyp",
                        null=True,
                    ),
                ),
                (
                    "infiltration_units",
                    models.IntegerField(
                        choices=[
                            (1, "CFM @ 50 Pascals"),
                            (2, "CFM @ 25 Pascals"),
                            (3, "ACH @ 50 Pascals"),
                            (4, "Natural ACH"),
                            (5, "Eff. Leakage Area (in\xb2)"),
                            (6, "ELA/100 sf shell"),
                            (7, "Thermal Efficiency (%)"),
                            (9, "Specific Leakage Area"),
                            (10, "CFM per Std 152"),
                            (11, "CFM25 / CFA"),
                            (12, "CFM25 / CFMfan"),
                        ],
                        db_column="nSIInfUnit",
                        null=True,
                    ),
                ),
                (
                    "number_of_doors",
                    models.IntegerField(blank=True, db_column="nSINoDoors", null=True),
                ),
                (
                    "slab_depth_basement_level",
                    models.FloatField(blank=True, db_column="fSISlbDBmt", null=True),
                ),
                (
                    "slab_depth_level_1",
                    models.FloatField(blank=True, db_column="fSlbD1L", null=True),
                ),
                (
                    "_ceiling_type_1",
                    models.FloatField(blank=True, db_column="lSIClgT1No", null=True),
                ),
                (
                    "_ceiling_type_2",
                    models.FloatField(blank=True, db_column="lSIClgT2No", null=True),
                ),
                ("_wall_type_1", models.FloatField(blank=True, db_column="lSIWalT1No", null=True)),
                ("_wall_type_2", models.FloatField(blank=True, db_column="lSIWalT2No", null=True)),
                (
                    "_foundation_wall_type",
                    models.FloatField(blank=True, db_column="lSIFndWTNo", null=True),
                ),
                ("_floor_type", models.FloatField(blank=True, db_column="lSIFlrTyNo", null=True)),
                ("_door_type", models.FloatField(blank=True, db_column="lSIDorTyNo", null=True)),
                ("_slab_type", models.FloatField(blank=True, db_column="lSISlbTyNo", null=True)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sSIRateNo", max_length=93),
                ),
                (
                    "mobile_home_box_length",
                    models.FloatField(blank=True, db_column="fSIBoxLen", null=True),
                ),
                (
                    "mobile_home_box_width",
                    models.FloatField(blank=True, db_column="fSIBoxWid", null=True),
                ),
                (
                    "mobile_home_box_height",
                    models.FloatField(blank=True, db_column="fSIBoxHgt", null=True),
                ),
                (
                    "level_above_garage",
                    models.FloatField(blank=True, db_column="nSILvAbGar", null=True),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Simulation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_source_result_number", models.IntegerField(db_column="lBldgRunNo")),
                (
                    "simulation_date",
                    models.DateTimeField(
                        db_column="sBRDate",
                        default=datetime.datetime(1900, 1, 1, 0, 0),
                        max_length=93,
                        null=True,
                    ),
                ),
                (
                    "version",
                    models.CharField(blank=True, db_column="sBRProgVer", max_length=120, null=True),
                ),
                ("flavor", models.CharField(blank=True, db_column="SBRProgFlvr", max_length=255)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sBRRateNo", max_length=93, null=True),
                ),
                (
                    "building_run_flag",
                    models.CharField(blank=True, db_column="sBRFlag", max_length=90, null=True),
                ),
                (
                    "export_type",
                    models.IntegerField(
                        choices=[
                            (1, "Standard Building"),
                            (2, "IA Base Building"),
                            (3, "IA Improved Building"),
                            (4, "UDRH As Is Building"),
                            (5, "UDRH Reference Building"),
                            (6, "ASHRAE Code Reference Building"),
                            (7, "ASHRAE Code Design Building"),
                            (8, "HERS Code Reference Building"),
                            (9, "HERS Code Design Building"),
                            (10, "1998 IECC Code Reference Building"),
                            (11, "1998 IECC Code Design Building"),
                            (12, "2000 IECC Code Reference Building"),
                            (13, "2000 IECC Code Design Building"),
                            (14, "2001 IECC Code Reference Building"),
                            (15, "2001 IECC Code Design Building"),
                            (16, "2003 IECC Code Reference Building"),
                            (17, "2003 IECC Code Design Building"),
                            (18, "2004 IECC Code Reference Building"),
                            (19, "2004 IECC Code Design Building"),
                            (20, "ECC of NY Code Reference Building"),
                            (21, "ECC of NY Code Design Building"),
                            (22, "ECC of NV Code Reference Building"),
                            (23, "ECC of NV Code Design Building"),
                            (24, "1992 MEC Code Reference Building"),
                            (25, "1992 MEC Code Design Building"),
                            (26, "1993 MEC Code Reference Building"),
                            (27, "1993 MEC Code Design Building"),
                            (28, "1995 MEC Code Reference Building"),
                            (29, "1995 MEC Code Design Building"),
                            (30, "2006 IECC Code Reference Building"),
                            (31, "2006 IECC Code Design Building"),
                            (32, "2009 IECC Code Reference Building"),
                            (33, "2009 IECC Code Design Building"),
                            (34, "ENERGY STAR V2 Code Reference Building"),
                            (35, "ENERGY STAR V2 Code Design Building"),
                            (36, "ENERGY STAR V2.5 Code Reference Building"),
                            (37, "ENERGY STAR V2.5 Code Design Building"),
                            (38, "FE PA New Homes Qualification Reference Building"),
                            (39, "FE PA New Homes Qualification Design Building"),
                            (40, "FE PA Savings Reference Building"),
                            (41, "FE PA Savings Design Building"),
                            (42, "2012 IECC Code Reference Building"),
                            (43, "2012 IECC Code Design Building"),
                            (44, "ENERGY STAR V3 Code Reference Building"),
                            (45, "ENERGY STAR V3 Code Design Building"),
                            (46, "FE OH New Homes 2006 IECC Code Reference Building"),
                            (47, "FE OH New Homes 2006 IECC Code Design Building"),
                            (48, "FE OH Savings Reference Building"),
                            (49, "FE OH Savings Design Building"),
                            (50, "EnerGuide Package J Reference Building"),
                            (51, "EnerGuide Package J Design Building"),
                            (52, "DOE Challenge Reference Building"),
                            (53, "DOE Challenge Design Building"),
                        ],
                        db_column="lBRExpTpe",
                        default=0,
                    ),
                ),
                (
                    "number_of_runs",
                    models.IntegerField(blank=True, db_column="nInstance", null=True),
                ),
                (
                    "udrh_filename",
                    models.CharField(blank=True, db_column="sBRUdrName", max_length=255, null=True),
                ),
                (
                    "udrh_checksum",
                    models.CharField(blank=True, db_column="sBRUdrChk", max_length=255, null=True),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="company.Company",
                    ),
                ),
                (
                    "references",
                    models.ManyToManyField(
                        related_name="base_building", to="remrate_data.Simulation"
                    ),
                ),
                (
                    "remrate_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="remrate.RemRateUser",
                    ),
                ),
                (
                    "similar",
                    models.ManyToManyField(
                        related_name="_simulation_similar_+", to="remrate_data.Simulation"
                    ),
                ),
            ],
            options={
                "verbose_name": "REM/Rate Data Set",
            },
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("site_label", models.CharField(blank=True, db_column="szSELabel", max_length=93)),
                ("city_number", models.IntegerField(blank=True, db_column="ISECity", null=True)),
                ("elevation", models.FloatField(blank=True, db_column="fSEElev", null=True)),
                (
                    "num_heating_season_days",
                    models.IntegerField(blank=True, db_column="nSEHS", null=True),
                ),
                (
                    "num_cooling_season_days",
                    models.IntegerField(blank=True, db_column="nSECS", null=True),
                ),
                (
                    "julian_cooling_day_start",
                    models.IntegerField(blank=True, db_column="nSECSJSDay", null=True),
                ),
                (
                    "heating_days_b65",
                    models.IntegerField(blank=True, db_column="nSEDegDayh", null=True),
                ),
                (
                    "cooling_days_b74",
                    models.IntegerField(blank=True, db_column="nSEDegDayc", null=True),
                ),
                (
                    "avg_seasonal_heating_temp",
                    models.FloatField(blank=True, db_column="fSETAmbHS", null=True),
                ),
                (
                    "avg_seasonal_cooling_temp",
                    models.FloatField(blank=True, db_column="fSETambCS", null=True),
                ),
                (
                    "heating_days_user_editable",
                    models.FloatField(blank=True, db_column="fSEHDD65", null=True),
                ),
                (
                    "cooling_days_user_editable",
                    models.FloatField(blank=True, db_column="fSECDH74", null=True),
                ),
                (
                    "climate_zone",
                    models.CharField(blank=True, db_column="sCLIMZONE", max_length=150, null=True),
                ),
                ("rating_number", models.CharField(blank=True, db_column="sRateNo", max_length=93)),
                (
                    "ashrae_weather_and_shielding_factor",
                    models.FloatField(blank=True, db_column="fASHRAEWSF", null=True),
                ),
                (
                    "annual_windspeed",
                    models.FloatField(blank=True, db_column="fAveWindSpd", null=True),
                ),
                (
                    "annual_ambient_air_temperature",
                    models.FloatField(blank=True, db_column="fAveAmbAirT", null=True),
                ),
                (
                    "simulation",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Skylight",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szSKName", max_length=93)),
                ("area", models.FloatField(db_column="fSKGlzArea", null=True)),
                (
                    "orientation",
                    models.FloatField(
                        choices=[
                            (5, "North"),
                            (4, "Northeast"),
                            (3, "East"),
                            (2, "Southeast"),
                            (1, "South"),
                            (7, "Southwest"),
                            (8, "West"),
                            (9, "Northwest"),
                            (0, "None"),
                        ],
                        db_column="nSKOr",
                        null=True,
                    ),
                ),
                ("pitch", models.IntegerField(db_column="fSKPitch", null=True)),
                (
                    "summer_shading_factor",
                    models.FloatField(
                        choices=[(1.0, "None"), (0.7, "Some"), (0.4, "Most"), (0.1, "Complete")],
                        db_column="fSKSumShad",
                        null=True,
                    ),
                ),
                (
                    "winter_shading_factor",
                    models.FloatField(
                        choices=[(1.0, "None"), (0.7, "Some"), (0.4, "Most"), (0.1, "Complete")],
                        db_column="fSKWtrShad",
                        null=True,
                    ),
                ),
                ("roof_number", models.IntegerField(db_column="nSKSurfNum", null=True)),
                ("_window_type_number", models.IntegerField(db_column="lSKWinTNo")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sSKRateNo", max_length=93),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Slab",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szSFName", max_length=93)),
                ("area", models.FloatField(db_column="fSFArea", null=True)),
                ("depth_below_grade", models.FloatField(db_column="fSFDep", null=True)),
                ("full_perimeter", models.FloatField(db_column="fSFPer", null=True)),
                ("exposed_perimeter", models.FloatField(db_column="fSFExPer", null=True)),
                ("on_grade_perimeter", models.FloatField(db_column="fSFOnPer", null=True)),
                ("_slab_type_number", models.IntegerField(db_column="lSFSlabTNo")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sSFRateNo", max_length=93),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
            options={
                "ordering": ("simulation", "area"),
            },
        ),
        migrations.CreateModel(
            name="SlabType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_slab_type_number", models.IntegerField(db_column="lSTSTNo")),
                ("name", models.CharField(blank=True, db_column="sSTType", max_length=93)),
                ("perimeter_r_value", models.FloatField(db_column="fSTPIns", null=True)),
                ("under_slab_r_value", models.FloatField(db_column="fSTUIns", null=True)),
                ("under_slab_width", models.FloatField(db_column="fSTFUWid", null=True)),
                (
                    "radiant_floor",
                    models.IntegerField(
                        choices=[(1, True), (2, False)], db_column="nSTRadiant", null=True
                    ),
                ),
                (
                    "perimeter_insulation_depth",
                    models.FloatField(db_column="fSTPInsDep", null=True),
                ),
                ("note", models.CharField(blank=True, db_column="sSTNote", max_length=765)),
                (
                    "insulation_grade",
                    models.IntegerField(
                        choices=[(1, "I"), (2, "II"), (3, "III")], db_column="nSTInsGrde", null=True
                    ),
                ),
                (
                    "floor_covering",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Carpet"),
                            (2, "Tile"),
                            (3, "Hardwood"),
                            (4, "Vinyl"),
                        ],
                        db_column="nSTFlrCvr",
                        null=True,
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SolarSystem",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                (
                    "type",
                    models.IntegerField(
                        choices=[
                            (1, "DHW heating only"),
                            (2, "DHW & Space heating"),
                            (3, "Space heating only"),
                            (4, "Hybrid"),
                            (0, "None"),
                        ],
                        db_column="nASSystem",
                        null=True,
                    ),
                ),
                (
                    "collector_loop_type",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Air, direct"),
                            (2, "Air, indirect"),
                            (3, "Liquid, direct"),
                            (4, "Liquid, indirect"),
                            (5, "Batch heater"),
                        ],
                        db_column="nASLoop",
                        null=True,
                    ),
                ),
                ("collector_area", models.FloatField(db_column="fASColArea", null=True)),
                (
                    "orientation",
                    models.IntegerField(
                        choices=[(0, "None"), (1, "South"), (2, "SE/SW"), (3, "East/West")],
                        db_column="nASOr",
                        null=True,
                    ),
                ),
                ("tilt", models.FloatField(db_column="nASTilt", null=True)),
                (
                    "specs",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Single glazing, flat black"),
                            (2, "Single glazing, selective"),
                            (3, "Double glazing, flat black"),
                            (4, "Double glazing, selective"),
                            (5, "Evacuated Tube"),
                        ],
                        db_column="nASSpecs",
                        null=True,
                    ),
                ),
                ("storage_volume", models.FloatField(db_column="fASStgVol", null=True)),
                ("rating_number", models.CharField(db_column="sASRateNo", max_length=93)),
                (
                    "building",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
                (
                    "simulation",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SunSpace",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("roof_area", models.FloatField(db_column="fSSRfArea", null=True)),
                ("roof_insulation", models.FloatField(db_column="fSSRFIns", null=True)),
                ("above_grade_wall_area", models.FloatField(db_column="fSSAGWArea", null=True)),
                (
                    "above_grade_wall_insulation",
                    models.FloatField(db_column="fSSAGWIns", null=True),
                ),
                ("below_grade_wall_area", models.FloatField(db_column="fSSBGWArea", null=True)),
                (
                    "below_grade_wall_insulation",
                    models.FloatField(db_column="fSSBGWIns", null=True),
                ),
                ("floor_area", models.FloatField(db_column="fSSArea", null=True)),
                ("floor_insulation", models.FloatField(db_column="fSSFrmIns", null=True)),
                ("frame_floor_perimeter", models.FloatField(db_column="fSSSlbPer", null=True)),
                ("slab_floor_depth", models.FloatField(db_column="fSSSlbDep", null=True)),
                ("slab_floor_thickness", models.FloatField(db_column="fSSSlbThk", null=True)),
                (
                    "slab_floor_perimeter_insulation",
                    models.FloatField(db_column="fSSSlbPIns", null=True),
                ),
                (
                    "slab_floor_underslab_insulation",
                    models.FloatField(db_column="fSSSlbUIns", null=True),
                ),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sSSRateNo", max_length=93),
                ),
                (
                    "building",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
                (
                    "simulation",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SunSpaceCommonWall",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szSSCName", max_length=93)),
                ("area", models.FloatField(db_column="fSSCArea", null=True)),
                (
                    "type",
                    models.IntegerField(
                        choices=[(0, "None"), (1, "Concrete"), (2, "Brick/Tile"), (3, "Water")],
                        db_column="nSSCMTyp",
                        null=True,
                    ),
                ),
                ("thickness", models.FloatField(db_column="fSSCMThk", null=True)),
                ("insulation_r_value", models.FloatField(db_column="fSSCIns", null=True)),
                ("automatic_fan_coupling", models.BooleanField(db_column="nSSCFan", default=False)),
                ("fan_flow_rate", models.FloatField(db_column="fSSCFlRate", null=True)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sSSCRateNo", max_length=93),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SunSpaceMass",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szSSMName", max_length=93)),
                ("area", models.FloatField(db_column="fSSMArea", null=True)),
                (
                    "type",
                    models.IntegerField(
                        choices=[(0, "None"), (1, "Concrete"), (2, "Brick/Tile"), (3, "Water")],
                        db_column="nSSMType",
                        null=True,
                    ),
                ),
                ("thickness", models.FloatField(db_column="fSSMThk", null=True)),
                ("water_storage_volume", models.FloatField(db_column="fSSMWVol", null=True)),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sSSMRateNo", max_length=93),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SunSpaceSkylight",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szSSSName", max_length=93)),
                ("glazing_area", models.FloatField(db_column="fSSSArea", null=True)),
                (
                    "orientation",
                    models.IntegerField(
                        choices=[
                            (5, "North"),
                            (4, "Northeast"),
                            (3, "East"),
                            (2, "Southeast"),
                            (1, "South"),
                            (7, "Southwest"),
                            (8, "West"),
                            (9, "Northwest"),
                            (0, "None"),
                        ],
                        db_column="nSSSOr",
                        null=True,
                    ),
                ),
                ("pitch", models.FloatField(db_column="fSSSPitch", null=True)),
                (
                    "summer_shading_factor",
                    models.FloatField(
                        choices=[(1.0, "None"), (0.7, "Some"), (0.4, "Most"), (0.1, "Complete")],
                        db_column="fSSSSum",
                        null=True,
                    ),
                ),
                (
                    "winter_shading_factor",
                    models.FloatField(
                        choices=[(1.0, "None"), (0.7, "Some"), (0.4, "Most"), (0.1, "Complete")],
                        db_column="fSSSWtr",
                        null=True,
                    ),
                ),
                ("_window_type_number", models.IntegerField(db_column="lSSSWdwTNo")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sSSSRateNo", max_length=93),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SunSpaceWindow",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szSSWName", max_length=93)),
                ("glazing_area", models.FloatField(db_column="fSSWArea", null=True)),
                (
                    "orientation",
                    models.IntegerField(
                        choices=[
                            (5, "North"),
                            (4, "Northeast"),
                            (3, "East"),
                            (2, "Southeast"),
                            (1, "South"),
                            (7, "Southwest"),
                            (8, "West"),
                            (9, "Northwest"),
                            (0, "None"),
                        ],
                        db_column="nSSWOr",
                        null=True,
                    ),
                ),
                (
                    "interior_summer_shading_factor",
                    models.FloatField(db_column="fSSWSum", null=True),
                ),
                (
                    "interior_winter_shading_factor",
                    models.FloatField(db_column="fSSWWtr", null=True),
                ),
                ("_window_type_number", models.IntegerField(db_column="lSSWWdwTNo")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sSSWRateNo", max_length=93),
                ),
                ("overhang_depth", models.FloatField(db_column="fSSOHDepth", null=True)),
                (
                    "overhang_depth_to_top_of_window",
                    models.FloatField(db_column="fSSOHToTop", null=True),
                ),
                (
                    "overhang_depth_to_bottom_of_window",
                    models.FloatField(db_column="fSSOHToBtm", null=True),
                ),
                (
                    "adjacent_summer_shading_factor",
                    models.FloatField(
                        choices=[(1.0, "None"), (0.7, "Some"), (0.4, "Most"), (0.1, "Complete")],
                        db_column="fSSAdjSum",
                        null=True,
                    ),
                ),
                (
                    "adjacent_winter_shading_factor",
                    models.FloatField(
                        choices=[(1.0, "None"), (0.7, "Some"), (0.4, "Most"), (0.1, "Complete")],
                        db_column="fSSAdjWtr",
                        null=True,
                    ),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UtilityRate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_utility_rate_no", models.IntegerField(db_column="lURURNo")),
                ("name", models.CharField(blank=True, db_column="sURName", max_length=93)),
                (
                    "fuel_type",
                    models.IntegerField(
                        choices=[
                            (1, "Natural gas"),
                            (2, "Propane"),
                            (3, "Fuel oil"),
                            (4, "Electric"),
                            (5, "Kerosene"),
                            (6, "Wood"),
                            (98, "Water"),
                        ],
                        db_column="nURFuelTyp",
                        null=True,
                    ),
                ),
                (
                    "units",
                    models.IntegerField(
                        choices=[
                            (0, "MMBtu"),
                            (1, "kWh"),
                            (2, "Gallons"),
                            (3, "CCF"),
                            (4, "Therms"),
                            (5, "Cords"),
                            (6, "MCF"),
                            (7, "kW_Htg"),
                            (8, "kW_Clg"),
                        ],
                        db_column="nURUnits",
                        null=True,
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Version",
            fields=[
                ("lid", models.IntegerField(db_column="lID", primary_key=True, serialize=False)),
                ("major", models.IntegerField(blank=True, db_column="lVersion", null=True)),
                ("minor", models.IntegerField(blank=True, db_column="lMinor", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="WallType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_wall_type_number", models.IntegerField(db_column="lWTWTNo")),
                ("stud_width", models.FloatField(db_column="fWTStudWdt", null=True)),
                ("stud_depth", models.FloatField(db_column="fWTStudDpt", null=True)),
                ("stud_spacing", models.FloatField(db_column="fWTStudSpg", null=True)),
                ("gypsum_thickness", models.FloatField(db_column="fWTGypThk", null=True)),
                ("continuous_insulation", models.FloatField(db_column="fWTContIns", null=True)),
                ("cavity_insulation", models.FloatField(db_column="fWTCvtyIns", null=True)),
                (
                    "cavity_insulation_thickness",
                    models.FloatField(db_column="fWTCInsThk", null=True),
                ),
                ("block_insulation", models.FloatField(db_column="fWTBlckIns", null=True)),
                (
                    "construction_type",
                    models.FloatField(
                        choices=[
                            (1, "Standard Wood Frame"),
                            (2, "Double Stud Wood Frame"),
                            (3, "Standard Steel Frame"),
                            (4, "Std Frame w/Brick Veneer"),
                            (5, "Solid Concrete or Stone"),
                            (6, "Double Brick"),
                            (7, "Hollow-Core Concrete Block"),
                            (8, "Structual Insulated Panel"),
                            (9, "Insulated Concrete Form"),
                            (10, "Adobe"),
                        ],
                        db_column="nWTCntnTyp",
                        default=0,
                    ),
                ),
                ("_composite_type_number", models.IntegerField(db_column="lWTCompNo")),
                ("quick_fill", models.BooleanField(db_column="bWTQFValid", default=False)),
                ("framing_factor", models.FloatField(db_column="fWTFF", null=True)),
                (
                    "default_framing_factors",
                    models.BooleanField(db_column="bWTDFLTFF", default=False),
                ),
                (
                    "note",
                    models.CharField(blank=True, db_column="sWTNote", max_length=255, null=True),
                ),
                (
                    "insulation_grade",
                    models.IntegerField(
                        choices=[(1, "I"), (2, "II"), (3, "III")], db_column="nWTInsGrde", null=True
                    ),
                ),
                (
                    "composite_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.CompositeType"
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Window",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_building_number", models.IntegerField(db_column="lBldgNo")),
                ("name", models.CharField(blank=True, db_column="szWDName", max_length=93)),
                ("area", models.FloatField(db_column="fWDArea", null=True)),
                (
                    "orientation",
                    models.IntegerField(
                        choices=[
                            (5, "North"),
                            (4, "Northeast"),
                            (3, "East"),
                            (2, "Southeast"),
                            (1, "South"),
                            (7, "Southwest"),
                            (8, "West"),
                            (9, "Northwest"),
                            (0, "None"),
                        ],
                        db_column="nWDOr",
                        null=True,
                    ),
                ),
                (
                    "interior_shading_summer_factor",
                    models.FloatField(db_column="fWDSumShad", null=True),
                ),
                (
                    "interior_shading_winter_factor",
                    models.FloatField(db_column="fWDWtrShad", null=True),
                ),
                ("wall_number", models.FloatField(db_column="nWDSurfNum", null=True)),
                ("foundation_number", models.FloatField(db_column="nWDSurfTyp", null=True)),
                ("_window_type_number", models.IntegerField(db_column="lWDWinTNo")),
                (
                    "rating_number",
                    models.CharField(blank=True, db_column="sWDRateNo", max_length=93),
                ),
                ("overhang_depth", models.FloatField(db_column="fWDOHDepth", null=True)),
                (
                    "overhang_depth_to_top_of_window",
                    models.FloatField(db_column="fWDOHToTop", null=True),
                ),
                (
                    "overhang_depth_to_bottom_of_window",
                    models.FloatField(db_column="fWDOHToBtm", null=True),
                ),
                (
                    "adjacent_shading_summer_factor",
                    models.FloatField(
                        choices=[(1.0, "None"), (0.7, "Some"), (0.4, "Most"), (0.1, "Complete")],
                        db_column="fWDAdjSum",
                        null=True,
                    ),
                ),
                (
                    "adjacent_shading_winter_factor",
                    models.FloatField(
                        choices=[(1.0, "None"), (0.7, "Some"), (0.4, "Most"), (0.1, "Complete")],
                        db_column="fWDAdjWtr",
                        null=True,
                    ),
                ),
                (
                    "building",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WindowType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("_result_number", models.IntegerField(db_column="lBldgRunNo")),
                ("_source_window_type_number", models.IntegerField(db_column="lWDTWinNo")),
                ("name", models.CharField(blank=True, db_column="sWDTType", max_length=93)),
                ("shgc", models.FloatField(db_column="fWDTSHGC", null=True)),
                ("u_value", models.FloatField(db_column="fWDTUValue", null=True)),
                ("note", models.CharField(blank=True, db_column="sWDTNote", max_length=765)),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="window",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.WindowType"
            ),
        ),
        migrations.AddField(
            model_name="sunspacewindow",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.WindowType"
            ),
        ),
        migrations.AddField(
            model_name="sunspaceskylight",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.WindowType"
            ),
        ),
        migrations.AddField(
            model_name="slab",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.SlabType"
            ),
        ),
        migrations.AddField(
            model_name="skylight",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.WindowType"
            ),
        ),
        migrations.AddField(
            model_name="simplifiedinput",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="seasonalrate",
            name="rate",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.UtilityRate"
            ),
        ),
        migrations.AddField(
            model_name="seasonalrate",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="roof",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="roof",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.CeilingType"
            ),
        ),
        migrations.AddField(
            model_name="results",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="resnetdisc",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="rejectedmeasure",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="regionalcode",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="photovoltaic",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="mandatoryrequirements",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="lightsandappliance",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="joist",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="integratedspacewaterheater",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="installedlightsandappliances",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="installedequipment",
            name="integrated_space_water_heater",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="remrate_data.IntegratedSpaceWaterHeater",
            ),
        ),
        migrations.AddField(
            model_name="installedequipment",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="infiltration",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="iecc",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="hotwaterheater",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="hotwaterdistribution",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="hers",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="hercinfo",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="heatpath",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="heater",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="groundsourceheatpumpwell",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="groundsourceheatpump",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="generalmechanicalequipment",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="fuelsummary",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="framefloor",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="framefloor",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.FloorType"
            ),
        ),
        migrations.AddField(
            model_name="foundationwalltype",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="foundationwall",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="foundationwall",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.FoundationWallType"
            ),
        ),
        migrations.AddField(
            model_name="florida",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="floortype",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="energystarrequirements",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="energystar",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="economicparameters",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="economic",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="ductsystem",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="duct",
            name="duct_system",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.DuctSystem"
            ),
        ),
        migrations.AddField(
            model_name="duct",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="dualfuelheatpump",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="doortype",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="door",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="door",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.DoorType"
            ),
        ),
        migrations.AddField(
            model_name="doechallenge",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="datatracker",
            name="simulation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="remrate_data.Simulation",
            ),
        ),
        migrations.AddField(
            model_name="costrate",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="compositetype",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="compliance",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="ceilingtype",
            name="composite_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.CompositeType"
            ),
        ),
        migrations.AddField(
            model_name="ceilingtype",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="buildinginfo",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="building",
            name="building_info",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="remrate_data.BuildingInfo",
            ),
        ),
        migrations.AddField(
            model_name="building",
            name="company",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="company.Company",
            ),
        ),
        migrations.AddField(
            model_name="building",
            name="remrate_user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="remrate.RemRateUser",
            ),
        ),
        migrations.AddField(
            model_name="building",
            name="simulation",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="block",
            name="seasonal_rate",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.SeasonalRate"
            ),
        ),
        migrations.AddField(
            model_name="block",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="airsourceheatpump",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="airconditioner",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="additionalmass",
            name="building",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
            ),
        ),
        migrations.AddField(
            model_name="additionalmass",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="acceptedmeasure",
            name="cost_rate",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.CostRate"
            ),
        ),
        migrations.AddField(
            model_name="acceptedmeasure",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="abovegradewall",
            name="building",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Building"
            ),
        ),
        migrations.AddField(
            model_name="abovegradewall",
            name="simulation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.Simulation"
            ),
        ),
        migrations.AddField(
            model_name="abovegradewall",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="remrate_data.WallType"
            ),
        ),
    ]
