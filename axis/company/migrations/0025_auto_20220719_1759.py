# Generated by Django 3.2.14 on 2022-07-19 17:59

from django.db import migrations, transaction


@transaction.atomic
def forward(apps, schema_editor):
    Company = apps.get_model("company", "Company")
    ProviderOrganization = apps.get_model("company", "ProviderOrganization")
    RaterOrganization = apps.get_model("company", "RaterOrganization")
    HvacOrganization = apps.get_model("company", "HvacOrganization")
    UtilityOrganization = apps.get_model("company", "UtilityOrganization")

    # providers
    providers = ProviderOrganization.objects.all()
    for provider in providers:
        company = Company.objects.get(id=provider.company_ptr.id)
        company.temp_provider_id = provider.provider_id
        company.temp_auto_submit_to_registry = provider.auto_submit_to_registry
        company.temp_is_sample_eligible = provider.is_sample_eligible
        company.save(saved_from_place=True)

    # run data check
    providers = ProviderOrganization.objects.all()
    for provider in providers:
        assert provider.company_ptr.temp_provider_id == provider.provider_id
        assert provider.company_ptr.temp_auto_submit_to_registry == provider.auto_submit_to_registry
        assert provider.company_ptr.temp_is_sample_eligible == provider.is_sample_eligible

    # raters
    raters = RaterOrganization.objects.all()
    for rater in raters:
        company = Company.objects.get(id=rater.company_ptr.id)
        company.temp_certification_number = rater.certification_number
        company.temp_is_sample_eligible = rater.is_sample_eligible
        company.save(saved_from_place=True)

    # run data check
    raters = RaterOrganization.objects.all()
    for rater in raters:
        assert rater.company_ptr.temp_certification_number == rater.certification_number
        assert rater.company_ptr.temp_is_sample_eligible == rater.is_sample_eligible

    # hvac
    hvacs = HvacOrganization.objects.all()
    for hvac in hvacs:
        company = Company.objects.get(id=hvac.company_ptr.id)
        company.temp_hquito_accredited = hvac.hquito_accredited
        company.save(saved_from_place=True)

    # run data check
    hvacs = HvacOrganization.objects.all()
    for hvac in hvacs:
        assert hvac.company_ptr.temp_hquito_accredited == hvac.hquito_accredited

    # utility
    utilities = UtilityOrganization.objects.all()
    for utility in utilities:
        company = Company.objects.get(id=utility.company_ptr.id)
        company.temp_electricity_provider = utility.electricity_provider
        company.temp_gas_provider = utility.gas_provider
        company.temp_water_provider = utility.water_provider
        company.save(saved_from_place=True)

    # run data check
    utilities = UtilityOrganization.objects.all()
    for utility in utilities:
        assert utility.company_ptr.temp_electricity_provider == utility.electricity_provider
        assert utility.company_ptr.temp_gas_provider == utility.gas_provider
        assert utility.company_ptr.temp_water_provider == utility.water_provider


def backward(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("company", "0024_auto_20220719_1640"),
    ]

    operations = [
        migrations.RunPython(forward, backward),
    ]
