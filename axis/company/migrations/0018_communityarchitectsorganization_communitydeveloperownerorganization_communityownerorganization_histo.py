# Generated by Django 3.1.3 on 2020-12-30 11:15

import django.db.models.deletion
import localflavor.us.models
import phonenumber_field.modelfields
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("geographic", "0003_usstate"),
        ("geocoder", "0011_merge_20200701_0829"),
        ("company", "0017_auto_20201125_1831"),
    ]

    operations = [
        migrations.CreateModel(
            name="CommunityArchitectsOrganization",
            fields=[
                (
                    "company_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="company.company",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Community Architects Companies",
            },
            bases=("company.company",),
        ),
        migrations.CreateModel(
            name="CommunityDeveloperOwnerOrganization",
            fields=[
                (
                    "company_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="company.company",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Community Developer Owner Companies",
            },
            bases=("company.company",),
        ),
        migrations.CreateModel(
            name="CommunityOwnerOrganization",
            fields=[
                (
                    "company_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="company.company",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Community Developer Companies",
            },
            bases=("company.company",),
        ),
        migrations.CreateModel(
            name="HistoricalCommunityOwnerOrganization",
            fields=[
                (
                    "company_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        to="company.company",
                    ),
                ),
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        editable=False, max_length=2, null=True, verbose_name="State"
                    ),
                ),
                ("confirmed_address", models.BooleanField(default=False)),
                (
                    "address_override",
                    models.BooleanField(
                        default=False,
                        help_text="Bypass the attempt to normalize the address via a mapping service. Changing address fields after marking this option will unmark it.",
                        verbose_name="Override address",
                    ),
                ),
                (
                    "street_line1",
                    models.CharField(
                        blank=True,
                        help_text="Enter the street number and street name of the home (e.g. 123 Main St).",
                        max_length=100,
                        null=True,
                        verbose_name="Street Address",
                    ),
                ),
                (
                    "street_line2",
                    models.CharField(
                        blank=True,
                        help_text="Enter the unit number (where multiple dwelling units share a common street address), or leave blank if not applicable.",
                        max_length=100,
                        null=True,
                        verbose_name="Unit number (if applicable)",
                    ),
                ),
                (
                    "zipcode",
                    models.CharField(
                        help_text="Enter the 5-digit ZIP Code of home.",
                        max_length=15,
                        null=True,
                        verbose_name="ZIP Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='Type the first few letters of the name of the company that you wish to associate with.  If the company you wish to associate with already exists within the database, select it from the "Select from existing" list and click on "Submit" at the bottom of this page to create the association.  If the company does not exist within the database, type the full name of the company, select it in the "Create new" list, and populate the fields below.',
                        max_length=255,
                    ),
                ),
                (
                    "office_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        help_text="Enter the main company phone number in the format XXX-XXX-XXXX.",
                        max_length=128,
                        null=True,
                        region=None,
                    ),
                ),
                (
                    "home_page",
                    models.URLField(
                        blank=True,
                        help_text="Optional field - Enter the website for the company.",
                        null=True,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "default_email",
                    models.EmailField(
                        blank=True,
                        help_text="Enter a default email address for the company.",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "company_type",
                    models.CharField(
                        choices=[
                            ("builder", "Builder"),
                            ("eep", "Program Sponsor"),
                            ("provider", "Rating Provider"),
                            ("rater", "Rating Company"),
                            ("utility", "Utility Company"),
                            ("hvac", "HVAC Contractor"),
                            ("qa", "QA/QC Company"),
                            ("general", "General Company"),
                        ],
                        max_length=32,
                    ),
                ),
                ("slug", models.SlugField(verbose_name="slug")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Master Switch - This will remove them from everything",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False, help_text="The allows the company to be viewed publicly."
                    ),
                ),
                (
                    "is_customer",
                    models.BooleanField(
                        default=False, help_text="If the company is a paying us they are a customer"
                    ),
                ),
                ("is_eep_sponsor", models.BooleanField(default=False)),
                (
                    "auto_add_direct_relationships",
                    models.BooleanField(
                        default=False,
                        help_text="Enabling this will allow any company that wants you to have a relationship with another object (i.e. subdivision, home, floorplan, etc) to automatically be accepted.",
                    ),
                ),
                (
                    "inspection_grade_type",
                    models.IntegerField(
                        choices=[(1, "Letter grades"), (2, "Numeric grades")], default=1
                    ),
                ),
                (
                    "worker_compensation_insurance",
                    models.BooleanField(
                        default=False,
                        help_text="Worker Compensation insurance is not required in the state(s) that this company operates in",
                    ),
                ),
                (
                    "display_raw_addresses",
                    models.BooleanField(
                        default=False,
                        help_text="Set preference to view addresses as-entered rather than normalized by the geocoder.  Addresses will continue to be geocoded, but the results not displayed.",
                    ),
                ),
                (
                    "logo",
                    models.TextField(blank=True, max_length=100, null=True, verbose_name="Logo"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1
                    ),
                ),
                (
                    "city",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text='Type the first few letters of the name of the city the home is located in and select the correct city/state/county combination from the list presented. If the correct city is not available, click "Add New" to add a city to the database.',
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.city",
                        verbose_name="City/State",
                    ),
                ),
                (
                    "climate_zone",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.climatezone",
                    ),
                ),
                (
                    "geocode_response",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The response this place was constructed from.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geocoder.geocoderesponse",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="auth.group",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "metro",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.metro",
                        verbose_name="Metro",
                    ),
                ),
                (
                    "place",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.place",
                    ),
                ),
                (
                    "shipping_geocode",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geocoder.geocode",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical community owner organization",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCommunityDeveloperOwnerOrganization",
            fields=[
                (
                    "company_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        to="company.company",
                    ),
                ),
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        editable=False, max_length=2, null=True, verbose_name="State"
                    ),
                ),
                ("confirmed_address", models.BooleanField(default=False)),
                (
                    "address_override",
                    models.BooleanField(
                        default=False,
                        help_text="Bypass the attempt to normalize the address via a mapping service. Changing address fields after marking this option will unmark it.",
                        verbose_name="Override address",
                    ),
                ),
                (
                    "street_line1",
                    models.CharField(
                        blank=True,
                        help_text="Enter the street number and street name of the home (e.g. 123 Main St).",
                        max_length=100,
                        null=True,
                        verbose_name="Street Address",
                    ),
                ),
                (
                    "street_line2",
                    models.CharField(
                        blank=True,
                        help_text="Enter the unit number (where multiple dwelling units share a common street address), or leave blank if not applicable.",
                        max_length=100,
                        null=True,
                        verbose_name="Unit number (if applicable)",
                    ),
                ),
                (
                    "zipcode",
                    models.CharField(
                        help_text="Enter the 5-digit ZIP Code of home.",
                        max_length=15,
                        null=True,
                        verbose_name="ZIP Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='Type the first few letters of the name of the company that you wish to associate with.  If the company you wish to associate with already exists within the database, select it from the "Select from existing" list and click on "Submit" at the bottom of this page to create the association.  If the company does not exist within the database, type the full name of the company, select it in the "Create new" list, and populate the fields below.',
                        max_length=255,
                    ),
                ),
                (
                    "office_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        help_text="Enter the main company phone number in the format XXX-XXX-XXXX.",
                        max_length=128,
                        null=True,
                        region=None,
                    ),
                ),
                (
                    "home_page",
                    models.URLField(
                        blank=True,
                        help_text="Optional field - Enter the website for the company.",
                        null=True,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "default_email",
                    models.EmailField(
                        blank=True,
                        help_text="Enter a default email address for the company.",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "company_type",
                    models.CharField(
                        choices=[
                            ("builder", "Builder"),
                            ("eep", "Program Sponsor"),
                            ("provider", "Rating Provider"),
                            ("rater", "Rating Company"),
                            ("utility", "Utility Company"),
                            ("hvac", "HVAC Contractor"),
                            ("qa", "QA/QC Company"),
                            ("general", "General Company"),
                        ],
                        max_length=32,
                    ),
                ),
                ("slug", models.SlugField(verbose_name="slug")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Master Switch - This will remove them from everything",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False, help_text="The allows the company to be viewed publicly."
                    ),
                ),
                (
                    "is_customer",
                    models.BooleanField(
                        default=False, help_text="If the company is a paying us they are a customer"
                    ),
                ),
                ("is_eep_sponsor", models.BooleanField(default=False)),
                (
                    "auto_add_direct_relationships",
                    models.BooleanField(
                        default=False,
                        help_text="Enabling this will allow any company that wants you to have a relationship with another object (i.e. subdivision, home, floorplan, etc) to automatically be accepted.",
                    ),
                ),
                (
                    "inspection_grade_type",
                    models.IntegerField(
                        choices=[(1, "Letter grades"), (2, "Numeric grades")], default=1
                    ),
                ),
                (
                    "worker_compensation_insurance",
                    models.BooleanField(
                        default=False,
                        help_text="Worker Compensation insurance is not required in the state(s) that this company operates in",
                    ),
                ),
                (
                    "display_raw_addresses",
                    models.BooleanField(
                        default=False,
                        help_text="Set preference to view addresses as-entered rather than normalized by the geocoder.  Addresses will continue to be geocoded, but the results not displayed.",
                    ),
                ),
                (
                    "logo",
                    models.TextField(blank=True, max_length=100, null=True, verbose_name="Logo"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1
                    ),
                ),
                (
                    "city",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text='Type the first few letters of the name of the city the home is located in and select the correct city/state/county combination from the list presented. If the correct city is not available, click "Add New" to add a city to the database.',
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.city",
                        verbose_name="City/State",
                    ),
                ),
                (
                    "climate_zone",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.climatezone",
                    ),
                ),
                (
                    "geocode_response",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The response this place was constructed from.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geocoder.geocoderesponse",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="auth.group",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "metro",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.metro",
                        verbose_name="Metro",
                    ),
                ),
                (
                    "place",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.place",
                    ),
                ),
                (
                    "shipping_geocode",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geocoder.geocode",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical community developer owner organization",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCommunityArchitectsOrganization",
            fields=[
                (
                    "company_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        to="company.company",
                    ),
                ),
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        editable=False, max_length=2, null=True, verbose_name="State"
                    ),
                ),
                ("confirmed_address", models.BooleanField(default=False)),
                (
                    "address_override",
                    models.BooleanField(
                        default=False,
                        help_text="Bypass the attempt to normalize the address via a mapping service. Changing address fields after marking this option will unmark it.",
                        verbose_name="Override address",
                    ),
                ),
                (
                    "street_line1",
                    models.CharField(
                        blank=True,
                        help_text="Enter the street number and street name of the home (e.g. 123 Main St).",
                        max_length=100,
                        null=True,
                        verbose_name="Street Address",
                    ),
                ),
                (
                    "street_line2",
                    models.CharField(
                        blank=True,
                        help_text="Enter the unit number (where multiple dwelling units share a common street address), or leave blank if not applicable.",
                        max_length=100,
                        null=True,
                        verbose_name="Unit number (if applicable)",
                    ),
                ),
                (
                    "zipcode",
                    models.CharField(
                        help_text="Enter the 5-digit ZIP Code of home.",
                        max_length=15,
                        null=True,
                        verbose_name="ZIP Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='Type the first few letters of the name of the company that you wish to associate with.  If the company you wish to associate with already exists within the database, select it from the "Select from existing" list and click on "Submit" at the bottom of this page to create the association.  If the company does not exist within the database, type the full name of the company, select it in the "Create new" list, and populate the fields below.',
                        max_length=255,
                    ),
                ),
                (
                    "office_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        help_text="Enter the main company phone number in the format XXX-XXX-XXXX.",
                        max_length=128,
                        null=True,
                        region=None,
                    ),
                ),
                (
                    "home_page",
                    models.URLField(
                        blank=True,
                        help_text="Optional field - Enter the website for the company.",
                        null=True,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "default_email",
                    models.EmailField(
                        blank=True,
                        help_text="Enter a default email address for the company.",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "company_type",
                    models.CharField(
                        choices=[
                            ("builder", "Builder"),
                            ("eep", "Program Sponsor"),
                            ("provider", "Rating Provider"),
                            ("rater", "Rating Company"),
                            ("utility", "Utility Company"),
                            ("hvac", "HVAC Contractor"),
                            ("qa", "QA/QC Company"),
                            ("general", "General Company"),
                        ],
                        max_length=32,
                    ),
                ),
                ("slug", models.SlugField(verbose_name="slug")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Master Switch - This will remove them from everything",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False, help_text="The allows the company to be viewed publicly."
                    ),
                ),
                (
                    "is_customer",
                    models.BooleanField(
                        default=False, help_text="If the company is a paying us they are a customer"
                    ),
                ),
                ("is_eep_sponsor", models.BooleanField(default=False)),
                (
                    "auto_add_direct_relationships",
                    models.BooleanField(
                        default=False,
                        help_text="Enabling this will allow any company that wants you to have a relationship with another object (i.e. subdivision, home, floorplan, etc) to automatically be accepted.",
                    ),
                ),
                (
                    "inspection_grade_type",
                    models.IntegerField(
                        choices=[(1, "Letter grades"), (2, "Numeric grades")], default=1
                    ),
                ),
                (
                    "worker_compensation_insurance",
                    models.BooleanField(
                        default=False,
                        help_text="Worker Compensation insurance is not required in the state(s) that this company operates in",
                    ),
                ),
                (
                    "display_raw_addresses",
                    models.BooleanField(
                        default=False,
                        help_text="Set preference to view addresses as-entered rather than normalized by the geocoder.  Addresses will continue to be geocoded, but the results not displayed.",
                    ),
                ),
                (
                    "logo",
                    models.TextField(blank=True, max_length=100, null=True, verbose_name="Logo"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1
                    ),
                ),
                (
                    "city",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text='Type the first few letters of the name of the city the home is located in and select the correct city/state/county combination from the list presented. If the correct city is not available, click "Add New" to add a city to the database.',
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.city",
                        verbose_name="City/State",
                    ),
                ),
                (
                    "climate_zone",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.climatezone",
                    ),
                ),
                (
                    "geocode_response",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The response this place was constructed from.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geocoder.geocoderesponse",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="auth.group",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "metro",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.metro",
                        verbose_name="Metro",
                    ),
                ),
                (
                    "place",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.place",
                    ),
                ),
                (
                    "shipping_geocode",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geocoder.geocode",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical community architects organization",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
