# Generated by Django 1.11.16 on 2018-10-08 18:15

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import localflavor.us.models
import re
import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("geographic", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("home", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalResoGreenVerification",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "GreenBuildingVerificationType",
                    models.IntegerField(
                        choices=[
                            (1, "Certified Passive House"),
                            (2, "ENERGY STAR Certified Homes"),
                            (3, "EnerPHit"),
                            (4, "HERS Index Score"),
                            (5, "Home Energy Score"),
                            (
                                6,
                                "Home Energy Upgrade Certificate of Energy Efficiency Improvements",
                            ),
                            (7, "Home Energy Upgrade Certificate of Energy Efficiency Performance"),
                            (8, "Home Performance with ENERGY STAR"),
                            (9, "Indoor airPLUS"),
                            (10, "LEED For Homes"),
                            (11, "Living Building Challenge"),
                            (12, "NGBS New Construction"),
                            (13, "NGBS Small Projects Remodel"),
                            (14, "NGBS Whole-Home Remodel"),
                            (15, "PHIUS+"),
                            (16, "WaterSense"),
                            (17, "Zero Energy Ready Home"),
                        ]
                    ),
                ),
                ("GreenVerificationBody", models.CharField(blank=True, max_length=64, null=True)),
                ("GreenVerificationDate", models.DateTimeField(blank=True, null=True)),
                ("GreenVerificationMetric", models.CharField(blank=True, max_length=64, null=True)),
                ("GreenVerificationRating", models.CharField(blank=True, max_length=64, null=True)),
                ("GreenVerificationSource", models.CharField(blank=True, max_length=64, null=True)),
                ("GreenVerificationStatus", models.CharField(blank=True, max_length=64, null=True)),
                ("GreenVerificationURL", models.CharField(blank=True, max_length=128, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_date", models.DateTimeField()),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1
                    ),
                ),
            ],
            options={
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
                "verbose_name": "historical reso green verification",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalResoHome",
            fields=[
                ("ListingKeyNumeric", models.IntegerField(blank=True, db_index=True)),
                ("AboveGradeFinishedArea", models.FloatField(blank=True, null=True)),
                (
                    "AboveGradeFinishedAreaSource",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "REM/Rate\xae Energy Model"),
                            (2, "Ekotrope Energy Model"),
                            (3, ""),
                        ],
                        null=True,
                    ),
                ),
                (
                    "AboveGradeFinishedAreaUnits",
                    models.IntegerField(
                        blank=True, choices=[(1, "Square Feet"), (2, "Square Meters")], null=True
                    ),
                ),
                (
                    "Basement",
                    models.CharField(
                        choices=[
                            (1, "Slab"),
                            (2, "Open crawl space"),
                            (3, "Enclosed crawl space"),
                            (4, "Conditioned basement"),
                            (5, "Unconditioned basement"),
                            (6, "More than one type"),
                            (7, "Apartment above conditioned space"),
                            (8, "Conditioned crawl space"),
                        ],
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(r"^\\d+(?:\\,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("BuilderModel", models.CharField(max_length=50)),
                ("BuilderName", models.CharField(max_length=50)),
                ("BuildingAreaTotal", models.FloatField(blank=True, null=True)),
                (
                    "BuildingAreaSource",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "REM/Rate\xae Energy Model"),
                            (2, "Ekotrope Energy Model"),
                            (3, ""),
                        ],
                        null=True,
                    ),
                ),
                (
                    "BuildingAreaUnits",
                    models.IntegerField(
                        blank=True, choices=[(1, "Square Feet"), (2, "Square Meters")], null=True
                    ),
                ),
                (
                    "Cooling",
                    models.CharField(
                        blank=True,
                        choices=[
                            (1, "Air conditioner"),
                            (2, "Air-source heat pump"),
                            (3, "Ground-source heat pump"),
                            (4, "Evaporative cooler"),
                            (90, "ARI 330/Closed Loop Ground-source heat pump"),
                            (91, "ARI 325/Open Loop Ground-source heat pump"),
                            (92, "Dual Fuel heat Pump"),
                            (33, "Integrated Space Water Heater"),
                        ],
                        max_length=64,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(r"^\\d+(?:\\,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "CoolingYN",
                    models.BooleanField(
                        null=True,
                    ),
                ),
                (
                    "GreenBuildingVerificationType",
                    models.CharField(
                        blank=True,
                        choices=[
                            (1, "Certified Passive House"),
                            (2, "ENERGY STAR Certified Homes"),
                            (3, "EnerPHit"),
                            (4, "HERS Index Score"),
                            (5, "Home Energy Score"),
                            (
                                6,
                                "Home Energy Upgrade Certificate of Energy Efficiency Improvements",
                            ),
                            (7, "Home Energy Upgrade Certificate of Energy Efficiency Performance"),
                            (8, "Home Performance with ENERGY STAR"),
                            (9, "Indoor airPLUS"),
                            (10, "LEED For Homes"),
                            (11, "Living Building Challenge"),
                            (12, "NGBS New Construction"),
                            (13, "NGBS Small Projects Remodel"),
                            (14, "NGBS Whole-Home Remodel"),
                            (15, "PHIUS+"),
                            (16, "WaterSense"),
                            (17, "Zero Energy Ready Home"),
                        ],
                        max_length=64,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(r"^\\d+(?:\\,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("ElectricExpense", models.FloatField(blank=True, null=True)),
                (
                    "ElectricOnPropertyYN",
                    models.BooleanField(
                        null=True,
                    ),
                ),
                ("GasExpense", models.FloatField(blank=True, null=True)),
                (
                    "GasOnPropertyYN",
                    models.BooleanField(
                        null=True,
                    ),
                ),
                (
                    "Heating",
                    models.CharField(
                        blank=True,
                        choices=[
                            (1, "Fuel-fired air " "distribution heater"),
                            (2, "Fuel-fired hydronic distribution heater"),
                            (3, "Fuel-fired unit heater"),
                            (4, "Fuel-fired unvented unit heater"),
                            (5, "Electric baseboard or radiant heater"),
                            (6, "Electric air distribution"),
                            (7, "Electric hydronic distribution"),
                            (8, "Air-source heat pump"),
                            (9, "Ground-source heat pump"),
                            (90, "ARI 330/Closed Loop Ground-source heat pump"),
                            (91, "ARI 325/Open Loop Ground-source heat pump"),
                            (92, "Dual Fuel heat Pump"),
                            (33, "Integrated Space Water Heater"),
                        ],
                        max_length=64,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(r"^\\d+(?:\\,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "HeatingYN",
                    models.BooleanField(
                        null=True,
                    ),
                ),
                ("Latitude", models.FloatField(blank=True, null=True)),
                ("Longitude", models.FloatField(blank=True, null=True)),
                ("PostalCode", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "StateOrProvince",
                    localflavor.us.models.USStateField(
                        blank=True,
                        choices=[
                            (b"AL", "Alabama"),
                            (b"AK", "Alaska"),
                            (b"AS", "American Samoa"),
                            (b"AZ", "Arizona"),
                            (b"AR", "Arkansas"),
                            (b"AA", "Armed Forces Americas"),
                            (b"AE", "Armed Forces Europe"),
                            (b"AP", "Armed Forces Pacific"),
                            (b"CA", "California"),
                            (b"CO", "Colorado"),
                            (b"CT", "Connecticut"),
                            (b"DE", "Delaware"),
                            (b"DC", "District of Columbia"),
                            (b"FL", "Florida"),
                            (b"GA", "Georgia"),
                            (b"GU", "Guam"),
                            (b"HI", "Hawaii"),
                            (b"ID", "Idaho"),
                            (b"IL", "Illinois"),
                            (b"IN", "Indiana"),
                            (b"IA", "Iowa"),
                            (b"KS", "Kansas"),
                            (b"KY", "Kentucky"),
                            (b"LA", "Louisiana"),
                            (b"ME", "Maine"),
                            (b"MD", "Maryland"),
                            (b"MA", "Massachusetts"),
                            (b"MI", "Michigan"),
                            (b"MN", "Minnesota"),
                            (b"MS", "Mississippi"),
                            (b"MO", "Missouri"),
                            (b"MT", "Montana"),
                            (b"NE", "Nebraska"),
                            (b"NV", "Nevada"),
                            (b"NH", "New Hampshire"),
                            (b"NJ", "New Jersey"),
                            (b"NM", "New Mexico"),
                            (b"NY", "New York"),
                            (b"NC", "North Carolina"),
                            (b"ND", "North Dakota"),
                            (b"MP", "Northern Mariana Islands"),
                            (b"OH", "Ohio"),
                            (b"OK", "Oklahoma"),
                            (b"OR", "Oregon"),
                            (b"PA", "Pennsylvania"),
                            (b"PR", "Puerto Rico"),
                            (b"RI", "Rhode Island"),
                            (b"SC", "South Carolina"),
                            (b"SD", "South Dakota"),
                            (b"TN", "Tennessee"),
                            (b"TX", "Texas"),
                            (b"UT", "Utah"),
                            (b"VT", "Vermont"),
                            (b"VI", "Virgin Islands"),
                            (b"VA", "Virginia"),
                            (b"WA", "Washington"),
                            (b"WV", "West Virginia"),
                            (b"WI", "Wisconsin"),
                            (b"WY", "Wyoming"),
                        ],
                        max_length=2,
                        null=True,
                    ),
                ),
                ("Stories", models.IntegerField(blank=True, null=True)),
                ("StoriesTotal", models.IntegerField(blank=True, null=True)),
                ("SubdivisionName", models.CharField(max_length=50)),
                ("YearBuilt", models.IntegerField(blank=True, null=True)),
                (
                    "YearBuiltSource",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "REM/Rate\xae Energy Model"),
                            (2, "Ekotrope Energy Model"),
                            (3, ""),
                        ],
                        null=True,
                    ),
                ),
                ("AddressLine1", models.CharField(blank=True, max_length=128, null=True)),
                ("AddressLine2", models.CharField(blank=True, max_length=128, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_date", models.DateTimeField()),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1
                    ),
                ),
                (
                    "City",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.City",
                    ),
                ),
                (
                    "CountyOrParish",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="geographic.County",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "home",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="home.Home",
                    ),
                ),
                (
                    "latest_home_status",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="home.EEPProgramHomeStatus",
                    ),
                ),
            ],
            options={
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
                "verbose_name": "historical reso home",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ResoGreenVerification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "GreenBuildingVerificationType",
                    models.IntegerField(
                        choices=[
                            (1, "Certified Passive House"),
                            (2, "ENERGY STAR Certified Homes"),
                            (3, "EnerPHit"),
                            (4, "HERS Index Score"),
                            (5, "Home Energy Score"),
                            (
                                6,
                                "Home Energy Upgrade Certificate of Energy Efficiency Improvements",
                            ),
                            (7, "Home Energy Upgrade Certificate of Energy Efficiency Performance"),
                            (8, "Home Performance with ENERGY STAR"),
                            (9, "Indoor airPLUS"),
                            (10, "LEED For Homes"),
                            (11, "Living Building Challenge"),
                            (12, "NGBS New Construction"),
                            (13, "NGBS Small Projects Remodel"),
                            (14, "NGBS Whole-Home Remodel"),
                            (15, "PHIUS+"),
                            (16, "WaterSense"),
                            (17, "Zero Energy Ready Home"),
                        ]
                    ),
                ),
                ("GreenVerificationBody", models.CharField(blank=True, max_length=64, null=True)),
                ("GreenVerificationDate", models.DateTimeField(blank=True, null=True)),
                ("GreenVerificationMetric", models.CharField(blank=True, max_length=64, null=True)),
                ("GreenVerificationRating", models.CharField(blank=True, max_length=64, null=True)),
                ("GreenVerificationSource", models.CharField(blank=True, max_length=64, null=True)),
                ("GreenVerificationStatus", models.CharField(blank=True, max_length=64, null=True)),
                ("GreenVerificationURL", models.CharField(blank=True, max_length=128, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ResoHome",
            fields=[
                ("ListingKeyNumeric", models.AutoField(primary_key=True, serialize=False)),
                ("AboveGradeFinishedArea", models.FloatField(blank=True, null=True)),
                (
                    "AboveGradeFinishedAreaSource",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "REM/Rate\xae Energy Model"),
                            (2, "Ekotrope Energy Model"),
                            (3, ""),
                        ],
                        null=True,
                    ),
                ),
                (
                    "AboveGradeFinishedAreaUnits",
                    models.IntegerField(
                        blank=True, choices=[(1, "Square Feet"), (2, "Square Meters")], null=True
                    ),
                ),
                (
                    "Basement",
                    models.CharField(
                        choices=[
                            (1, "Slab"),
                            (2, "Open crawl space"),
                            (3, "Enclosed crawl space"),
                            (4, "Conditioned basement"),
                            (5, "Unconditioned basement"),
                            (6, "More than one type"),
                            (7, "Apartment above conditioned space"),
                            (8, "Conditioned crawl space"),
                        ],
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(r"^\\d+(?:\\,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("BuilderModel", models.CharField(max_length=50)),
                ("BuilderName", models.CharField(max_length=50)),
                ("BuildingAreaTotal", models.FloatField(blank=True, null=True)),
                (
                    "BuildingAreaSource",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "REM/Rate\xae Energy Model"),
                            (2, "Ekotrope Energy Model"),
                            (3, ""),
                        ],
                        null=True,
                    ),
                ),
                (
                    "BuildingAreaUnits",
                    models.IntegerField(
                        blank=True, choices=[(1, "Square Feet"), (2, "Square Meters")], null=True
                    ),
                ),
                (
                    "Cooling",
                    models.CharField(
                        blank=True,
                        choices=[
                            (1, "Air conditioner"),
                            (2, "Air-source heat pump"),
                            (3, "Ground-source heat pump"),
                            (4, "Evaporative cooler"),
                            (90, "ARI 330/Closed Loop Ground-source heat pump"),
                            (91, "ARI 325/Open Loop Ground-source heat pump"),
                            (92, "Dual Fuel heat Pump"),
                            (33, "Integrated Space Water Heater"),
                        ],
                        max_length=64,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(r"^\\d+(?:\\,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "CoolingYN",
                    models.BooleanField(
                        null=True,
                    ),
                ),
                (
                    "GreenBuildingVerificationType",
                    models.CharField(
                        blank=True,
                        choices=[
                            (1, "Certified Passive House"),
                            (2, "ENERGY STAR Certified Homes"),
                            (3, "EnerPHit"),
                            (4, "HERS Index Score"),
                            (5, "Home Energy Score"),
                            (
                                6,
                                "Home Energy Upgrade Certificate of Energy Efficiency Improvements",
                            ),
                            (7, "Home Energy Upgrade Certificate of Energy Efficiency Performance"),
                            (8, "Home Performance with ENERGY STAR"),
                            (9, "Indoor airPLUS"),
                            (10, "LEED For Homes"),
                            (11, "Living Building Challenge"),
                            (12, "NGBS New Construction"),
                            (13, "NGBS Small Projects Remodel"),
                            (14, "NGBS Whole-Home Remodel"),
                            (15, "PHIUS+"),
                            (16, "WaterSense"),
                            (17, "Zero Energy Ready Home"),
                        ],
                        max_length=64,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(r"^\\d+(?:\\,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("ElectricExpense", models.FloatField(blank=True, null=True)),
                (
                    "ElectricOnPropertyYN",
                    models.BooleanField(
                        null=True,
                    ),
                ),
                ("GasExpense", models.FloatField(blank=True, null=True)),
                (
                    "GasOnPropertyYN",
                    models.BooleanField(
                        null=True,
                    ),
                ),
                (
                    "Heating",
                    models.CharField(
                        blank=True,
                        choices=[
                            (1, "Fuel-fired air " "distribution heater"),
                            (2, "Fuel-fired hydronic distribution heater"),
                            (3, "Fuel-fired unit heater"),
                            (4, "Fuel-fired unvented unit heater"),
                            (5, "Electric baseboard or radiant heater"),
                            (6, "Electric air distribution"),
                            (7, "Electric hydronic distribution"),
                            (8, "Air-source heat pump"),
                            (9, "Ground-source heat pump"),
                            (90, "ARI 330/Closed Loop Ground-source heat pump"),
                            (91, "ARI 325/Open Loop Ground-source heat pump"),
                            (92, "Dual Fuel heat Pump"),
                            (33, "Integrated Space Water Heater"),
                        ],
                        max_length=64,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(r"^\\d+(?:\\,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "HeatingYN",
                    models.BooleanField(
                        null=True,
                    ),
                ),
                ("Latitude", models.FloatField(blank=True, null=True)),
                ("Longitude", models.FloatField(blank=True, null=True)),
                ("PostalCode", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "StateOrProvince",
                    localflavor.us.models.USStateField(
                        blank=True,
                        choices=[
                            (b"AL", "Alabama"),
                            (b"AK", "Alaska"),
                            (b"AS", "American Samoa"),
                            (b"AZ", "Arizona"),
                            (b"AR", "Arkansas"),
                            (b"AA", "Armed Forces Americas"),
                            (b"AE", "Armed Forces Europe"),
                            (b"AP", "Armed Forces Pacific"),
                            (b"CA", "California"),
                            (b"CO", "Colorado"),
                            (b"CT", "Connecticut"),
                            (b"DE", "Delaware"),
                            (b"DC", "District of Columbia"),
                            (b"FL", "Florida"),
                            (b"GA", "Georgia"),
                            (b"GU", "Guam"),
                            (b"HI", "Hawaii"),
                            (b"ID", "Idaho"),
                            (b"IL", "Illinois"),
                            (b"IN", "Indiana"),
                            (b"IA", "Iowa"),
                            (b"KS", "Kansas"),
                            (b"KY", "Kentucky"),
                            (b"LA", "Louisiana"),
                            (b"ME", "Maine"),
                            (b"MD", "Maryland"),
                            (b"MA", "Massachusetts"),
                            (b"MI", "Michigan"),
                            (b"MN", "Minnesota"),
                            (b"MS", "Mississippi"),
                            (b"MO", "Missouri"),
                            (b"MT", "Montana"),
                            (b"NE", "Nebraska"),
                            (b"NV", "Nevada"),
                            (b"NH", "New Hampshire"),
                            (b"NJ", "New Jersey"),
                            (b"NM", "New Mexico"),
                            (b"NY", "New York"),
                            (b"NC", "North Carolina"),
                            (b"ND", "North Dakota"),
                            (b"MP", "Northern Mariana Islands"),
                            (b"OH", "Ohio"),
                            (b"OK", "Oklahoma"),
                            (b"OR", "Oregon"),
                            (b"PA", "Pennsylvania"),
                            (b"PR", "Puerto Rico"),
                            (b"RI", "Rhode Island"),
                            (b"SC", "South Carolina"),
                            (b"SD", "South Dakota"),
                            (b"TN", "Tennessee"),
                            (b"TX", "Texas"),
                            (b"UT", "Utah"),
                            (b"VT", "Vermont"),
                            (b"VI", "Virgin Islands"),
                            (b"VA", "Virginia"),
                            (b"WA", "Washington"),
                            (b"WV", "West Virginia"),
                            (b"WI", "Wisconsin"),
                            (b"WY", "Wyoming"),
                        ],
                        max_length=2,
                        null=True,
                    ),
                ),
                ("Stories", models.IntegerField(blank=True, null=True)),
                ("StoriesTotal", models.IntegerField(blank=True, null=True)),
                ("SubdivisionName", models.CharField(max_length=50)),
                ("YearBuilt", models.IntegerField(blank=True, null=True)),
                (
                    "YearBuiltSource",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "REM/Rate\xae Energy Model"),
                            (2, "Ekotrope Energy Model"),
                            (3, ""),
                        ],
                        null=True,
                    ),
                ),
                ("AddressLine1", models.CharField(blank=True, max_length=128, null=True)),
                ("AddressLine2", models.CharField(blank=True, max_length=128, null=True)),
                (
                    "City",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geographic.City",
                    ),
                ),
                (
                    "CountyOrParish",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geographic.County",
                    ),
                ),
                (
                    "home",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="home.Home"
                    ),
                ),
                (
                    "latest_home_status",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="home.EEPProgramHomeStatus"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="resogreenverification",
            name="ListingKeyNumeric",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="GreenVerification",
                to="reso.ResoHome",
            ),
        ),
        migrations.AddField(
            model_name="resogreenverification",
            name="qualifying_home_statuses",
            field=models.ManyToManyField(to="home.EEPProgramHomeStatus"),
        ),
        migrations.AddField(
            model_name="historicalresogreenverification",
            name="ListingKeyNumeric",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="reso.ResoHome",
            ),
        ),
        migrations.AddField(
            model_name="historicalresogreenverification",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterUniqueTogether(
            name="resogreenverification",
            unique_together=set([("ListingKeyNumeric", "GreenBuildingVerificationType")]),
        ),
    ]
