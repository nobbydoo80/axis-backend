# Generated by Django 1.11.16 on 2018-10-08 18:15

import axis.geographic.placedmodels
import axis.home.models
import axis.relationship.models
from django.db import migrations, models
import django.db.models.deletion
import django_states.fields
import localflavor.us.models
import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("company", "0001_initial"),
        ("geographic", "0001_initial"),
        ("subdivision", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="EEPProgramHomeStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("certification_date", models.DateField(blank=True, null=True)),
                ("pct_complete", models.FloatField(default=0.0)),
                ("is_billable", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(editable=False)),
                ("modified_date", models.DateTimeField()),
                (
                    "state",
                    django_states.fields.StateField(
                        default=b"pending_inspection", max_length=100, verbose_name="state id"
                    ),
                ),
            ],
            options={
                "verbose_name": "Home Status item",
            },
        ),
        migrations.CreateModel(
            name="EEPProgramHomeStatusAssociation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_contributor", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_accepted", models.BooleanField(default=False)),
                ("is_hidden", models.BooleanField(default=False)),
                ("active_until", models.DateTimeField(blank=True, null=True)),
                ("public_token", models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EEPProgramHomeStatusStateLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "state",
                    django_states.fields.StateField(
                        default=b"transition_initiated", max_length=100, verbose_name="state id"
                    ),
                ),
                (
                    "from_state",
                    models.CharField(
                        choices=[
                            ("pending_inspection", "Pending"),
                            ("inspection", "Active"),
                            ("qa_pending", "Pending QA"),
                            ("certification_pending", "Inspected"),
                            ("complete", "Certified"),
                            ("failed", "Failed"),
                            ("abandoned", "Abandoned"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "to_state",
                    models.CharField(
                        choices=[
                            ("pending_inspection", "Pending"),
                            ("inspection", "Active"),
                            ("qa_pending", "Pending QA"),
                            ("certification_pending", "Inspected"),
                            ("complete", "Certified"),
                            ("failed", "Failed"),
                            ("abandoned", "Abandoned"),
                        ],
                        max_length=100,
                    ),
                ),
                ("serialized_kwargs", models.TextField(blank=True)),
                (
                    "start_time",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="transition started at"
                    ),
                ),
            ],
            options={
                "verbose_name": "Home Status item transition",
            },
        ),
        migrations.CreateModel(
            name="HistoricalEEPProgramHomeStatus",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("certification_date", models.DateField(blank=True, null=True)),
                ("pct_complete", models.FloatField(default=0.0)),
                ("is_billable", models.BooleanField(default=False)),
                ("created_date", models.DateTimeField(editable=False)),
                ("modified_date", models.DateTimeField()),
                (
                    "state",
                    django_states.fields.StateField(
                        default=b"pending_inspection", max_length=100, verbose_name="state id"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_date", models.DateTimeField()),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1
                    ),
                ),
            ],
            options={
                "ordering": ("-history_date",),
                "verbose_name": "Historical Home Status item",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEEPProgramHomeStatusStateLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "state",
                    django_states.fields.StateField(
                        default=b"transition_initiated", max_length=100, verbose_name="state id"
                    ),
                ),
                (
                    "from_state",
                    models.CharField(
                        choices=[
                            ("pending_inspection", "Pending"),
                            ("inspection", "Active"),
                            ("qa_pending", "Pending QA"),
                            ("certification_pending", "Inspected"),
                            ("complete", "Certified"),
                            ("failed", "Failed"),
                            ("abandoned", "Abandoned"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "to_state",
                    models.CharField(
                        choices=[
                            ("pending_inspection", "Pending"),
                            ("inspection", "Active"),
                            ("qa_pending", "Pending QA"),
                            ("certification_pending", "Inspected"),
                            ("complete", "Certified"),
                            ("failed", "Failed"),
                            ("abandoned", "Abandoned"),
                        ],
                        max_length=100,
                    ),
                ),
                ("serialized_kwargs", models.TextField(blank=True)),
                (
                    "start_time",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="transition started at"
                    ),
                ),
            ],
            options={
                "verbose_name": "Historical Home Status item transition",
            },
        ),
        migrations.CreateModel(
            name="HistoricalHome",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        choices=[
                            (b"AL", "Alabama"),
                            (b"AK", "Alaska"),
                            (b"AS", "American Samoa"),
                            (b"AZ", "Arizona"),
                            (b"AR", "Arkansas"),
                            (b"AA", "Armed Forces Americas"),
                            (b"AE", "Armed Forces Europe"),
                            (b"AP", "Armed Forces Pacific"),
                            (b"CA", "California"),
                            (b"CO", "Colorado"),
                            (b"CT", "Connecticut"),
                            (b"DE", "Delaware"),
                            (b"DC", "District of Columbia"),
                            (b"FL", "Florida"),
                            (b"GA", "Georgia"),
                            (b"GU", "Guam"),
                            (b"HI", "Hawaii"),
                            (b"ID", "Idaho"),
                            (b"IL", "Illinois"),
                            (b"IN", "Indiana"),
                            (b"IA", "Iowa"),
                            (b"KS", "Kansas"),
                            (b"KY", "Kentucky"),
                            (b"LA", "Louisiana"),
                            (b"ME", "Maine"),
                            (b"MD", "Maryland"),
                            (b"MA", "Massachusetts"),
                            (b"MI", "Michigan"),
                            (b"MN", "Minnesota"),
                            (b"MS", "Mississippi"),
                            (b"MO", "Missouri"),
                            (b"MT", "Montana"),
                            (b"NE", "Nebraska"),
                            (b"NV", "Nevada"),
                            (b"NH", "New Hampshire"),
                            (b"NJ", "New Jersey"),
                            (b"NM", "New Mexico"),
                            (b"NY", "New York"),
                            (b"NC", "North Carolina"),
                            (b"ND", "North Dakota"),
                            (b"MP", "Northern Mariana Islands"),
                            (b"OH", "Ohio"),
                            (b"OK", "Oklahoma"),
                            (b"OR", "Oregon"),
                            (b"PA", "Pennsylvania"),
                            (b"PR", "Puerto Rico"),
                            (b"RI", "Rhode Island"),
                            (b"SC", "South Carolina"),
                            (b"SD", "South Dakota"),
                            (b"TN", "Tennessee"),
                            (b"TX", "Texas"),
                            (b"UT", "Utah"),
                            (b"VT", "Vermont"),
                            (b"VI", "Virgin Islands"),
                            (b"VA", "Virginia"),
                            (b"WA", "Washington"),
                            (b"WV", "West Virginia"),
                            (b"WI", "Wisconsin"),
                            (b"WY", "Wyoming"),
                        ],
                        editable=False,
                        max_length=2,
                        null=True,
                        verbose_name="State",
                    ),
                ),
                ("confirmed_address", models.BooleanField(default=False)),
                (
                    "address_override",
                    models.BooleanField(
                        default=False,
                        help_text="Bypass the attempt to normalize the address via a mapping service. Changing address fields after marking this option will unmark it.",
                        verbose_name="Override address",
                    ),
                ),
                (
                    "street_line1",
                    models.CharField(
                        blank=True,
                        help_text="Enter the street number and street name of the home (e.g. 123 Main St).",
                        max_length=100,
                        null=True,
                        verbose_name="Street Address",
                    ),
                ),
                (
                    "street_line2",
                    models.CharField(
                        blank=True,
                        help_text="Enter the unit number (where multiple dwelling units share a common street address), or leave blank if not applicable.",
                        max_length=100,
                        null=True,
                        verbose_name="Unit number (if applicable)",
                    ),
                ),
                (
                    "zipcode",
                    models.CharField(
                        help_text="Enter the 5-digit ZIP Code of home.",
                        max_length=15,
                        null=True,
                        verbose_name="ZIP Code",
                    ),
                ),
                (
                    "lot_number",
                    models.CharField(
                        blank=True,
                        help_text='Enter the lot number of the home (typical for a "production builder" in a subdivision or development of multiple homes), or leave blank or "N/A" if unknown or not applicable.',
                        max_length=16,
                        null=True,
                        verbose_name="Lot number",
                    ),
                ),
                (
                    "is_multi_family",
                    models.BooleanField(
                        default=False,
                        help_text="This denotes a multi-family project, such as an apartment or condo",
                        verbose_name="Multi-family",
                    ),
                ),
                ("is_custom_home", models.BooleanField(default=False)),
                (
                    "alt_name",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Alias/Code"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_date", models.DateTimeField(editable=False)),
                ("modified_date", models.DateTimeField()),
                ("slug", models.SlugField(editable=False, max_length=64)),
                ("street_line1_profile", models.PositiveIntegerField(blank=True, null=True)),
                ("bulk_uploaded", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_date", models.DateTimeField()),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1
                    ),
                ),
            ],
            options={
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
                "verbose_name": "historical Home",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalHomeDocument",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=255, null=True)),
                ("document", models.TextField(max_length=512)),
                ("is_active", models.BooleanField(default=True)),
                ("is_public", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_date", models.DateTimeField()),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1
                    ),
                ),
            ],
            options={
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
                "verbose_name": "historical home document",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Home",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        choices=[
                            (b"AL", "Alabama"),
                            (b"AK", "Alaska"),
                            (b"AS", "American Samoa"),
                            (b"AZ", "Arizona"),
                            (b"AR", "Arkansas"),
                            (b"AA", "Armed Forces Americas"),
                            (b"AE", "Armed Forces Europe"),
                            (b"AP", "Armed Forces Pacific"),
                            (b"CA", "California"),
                            (b"CO", "Colorado"),
                            (b"CT", "Connecticut"),
                            (b"DE", "Delaware"),
                            (b"DC", "District of Columbia"),
                            (b"FL", "Florida"),
                            (b"GA", "Georgia"),
                            (b"GU", "Guam"),
                            (b"HI", "Hawaii"),
                            (b"ID", "Idaho"),
                            (b"IL", "Illinois"),
                            (b"IN", "Indiana"),
                            (b"IA", "Iowa"),
                            (b"KS", "Kansas"),
                            (b"KY", "Kentucky"),
                            (b"LA", "Louisiana"),
                            (b"ME", "Maine"),
                            (b"MD", "Maryland"),
                            (b"MA", "Massachusetts"),
                            (b"MI", "Michigan"),
                            (b"MN", "Minnesota"),
                            (b"MS", "Mississippi"),
                            (b"MO", "Missouri"),
                            (b"MT", "Montana"),
                            (b"NE", "Nebraska"),
                            (b"NV", "Nevada"),
                            (b"NH", "New Hampshire"),
                            (b"NJ", "New Jersey"),
                            (b"NM", "New Mexico"),
                            (b"NY", "New York"),
                            (b"NC", "North Carolina"),
                            (b"ND", "North Dakota"),
                            (b"MP", "Northern Mariana Islands"),
                            (b"OH", "Ohio"),
                            (b"OK", "Oklahoma"),
                            (b"OR", "Oregon"),
                            (b"PA", "Pennsylvania"),
                            (b"PR", "Puerto Rico"),
                            (b"RI", "Rhode Island"),
                            (b"SC", "South Carolina"),
                            (b"SD", "South Dakota"),
                            (b"TN", "Tennessee"),
                            (b"TX", "Texas"),
                            (b"UT", "Utah"),
                            (b"VT", "Vermont"),
                            (b"VI", "Virgin Islands"),
                            (b"VA", "Virginia"),
                            (b"WA", "Washington"),
                            (b"WV", "West Virginia"),
                            (b"WI", "Wisconsin"),
                            (b"WY", "Wyoming"),
                        ],
                        editable=False,
                        max_length=2,
                        null=True,
                        verbose_name="State",
                    ),
                ),
                ("confirmed_address", models.BooleanField(default=False)),
                (
                    "address_override",
                    models.BooleanField(
                        default=False,
                        help_text="Bypass the attempt to normalize the address via a mapping service. Changing address fields after marking this option will unmark it.",
                        verbose_name="Override address",
                    ),
                ),
                (
                    "street_line1",
                    models.CharField(
                        blank=True,
                        help_text="Enter the street number and street name of the home (e.g. 123 Main St).",
                        max_length=100,
                        null=True,
                        verbose_name="Street Address",
                    ),
                ),
                (
                    "street_line2",
                    models.CharField(
                        blank=True,
                        help_text="Enter the unit number (where multiple dwelling units share a common street address), or leave blank if not applicable.",
                        max_length=100,
                        null=True,
                        verbose_name="Unit number (if applicable)",
                    ),
                ),
                (
                    "zipcode",
                    models.CharField(
                        help_text="Enter the 5-digit ZIP Code of home.",
                        max_length=15,
                        null=True,
                        verbose_name="ZIP Code",
                    ),
                ),
                (
                    "lot_number",
                    models.CharField(
                        blank=True,
                        help_text='Enter the lot number of the home (typical for a "production builder" in a subdivision or development of multiple homes), or leave blank or "N/A" if unknown or not applicable.',
                        max_length=16,
                        null=True,
                        verbose_name="Lot number",
                    ),
                ),
                (
                    "is_multi_family",
                    models.BooleanField(
                        default=False,
                        help_text="This denotes a multi-family project, such as an apartment or condo",
                        verbose_name="Multi-family",
                    ),
                ),
                ("is_custom_home", models.BooleanField(default=False)),
                (
                    "alt_name",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Alias/Code"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_date", models.DateTimeField(editable=False)),
                ("modified_date", models.DateTimeField()),
                ("slug", models.SlugField(editable=False, max_length=64, unique=True)),
                ("street_line1_profile", models.PositiveIntegerField(blank=True, null=True)),
                ("bulk_uploaded", models.BooleanField(default=False)),
                (
                    "city",
                    models.ForeignKey(
                        blank=True,
                        help_text='Type the first few letters of the name of the city the home is located in and select the correct city/state/county combination from the list presented. If the correct city is not available, click "Add New" to add a city to the database.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geographic.City",
                        verbose_name="City/State",
                    ),
                ),
                (
                    "climate_zone",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geographic.ClimateZone",
                    ),
                ),
            ],
            options={
                "verbose_name": "Home",
            },
            bases=(
                axis.relationship.models.RelationshipUtilsMixin,
                axis.geographic.placedmodels.PlaceSynchronizationMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="HomeDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=255, null=True)),
                ("document", models.FileField(max_length=512, upload_to="")),
                ("is_active", models.BooleanField(default=True)),
                ("is_public", models.BooleanField(default=False)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="home_document",
                        to="company.Company",
                    ),
                ),
                (
                    "home",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="home.Home",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StandardDisclosureSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "rater_receives_fee",
                    models.BooleanField(
                        null=True,
                        choices=[(None, "Use general setting"), (False, "No"), (True, "Yes")],
                        default=None,
                        verbose_name="Rater or employer is receiving a fee for rating this home",
                    ),
                ),
                (
                    "service_mechanical_design",
                    models.BooleanField(
                        null=True,
                        choices=[(None, "Use general setting"), (False, "No"), (True, "Yes")],
                        default=None,
                        verbose_name="Mechanical system design",
                    ),
                ),
                (
                    "service_moisture_consulting",
                    models.BooleanField(
                        null=True,
                        choices=[(None, "Use general setting"), (False, "No"), (True, "Yes")],
                        default=None,
                        verbose_name="Moisture control or indoor air quality consulting",
                    ),
                ),
                (
                    "service_performance_testing",
                    models.BooleanField(
                        null=True,
                        choices=[(None, "Use general setting"), (False, "No"), (True, "Yes")],
                        default=None,
                        verbose_name="Performance testing and/or commissioning other than required for the rating itself",
                    ),
                ),
                (
                    "service_training",
                    models.BooleanField(
                        null=True,
                        choices=[(None, "Use general setting"), (False, "No"), (True, "Yes")],
                        default=None,
                        verbose_name="Training for sales or construction personnel",
                    ),
                ),
                (
                    "service_other",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Other (specify)"
                    ),
                ),
                (
                    "rater_responsibility",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("seller", "Seller of home or agent"),
                            ("mortgagor", "Mortgagor for some portion of payments"),
                            ("employee", "An employee or contractor for utility"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="Rater or employer is",
                    ),
                ),
                (
                    "supplier_hvac",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("rater_installed", "Rater installed in home"),
                            ("employer_installed", "Employer installed in home"),
                            ("rater_supplied", "Rater is supplier"),
                            ("employer_supplied", "Employer is supplier"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="HVAC",
                    ),
                ),
                (
                    "supplier_thermal",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("rater_installed", "Rater installed in home"),
                            ("employer_installed", "Employer installed in home"),
                            ("rater_supplied", "Rater is supplier"),
                            ("employer_supplied", "Employer is supplier"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Themal insulation",
                    ),
                ),
                (
                    "supplier_sealing",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("rater_installed", "Rater installed in home"),
                            ("employer_installed", "Employer installed in home"),
                            ("rater_supplied", "Rater is supplier"),
                            ("employer_supplied", "Employer is supplier"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Air sealing of envelope or duct",
                    ),
                ),
                (
                    "supplier_windows",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("rater_installed", "Rater installed in home"),
                            ("employer_installed", "Employer installed in home"),
                            ("rater_supplied", "Rater is supplier"),
                            ("employer_supplied", "Employer is supplier"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Windows or shades",
                    ),
                ),
                (
                    "supplier_appliances",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("rater_installed", "Rater installed in home"),
                            ("employer_installed", "Employer installed in home"),
                            ("rater_supplied", "Rater is supplier"),
                            ("employer_supplied", "Employer is supplier"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Appliances",
                    ),
                ),
                (
                    "supplier_construction",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("rater_installed", "Rater installed in home"),
                            ("employer_installed", "Employer installed in home"),
                            ("rater_supplied", "Rater is supplier"),
                            ("employer_supplied", "Employer is supplier"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Builder, developer, construction contractor, etc",
                    ),
                ),
                (
                    "supplier_other",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("rater_installed", "Rater installed in home"),
                            ("employer_installed", "Employer installed in home"),
                            ("rater_supplied", "Rater is supplier"),
                            ("employer_supplied", "Employer is supplier"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Other",
                    ),
                ),
                (
                    "supplier_other_specify",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Other (specify)"
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(
                        null=True,
                        choices=[(None, "Use general setting"), (False, "No"), (True, "Yes")],
                        default=None,
                        verbose_name="Is sampled",
                    ),
                ),
                (
                    "company",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="company.Company",
                    ),
                ),
                (
                    "home_status",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="home.EEPProgramHomeStatus",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ownedstandarddisclosuresettings_set",
                        to="company.Company",
                    ),
                ),
                (
                    "subdivision",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="subdivision.Subdivision",
                    ),
                ),
            ],
            options={},
        ),
    ]
