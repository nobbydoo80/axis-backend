# Generated by Django 1.11.16 on 2018-10-08 18:15

import datetime
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="LegacyNEEAAddress",
            fields=[
                (
                    "id",
                    models.IntegerField(db_column="Address_ID", primary_key=True, serialize=False),
                ),
                ("lot_no", models.CharField(blank=True, db_column="Lot_No", max_length=150)),
                ("street_no", models.CharField(blank=True, db_column="Street_No", max_length=45)),
                (
                    "street_modifier",
                    models.CharField(blank=True, db_column="Street_Modifier", max_length=6),
                ),
                (
                    "street_name",
                    models.CharField(blank=True, db_column="Street_Name", max_length=300),
                ),
                ("last_update_by", models.CharField(db_column="Last_Update_By", max_length=150)),
                (
                    "last_update_date",
                    models.DateTimeField(blank=True, db_column="Last_Update_Date", null=True),
                ),
                (
                    "development_name",
                    models.CharField(blank=True, db_column="Development_Name", max_length=150),
                ),
                (
                    "oldaddress",
                    models.CharField(blank=True, db_column="OldAddress", max_length=900),
                ),
                ("county", models.CharField(blank=True, db_column="County", max_length=192)),
            ],
            options={
                "db_table": "Address",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEABOP",
            fields=[
                ("id", models.IntegerField(db_column="BOP_ID", primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, db_column="BOP", max_length=150)),
                (
                    "description",
                    models.CharField(blank=True, db_column="Description", max_length=3000),
                ),
                ("active", models.IntegerField(db_column="Active")),
                (
                    "last_update_by",
                    models.CharField(blank=True, db_column="Last_Update_By", max_length=150),
                ),
                (
                    "last_update_date",
                    models.DateTimeField(blank=True, db_column="Last_Update_Date", null=True),
                ),
                ("multifamily", models.IntegerField(db_column="MultiFamily")),
                ("bop_xml", models.TextField(blank=True, db_column="BOP_XML")),
                ("bop_order", models.IntegerField(blank=True, db_column="BOP_Order", null=True)),
            ],
            options={
                "db_table": "BOP",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEABOPHeatSource",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="BOP_Heat_Source_ID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "heat_source",
                    models.CharField(blank=True, db_column="Heat_Source", max_length=150),
                ),
            ],
            options={
                "db_table": "BOP_Heat_Source",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEABOPToHeat",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="BOP_To_Heat_Source_ID", primary_key=True, serialize=False
                    ),
                ),
            ],
            options={
                "db_table": "BOP_To_Heat",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEABOPToState",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="BOP_To_State_ID", primary_key=True, serialize=False
                    ),
                ),
                ("state_abbr", models.CharField(blank=True, db_column="State_Abbr", max_length=6)),
            ],
            options={
                "db_table": "BOP_To_State",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEABOPToTCO",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="BOP_To_TCO_ID", primary_key=True, serialize=False
                    ),
                ),
            ],
            options={
                "db_table": "BOP_To_TCO",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEABuilderType",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="Builder_Type_ID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "builder_type",
                    models.CharField(blank=True, db_column="Builder_Type", max_length=150),
                ),
            ],
            options={
                "db_table": "Builder_Type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAContact",
            fields=[
                (
                    "id",
                    models.IntegerField(db_column="Contact_ID", primary_key=True, serialize=False),
                ),
                ("title", models.CharField(blank=True, db_column="Title", max_length=150)),
                ("last_name", models.CharField(blank=True, db_column="Last_Name", max_length=150)),
                (
                    "first_name",
                    models.CharField(blank=True, db_column="First_Name", max_length=150),
                ),
                ("email", models.CharField(blank=True, db_column="Email", max_length=300)),
                (
                    "office_phone",
                    models.CharField(blank=True, db_column="Office_Phone", max_length=60),
                ),
                (
                    "direct_phone",
                    models.CharField(blank=True, db_column="Direct_Phone", max_length=60),
                ),
                ("cell_phone", models.CharField(blank=True, db_column="Cell_Phone", max_length=60)),
                ("fax", models.CharField(blank=True, db_column="Fax", max_length=60)),
                (
                    "alternate_phone",
                    models.CharField(blank=True, db_column="Alternate_Phone", max_length=60),
                ),
                ("last_update_by", models.CharField(db_column="Last_Update_By", max_length=150)),
                (
                    "last_update_date",
                    models.DateTimeField(blank=True, db_column="Last_Update_Date", null=True),
                ),
                ("active", models.IntegerField(blank=True, db_column="Active", null=True)),
                ("username", models.CharField(blank=True, db_column="UserName", max_length=150)),
                (
                    "certified_date",
                    models.DateTimeField(blank=True, db_column="Certified_Date", null=True),
                ),
                ("certifier", models.CharField(blank=True, db_column="Certifier", max_length=150)),
                ("ducts", models.IntegerField(db_column="Ducts")),
                ("blower_door", models.IntegerField(db_column="Blower_Door")),
                ("heat_pump", models.IntegerField(db_column="Heat_Pump")),
                (
                    "agreement_date",
                    models.DateTimeField(blank=True, db_column="Agreement_Date", null=True),
                ),
            ],
            options={"db_table": "Contact", "managed": False},
        ),
        migrations.CreateModel(
            name="LegacyNEEAContactStateCertification",
            fields=[
                (
                    "id",
                    models.IntegerField(db_column="CertifyID", primary_key=True, serialize=False),
                ),
                ("state_abbr", models.CharField(blank=True, db_column="State_Abbr", max_length=6)),
            ],
            options={
                "db_table": "Contact_State_Certification",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAContactToType",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="Contact_To_Type_ID", primary_key=True, serialize=False
                    ),
                ),
            ],
            options={
                "db_table": "Contact_To_Type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAContactType",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="Contact_Type_ID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "contact_type",
                    models.CharField(blank=True, db_column="Contact_Type", max_length=150),
                ),
            ],
            options={
                "db_table": "Contact_Type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAError",
            fields=[
                ("id", models.IntegerField(db_column="ID", primary_key=True, serialize=False)),
                ("error", models.CharField(db_column="Error", max_length=255)),
                ("created_on", models.DateTimeField(default=datetime.datetime.now, editable=False)),
            ],
            options={
                "db_table": "Error",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAHome",
            fields=[
                ("id", models.IntegerField(db_column="Home_ID", primary_key=True, serialize=False)),
                (
                    "builder_owner",
                    models.IntegerField(blank=True, db_column="Builder_Owner", null=True),
                ),
                ("eto_territory", models.BooleanField(db_column="ETO_Territory", default=False)),
                (
                    "electric_utility_account_no",
                    models.CharField(
                        blank=True, db_column="Electric_Utility_Account_No", max_length=75
                    ),
                ),
                (
                    "gas_utility_account_no",
                    models.CharField(blank=True, db_column="Gas_Utility_Account_No", max_length=75),
                ),
                ("last_update_by", models.CharField(db_column="Last_Update_By", max_length=150)),
                (
                    "last_update_date",
                    models.DateField(blank=True, db_column="Last_Update_Date", null=True),
                ),
                (
                    "project_start_date",
                    models.DateField(blank=True, db_column="Project_Start_Date", null=True),
                ),
                (
                    "estimated_completion_date",
                    models.DateField(blank=True, db_column="Estimated_Completion_Date", null=True),
                ),
                ("multifamily", models.BooleanField(db_column="MultiFamily", default=False)),
                (
                    "description",
                    models.CharField(blank=True, db_column="Description", max_length=600),
                ),
                (
                    "initiation_date",
                    models.DateField(blank=True, db_column="Initiation_Date", null=True),
                ),
            ],
            options={
                "managed": False,
                "verbose_name_plural": "Legacy NEEA Homes",
                "db_table": "Home",
                "verbose_name": "Legacy NEEA Home",
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAHomeType",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="Home_Type_ID", primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(blank=True, db_column="Description", max_length=150)),
                ("last_update_by", models.CharField(db_column="Last_Update_By", max_length=150)),
                (
                    "last_update_date",
                    models.DateTimeField(blank=True, db_column="Last_Update_Date", null=True),
                ),
            ],
            options={
                "db_table": "Home_Type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAIncentive",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="Incentive_ID", primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(db_column="Description", max_length=150)),
            ],
            options={
                "db_table": "Incentive",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAInspection",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="Inspection_ID", primary_key=True, serialize=False
                    ),
                ),
                ("bop_xml", models.TextField(blank=True, db_column="BOP_XML")),
                (
                    "certification_date",
                    models.DateTimeField(blank=True, db_column="Certification_Date", null=True),
                ),
                (
                    "verification_date",
                    models.DateTimeField(blank=True, db_column="Verification_Date", null=True),
                ),
                (
                    "last_update_by",
                    models.CharField(blank=True, db_column="Last_Update_By", max_length=150),
                ),
                (
                    "last_update_date",
                    models.DateTimeField(blank=True, db_column="Last_Update_Date", null=True),
                ),
                ("note", models.CharField(blank=True, db_column="Note", max_length=21000)),
                (
                    "performance_test_result",
                    models.TextField(blank=True, db_column="Performance_Test"),
                ),
                ("qa_required", models.BooleanField(db_column="QA_Required", default=False)),
                ("qa_completed", models.BooleanField(db_column="QA_Completed", default=False)),
                ("invoice", models.CharField(blank=True, db_column="Invoice", max_length=150)),
                ("receipt", models.CharField(blank=True, db_column="Receipt", max_length=150)),
                ("ischeckedout", models.IntegerField(db_column="IsCheckedOut")),
                (
                    "qa_start_date",
                    models.DateTimeField(blank=True, db_column="QA_Start_Date", null=True),
                ),
                (
                    "qa_lastactivity_date",
                    models.DateTimeField(blank=True, db_column="QA_LastActivity_Date", null=True),
                ),
                (
                    "qacompletedate",
                    models.DateTimeField(blank=True, db_column="QACompleteDate", null=True),
                ),
            ],
            options={
                "verbose_name": "Legacy NEEA Inspection",
                "db_table": "Inspection",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAInspectionAttachments",
            fields=[
                ("id", models.IntegerField(db_column="File_ID", primary_key=True, serialize=False)),
                ("file_name", models.CharField(blank=True, db_column="File_Name", max_length=150)),
                (
                    "file_description",
                    models.CharField(blank=True, db_column="File_Description", max_length=600),
                ),
                ("mime_type", models.CharField(blank=True, db_column="Mime_Type", max_length=150)),
                ("file_size", models.CharField(blank=True, db_column="File_Size", max_length=60)),
                ("file_binary", models.TextField(blank=True, db_column="File_Binary")),
            ],
            options={
                "db_table": "Inspection_Attachments",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAInspectionIncentive",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="Inspection_Incentive_Id", primary_key=True, serialize=False
                    ),
                ),
                ("model", models.CharField(blank=True, db_column="Model", max_length=150)),
                ("comments", models.CharField(blank=True, db_column="Comments", max_length=6144)),
            ],
            options={
                "verbose_name": "Legacy NEEA Inspection Incentive",
                "db_table": "Inspection_Incentive",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAPartner",
            fields=[
                (
                    "id",
                    models.IntegerField(db_column="Partner_ID", primary_key=True, serialize=False),
                ),
                ("last_update_by", models.CharField(db_column="Last_Update_By", max_length=150)),
                ("last_update_date", models.DateTimeField(db_column="Last_Update_Date")),
                ("website", models.CharField(blank=True, db_column="Website", max_length=300)),
                (
                    "partner_name",
                    models.CharField(blank=True, db_column="Partner_Name", max_length=300),
                ),
                (
                    "partner_type",
                    models.CharField(blank=True, db_column="Partner_Type", max_length=150),
                ),
                (
                    "utility_type",
                    models.CharField(blank=True, db_column="Utility_Type", max_length=150),
                ),
                (
                    "partner_since_date",
                    models.DateTimeField(blank=True, db_column="Partner_Since_Date", null=True),
                ),
                (
                    "homes_built_per_year",
                    models.IntegerField(blank=True, db_column="Homes_Built_Per_Year", null=True),
                ),
                (
                    "builder_experience_years",
                    models.IntegerField(
                        blank=True, db_column="Builder_Experience_Years", null=True
                    ),
                ),
                ("commitment", models.IntegerField(db_column="Commitment")),
                (
                    "star_homes_per_year",
                    models.IntegerField(blank=True, db_column="Star_Homes_Per_Year", null=True),
                ),
                ("notes", models.CharField(blank=True, db_column="Notes", max_length=7500)),
                ("active", models.BooleanField(db_column="Active", default=False)),
            ],
            options={
                "verbose_name": "Legacy NEEA Partner",
                "db_table": "Partner",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAPartnerToHouse",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="Partner_To_House_ID", primary_key=True, serialize=False
                    ),
                ),
                ("last_update_by", models.CharField(db_column="Last_Update_By", max_length=150)),
                (
                    "last_update_date",
                    models.DateTimeField(blank=True, db_column="Last_Update_Date", null=True),
                ),
                (
                    "partner_role",
                    models.CharField(blank=True, db_column="Partner_Role", max_length=150),
                ),
            ],
            options={
                "db_table": "Partner_To_House",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAPartnerToRegion",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="Partner_to_Region_ID", primary_key=True, serialize=False
                    ),
                ),
            ],
            options={
                "db_table": "Partner_to_Region",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAPerformanceTest",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="Performance_Test_ID", primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(blank=True, db_column="Title", max_length=150)),
                (
                    "description",
                    models.CharField(blank=True, db_column="Description", max_length=600),
                ),
                (
                    "performance_test_xml",
                    models.TextField(blank=True, db_column="Performance_Test_Xml"),
                ),
            ],
            options={
                "db_table": "Performance_Test",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEARegion",
            fields=[
                (
                    "id",
                    models.IntegerField(db_column="Region_ID", primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, db_column="Region", max_length=150)),
            ],
            options={
                "db_table": "Region",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAStatus",
            fields=[
                (
                    "id",
                    models.IntegerField(db_column="Status_ID", primary_key=True, serialize=False),
                ),
                ("status", models.CharField(blank=True, db_column="Status", max_length=150)),
                ("ordinal", models.IntegerField(blank=True, db_column="Ordinal", null=True)),
            ],
            options={
                "db_table": "Status",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEATCO",
            fields=[
                ("id", models.IntegerField(db_column="TCO_ID", primary_key=True, serialize=False)),
                ("tco", models.CharField(blank=True, db_column="TCO", max_length=600)),
                (
                    "description",
                    models.CharField(blank=True, db_column="Description", max_length=3000),
                ),
                (
                    "last_update_by",
                    models.CharField(blank=True, db_column="Last_Update_By", max_length=150),
                ),
                (
                    "last_update_date",
                    models.DateTimeField(blank=True, db_column="Last_Update_Date", null=True),
                ),
                ("active", models.IntegerField(db_column="Active")),
            ],
            options={
                "db_table": "TCO",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEATCOToState",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="TCO_To_State_ID", primary_key=True, serialize=False
                    ),
                ),
                ("state_abbr", models.CharField(blank=True, db_column="State_Abbr", max_length=6)),
            ],
            options={
                "db_table": "TCO_To_State",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAZipCounty",
            fields=[
                ("id", models.IntegerField(db_column="id", primary_key=True, serialize=False)),
                ("county", models.CharField(db_column="County", max_length=192)),
            ],
            options={
                "db_table": "ZipCounty",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAZipPlus",
            fields=[
                (
                    "zip_code",
                    models.CharField(
                        db_column="Zip_Code", max_length=15, primary_key=True, serialize=False
                    ),
                ),
                ("city", models.CharField(blank=True, db_column="City", max_length=150)),
                ("state", models.CharField(blank=True, db_column="State", max_length=150)),
                ("state_abbr", models.CharField(blank=True, db_column="State_Abbr", max_length=6)),
                ("last_update_by", models.CharField(db_column="Last_Update_By", max_length=150)),
                (
                    "last_update_date",
                    models.DateTimeField(blank=True, db_column="Last_Update_Date", null=True),
                ),
            ],
            options={
                "db_table": "Zip_Plus",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LegacyNEEAPartnerAxisBridge",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("company_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "Legacy NEEA Partner to Axis Bridge",
            },
        ),
        migrations.CreateModel(
            name="PNWZone",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("heating_zone", models.IntegerField(choices=[(1, "hz1"), (2, "hz2"), (3, "hz3")])),
                ("cooling_zone", models.IntegerField(choices=[(1, "cz1"), (2, "cz2"), (3, "cz3")])),
            ],
        ),
        migrations.CreateModel(
            name="StandardProtocolCalculator",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("last_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("reports", models.TextField(default=dict)),
                (
                    "heating_fuel",
                    models.CharField(
                        choices=[("gas", "Gas"), ("electric", "Electric")], max_length=8
                    ),
                ),
                (
                    "heating_system_config",
                    models.CharField(
                        choices=[("central", "Central"), ("zonal", "Zonal"), ("all", "All")],
                        max_length=8,
                    ),
                ),
                (
                    "home_size",
                    models.CharField(
                        choices=[
                            ("small", "Small"),
                            ("medium", "Medium"),
                            ("large", "Large"),
                            ("all", "All"),
                        ],
                        max_length=8,
                    ),
                ),
                ("estar_std_refrigerators_installed", models.BooleanField(default=False)),
                ("estar_dishwasher_installed", models.BooleanField(default=False)),
                ("estar_front_load_clothes_washer_installed", models.BooleanField(default=False)),
                (
                    "clothes_dryer_tier",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("tier2", "Tier 2"),
                            ("tier3", "Tier 3"),
                            ("estar", "ENERGY STAR\xae"),
                        ],
                        max_length=8,
                        null=True,
                    ),
                ),
                ("cfl_installed", models.PositiveIntegerField(default=0)),
                ("led_installed", models.PositiveIntegerField(default=0)),
                ("total_installed_lamps", models.PositiveIntegerField(default=0)),
                ("smart_thermostat_installed", models.BooleanField(default=False)),
                ("qty_shower_head_1p5", models.PositiveIntegerField(default=0)),
                ("qty_shower_head_1p75", models.PositiveIntegerField(default=0)),
                ("heating_kwh_savings", models.FloatField(default=0)),
                ("heating_therm_savings", models.FloatField(default=0)),
                ("cooling_kwh_savings", models.FloatField(default=0)),
                ("cooling_therm_savings", models.FloatField(default=0)),
                ("smart_thermostat_kwh_savings", models.FloatField(default=0)),
                ("smart_thermostat_therm_savings", models.FloatField(default=0)),
                ("water_heater_kwh_savings", models.FloatField(default=0)),
                ("water_heater_therm_savings", models.FloatField(default=0)),
                ("showerhead_kwh_savings", models.FloatField(default=0)),
                ("showerhead_therm_savings", models.FloatField(default=0)),
                ("lighting_kwh_savings", models.FloatField(default=0)),
                ("lighting_therm_savings", models.FloatField(default=0)),
                ("appliance_kwh_savings", models.FloatField(default=0)),
                ("appliance_therm_savings", models.FloatField(default=0)),
                ("total_kwh_savings", models.FloatField(default=0)),
                ("total_therm_savings", models.FloatField(default=0)),
                ("has_incentive", models.BooleanField(null=True)),
                ("reference_home_kwh", models.FloatField(default=0)),
                ("busbar_consumption", models.FloatField(default=0)),
                ("busbar_savings", models.FloatField(default=0)),
                (
                    "pct_improvement_method",
                    models.CharField(
                        choices=[("default", "Default"), ("alternate", "Alternate")],
                        default="default",
                        max_length=16,
                    ),
                ),
                ("percent_improvement", models.FloatField(default=0)),
                ("revised_percent_improvement", models.FloatField(default=0)),
                ("total_incentive", models.FloatField(default=0)),
                ("builder_incentive", models.FloatField(default=0)),
                ("bpa_hvac_kwh_savings", models.FloatField(default=0.0)),
                ("hvac_kwh_incentive", models.FloatField(default=0.0)),
                ("bpa_lighting_kwh_savings", models.FloatField(default=0.0)),
                ("lighting_kwh_incentive", models.FloatField(default=0.0)),
                ("bpa_water_heater_kwh_savings", models.FloatField(default=0.0)),
                ("water_heater_kwh_incentive", models.FloatField(default=0.0)),
                ("bpa_appliance_kwh_savings", models.FloatField(default=0.0)),
                ("appliance_kwh_incentive", models.FloatField(default=0.0)),
                ("bpa_windows_shell_kwh_savings", models.FloatField(default=0.0)),
                ("windows_shell_kwh_incentive", models.FloatField(default=0.0)),
                ("bpa_smart_thermostat_kwh_savings", models.FloatField(default=0.0)),
                ("smart_thermostat_kwh_incentive", models.FloatField(default=0.0)),
                ("bpa_showerhead_kwh_savings", models.FloatField(default=0.0)),
                ("showerhead_kwh_incentive", models.FloatField(default=0.0)),
                ("reported_shell_windows_kwh_savings", models.FloatField(default=0.0)),
                ("reported_shell_windows_incentive", models.FloatField(default=0.0)),
                ("reported_hvac_waterheater_kwh_savings", models.FloatField(default=0.0)),
                ("reported_hvac_waterheater_incentive", models.FloatField(default=0.0)),
                ("reported_lighting_showerhead_tstats_kwh_savings", models.FloatField(default=0.0)),
                ("reported_lighting_showerhead_tstats_incentive", models.FloatField(default=0.0)),
                ("code_total_consumption_mmbtu", models.FloatField(default=0.0)),
                ("improved_total_consumption_mmbtu", models.FloatField(default=0.0)),
                ("improved_total_consumption_mmbtu_with_savings", models.FloatField(default=0.0)),
            ],
            options={"verbose_name": "Standard Protocol Calculator Result"},
        ),
    ]
